<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javaweb</title>
      <link href="/2024/03/12/Javaweb/"/>
      <url>/2024/03/12/Javaweb/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2024/03/03/MySQL/"/>
      <url>/2024/03/03/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>数据库：存储数据的仓库，数据是有组织的进行存储，简称为DataBase(DB)</p><p>数据库管理系统：操纵和管理数据库的大型软件，简称为DataBase Management System(DBMS)</p><p>SQL：操作关系型数据库的编程语言，定义了一套操作关系型数据库系统统一标准，简称为Structed Query Language(SQL)</p><ul><li>启动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql80</span><br></pre></td></tr></table></figure><ul><li>停止</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure><ul><li>客户端连接</li></ul><p>方法一：MySQL提供的客户端命令行工具</p><p>方法二：系统自带的命令行工具执行指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql [-h 127.0.0.1] [-P 3306] -u root -p</span><br></pre></td></tr></table></figure><p>注意：使用第二种方式时，需要配置PATH环境变量</p><p><strong>关系型数据库(RDBMS)</strong></p><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p><p>特点：</p><ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便</li></ul><p><strong>数据模型</strong></p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240229202402534.png" alt="image-20240229202402534"></p><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h4><ol><li>SQL语句可以单行或者多行书写，以分号结尾</li><li>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议大写</li><li>注释：单行注释(–注释内容或# 注释内容(MySQL独有))  多行注释(&#x2F;* 注释内容 *&#x2F;)</li></ol><p>SQL分类</p><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definnition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户，控制数据库的访问权限</td></tr></tbody></table><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><p><strong>数据库操作</strong></p><p>查询</p><ul><li>查询所有数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><ul><li>查询当前数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><p>创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排列规则];</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Drop DATABASE[IF EXISTS] 数据库名;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><p><strong>表操作</strong></p><p>查询当前数据库中所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure><p>查询表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名;</span><br></pre></td></tr></table></figure><p>查询指定表的建表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE 表名;</span><br></pre></td></tr></table></figure><p>创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名&#123;</span><br><span class="line">字段1 字段1类型[COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型[COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型[COMMENT 字段3注释],</span><br><span class="line">……</span><br><span class="line">字段1 字段1类型[COMMENT 字段1注释]</span><br><span class="line">&#125;[COMMENT 表注释];</span><br></pre></td></tr></table></figure><p>注意：[…]位&#x3D;为可选参数，最后一个字段后面没有逗号</p><p>数据类型</p><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><p>修改</p><ul><li>添加字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><ul><li>修改数据类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度) </span><br></pre></td></tr></table></figure><ul><li>修改字段名和字段类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><ul><li>删除字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br></pre></td></tr></table></figure><ul><li>修改表名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure><p>删除</p><ul><li>删除表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE [IF EXISTS] 表名;</span><br></pre></td></tr></table></figure><ul><li>删除指定表，并重新创建该表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure><p>注意：在删除表时，表中的全部数据也会被删除</p><h4 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h4><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进行增删改操作。</p><ul><li>添加数据 INSERT</li><li>修改数据 UPDATE</li><li>删除数据 DELETE</li></ul><p><strong>添加数据</strong></p><ul><li>给指定字段添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名(字段名1,字段名2,...) VALUES(值1,值2,...);</span><br></pre></td></tr></table></figure><ul><li>给全部字段添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名 VALUES(值1,值2,...);</span><br></pre></td></tr></table></figure><ul><li>批量添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名(字段名1,字段名2,...) VALUES(值1,值2,...),(值1,值2,...),(值1,值2,...);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名 VALUES(值1,值2,...),(值1,值2,...),(值1,值2,...);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>插入数据时，指定的字段顺序需要与值得顺序是一一对应的</li><li>字符串和日期型数据应该包含在引号中</li><li>插入的数据大小，应该在字段的规定范围内</li></ul><p><strong>修改数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET 字段1 = 值1 ,字段2 = 值2, ...[WHERE 条件];</span><br></pre></td></tr></table></figure><p>注意：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据</p><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE 条件];</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>DELETE语句的条件可以有，也可以没有，如果没有条件，则会删除所有整张表的所有数据</li><li>DELETE语句不能删除某一个字段的值(可以使用UPDATE)</li></ul><h4 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h4><p>DQL全称是Data Query Lanuage(数据查询语言)，数据查询语言，用来查询数据库表的记录</p><p>查询关键字：<mark>SELECT</mark></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">    分页参数</span><br></pre></td></tr></table></figure><p><strong>基础查询</strong></p><ul><li>查询多个字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1,字段2,字段3... FROM 表名;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名;</span><br></pre></td></tr></table></figure><ul><li>设置别名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1 [AS 别名1], 字段2 [AS 别名2] ... FROM 表名;</span><br></pre></td></tr></table></figure><ul><li>去除重复记录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT 字段列表 FROM 表名;</span><br></pre></td></tr></table></figure><p><strong>条件查询</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 WHERE 条件列表;</span><br></pre></td></tr></table></figure><p>条件</p><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt;或！&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN… AND…</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配(_匹配单个字符，%匹配任意字符)</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr><tr><td>AND 或  &amp;&amp;</td><td>并且(多个条件同时成立时)</td></tr><tr><td>OR 或  ||</td><td>或者(多个条件任意一个成立时)</td></tr><tr><td>NOT 或  !</td><td>非，不是</td></tr></tbody></table><p><strong>聚合函数</strong></p><p>将一列数据作为一个整体，进行纵向计算</p><p>常见聚合函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 聚合函数 (字段列表) FROM 表名;</span><br></pre></td></tr></table></figure><p>注意：所有null值不参与所有聚合函数运算</p><p><strong>分组查询</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 [where 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件];</span><br></pre></td></tr></table></figure><p>where和having区别</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ul><p>注意</p><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段五任何意义</li></ul><p><strong>排序查询</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</span><br></pre></td></tr></table></figure><p>排序方式</p><ul><li>ASC：升序(默认值)</li><li>DESC：降序</li></ul><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><p><strong>分页查询</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数;</span><br></pre></td></tr></table></figure><p>注意</p><ul><li>起始索引从0开始，起始索引 &#x3D; (查询页码 - 1) *每页记录数</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10</li></ul><p><strong>执行顺序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">    分页参数</span><br></pre></td></tr></table></figure><h4 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h4><p>DCL全称是Data Control Language(数据库控制语言)，用来管理数据库用户、控制数据库的访问权限</p><p><strong>管理用户</strong></p><ul><li>查询用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">SELECT * FROM USER;</span><br></pre></td></tr></table></figure><ul><li>创建用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><ul><li>修改用户密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure><ul><li>删除用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p>注意</p><ul><li>主机名可以使用%适配</li><li>这类SQL开发人员操作的比较少，主要是DBA(Data Administrator 数据库管理员)使用</li></ul><p><strong>权限控制</strong></p><p>MySQL中定义了很多权限，但是常见的就以下几种：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL，ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><ul><li>查询权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机&#x27;;</span><br></pre></td></tr></table></figure><ul><li>授予权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANTS 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机&#x27;;</span><br></pre></td></tr></table></figure><ul><li>撤销权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机&#x27;;</span><br></pre></td></tr></table></figure><p>注意</p><ul><li>多个权限之间，使用逗号分隔</li><li>授权时，数据库名和表名可以使用*进行通配，代表所有</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数 是指一段能够可以直接被另一段程序调用的程序或者代码</p><p><strong>字符串函数</strong></p><p>MySQL中内置了很多字符串函数，常用的几个如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,…Sn)</td><td>字符串拼接，将S1、S2、…Sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串str全部转化为小写字母</td></tr><tr><td>UPPER(str)</td><td>将字符串str全部转化为大写字母</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(sre,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回从字符串start位置起的len个长度的字符串(索引从1开始)</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 函数(参数);</span><br></pre></td></tr></table></figure><p><strong>数值函数</strong></p><p>常见的数值函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1之内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><p><strong>日期函数</strong></p><p>常见的日期函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date，INTERVAL expr type)</td><td>返回上一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1，date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p><strong>流程函数</strong></p><p>流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value,t,f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1,value2)</td><td>如果value不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [val1] THEN [res1] … ELSE [default] END</td><td>如果val1为true，返回res1，…否则返回default默认值</td></tr><tr><td>CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END</td><td>如果expr的值等于val1，返回res1，…否则返回default默认值</td></tr></tbody></table><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p><p>目的：保证数据库中数据的正确，有效性和完整性</p><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一的，不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束(8.0.16版本之后)</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束，主键自增(auto -increment)</p><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>语法</p><ul><li>添加外键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名  数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [CONSTRAINT] [外键名称] FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br></pre></td></tr></table></figure><ul><li>删除外键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span><br></pre></td></tr></table></figure><ul><li>删除&#x2F;更新行为</li></ul><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新</td></tr><tr><td>RESTRICT</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新</td></tr><tr><td>CASCADE</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有，则设置子表中该外键值为null(这就要求该外键允许取null)</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键列设置成一个默认的值(Innodb不支持)</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE CASCADE ON DELETE CASCADE;</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三类：一对多(多对一)、多对多、一对一</p><h4 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h4><ul><li>一对多(多对一)</li></ul><p>案例：部门与员工之间的关系</p><p>关系：一个部门对应多个员工，多个员工对应一个部门</p><p>实现：在多的一方建立外键，指向一的一方建立主键</p><ul><li>多对多</li></ul><p>案例：学生与课程之间的关系</p><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p><p>实现：建立第三张中间表，中间至少包含两个外键，分别关联两方主键</p><ul><li>一对一</li></ul><p>案例：用户与用户详情的关系</p><p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</p><p>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p><p>多表查询分类</p><ul><li>连接查询<ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：<ul><li>左外连接：查询<strong>左表</strong>所有数据，以及两张表交集部分数据</li><li>右外连接：查询<strong>右表</strong>所有数据，以及两张表交集部分数据</li></ul></li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li><li>子查询</li></ul><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><p><strong>内连接</strong></p><p>查询语法</p><ul><li>隐式内连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1，表2 WHERE 条件 ...;</span><br></pre></td></tr></table></figure><ul><li>显式内连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件 ...;</span><br></pre></td></tr></table></figure><p>内连接查询的是两张表<strong>交集</strong>的部分</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240303115658392.png" alt="image-20240303115658392"></p><p><strong>外连接</strong></p><p>查询语法</p><ul><li>左外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件 ...;</span><br></pre></td></tr></table></figure><p>相当于查询表1(左表)的所有数据 包含表1和表2交集部分的数据</p><ul><li>右外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件 ...;</span><br></pre></td></tr></table></figure><p>相当于查询表2(右表)的所有数据 包含表1和表2交集部分的数据</p><p><strong>自连接</strong></p><p>查询语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</span><br></pre></td></tr></table></figure><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>注意：在自连接查询时，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，到底是哪一张表的字段</p><p><strong>联合查询-union，union all</strong></p><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...;</span><br></pre></td></tr></table></figure><p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p><p>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>概念：SQL语句中嵌套SELECT语句，称为<strong>嵌套查询</strong>，又称<strong>子查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t1 where column1 = (SELECT column1 FROM t2);</span><br></pre></td></tr></table></figure><p>子查询外部的语句可以是INSERT &#x2F; UPDATE &#x2F; DELETE SELECT 的任何一个</p><p>根据子查询结果不同，分为以下四类：</p><ul><li>标量子查询(子查询的结果为单个值)</li><li>列子查询(查询结果为一列)</li><li>行子查询(查询结果为一行)</li><li>表子查询(子查询结果为多行多列)</li></ul><p>根据子查询位置：分为：WHERE之后、FROM之前、SELECT之后</p><p><strong>标量子查询</strong></p><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式</p><p>常用的操作符：&#x3D;  &lt;&gt; &gt;&#x3D; &gt;  &lt;&#x3D;  &lt;</p><p><strong>列子查询</strong></p><p>子查询返回的结果是一列(可以是多行)</p><p>常用的操作符：IN、NOT IN、ANY、SOME、ALL</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个条件满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p><strong>行子查询</strong></p><p>子查询返回的结果是一行(可以是多列)</p><p>常用</p><p>的操作符：&#x3D;、&lt;&gt;、IN、NOT IN</p><p><strong>表子查询</strong></p><p>子查询返回的结果是多行多列</p><p>常用的操作符：IN</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功、要么同时失败</p><p>默认MySQL的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务</p><h4 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h4><p>方式一</p><ul><li>查看 &#x2F; 设置事务提交方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@autocommit;</span><br><span class="line">SET @@autocommit = 0;//关闭自动提交</span><br></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><ul><li>回滚事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><p>方式二</p><ul><li>开始事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION 或 BEGIN;//开始事务</span><br></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><ul><li>回滚事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><h4 id="事务四大特性-ACID"><a href="#事务四大特性-ACID" class="headerlink" title="事务四大特性(ACID)"></a>事务四大特性(ACID)</h4><p>原子性(Atomicty)：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</p><p>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</p><p>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响下的独立环境下运行</p><p>持久性(Durability)：事务一旦提交或者回滚，它对数据库中的数据的改变就是永久的</p><h4 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h4><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td><strong>脏读</strong></td><td>一个事务读到另一个事务还没有提交的数据</td></tr><tr><td><strong>不可重复读</strong></td><td>一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读</td></tr><tr><td><strong>幻读</strong></td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了”幻影”</td></tr></tbody></table><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><strong>Read uncommitted</strong></td><td>√</td><td>√</td><td>√</td></tr><tr><td><strong>Read committed</strong></td><td>×</td><td>√</td><td>√</td></tr><tr><td><strong>Repeatable Read(默认)</strong></td><td>×</td><td>×</td><td>√</td></tr><tr><td><strong>Serializable</strong></td><td>×</td><td>×</td><td>×</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查看事务隔离级别</span><br><span class="line">SELECT @@TRANSACTION_ISOLATION;</span><br><span class="line"></span><br><span class="line">-- 设置事务隔离级别</span><br><span class="line">SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | RED COMMITTED | REPEATABLE READ | SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure><p>注意：事务的隔离级别越高，数据越安全，但是性能越低</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><h4 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h4><ul><li><strong>连接层</strong></li></ul><p>最上层是一些客户端和链接服务，主要完成一些类似于连接处理、授权认证、及相关的安全方案。服务器也会为安全接入的每个客户端验证它所具有的操作权限</p><ul><li><strong>服务层</strong></li></ul><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析与优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等</p><ul><li><strong>引擎层</strong></li></ul><p>存储引擎真正地负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选择合适的引擎</p><ul><li><strong>存储层</strong></li></ul><p>主要是将数据存储在文件系统之上，并完成与存储引擎的交互</p><h4 id="存储引擎-1"><a href="#存储引擎-1" class="headerlink" title="存储引擎"></a>存储引擎</h4><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型</p><ul><li>在创建表时，指定存储引擎</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">    ...</span><br><span class="line">    字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">) ENGINE = INNODB [COMMENT 表注释];</span><br></pre></td></tr></table></figure><ul><li>查看当前数据库支持的存储引擎</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure><p><strong>InnoDB</strong></p><p>InnoDB是一种兼顾可靠性和高性能的通用存储引擎，在MySQL5.5之后，InnoDB是默认的MySQL存储引擎</p><p>特点</p><ul><li>DML操作支持ACID模型，支持事务；</li><li>行级锁，提高并发访问性能；</li><li>支持外键FOREIGN KEY 约束，保证数据的完整性和正确性</li></ul><p>文件</p><ul><li>xxx.ibd：xxx代表的是表名，InnoDB引擎的每一张表都会对应这样的一个表空间文件，存储该表的表结构(frm、sdi)、数据和索引</li><li>参数：innodb_file_per_table</li></ul><p>存储结构</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240305190759951.png" alt="image-20240305190759951"></p><p><strong>MyISAM</strong></p><p>MyISAM是MySQL早期的默认存储引擎</p><p>特点</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件</p><ul><li>xxx.sdi：存储表结构信息</li><li>xxx.MYD：存储数据</li><li>xxx.MYI：存储索引</li></ul><p><strong>Memory</strong></p><p>Memory引擎的表数据是存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用</p><p>特点</p><ul><li>内存存放</li><li>hash索引(默认)</li></ul><p>文件</p><ul><li>xxx.sdi：存储表结构信息</li></ul><p><strong>区别</strong></p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td><strong>支持</strong></td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td><strong>行锁</strong></td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持(5.6版本之后)</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td><strong>支持</strong></td><td>-</td><td>-</td></tr></tbody></table><p><strong>存储引擎选择</strong></p><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎，对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合</p><ul><li>InnoDB：是MySQL的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件上要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较适合的xuanz</li><li>MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求并不是很高，那么选择这个存储引擎是非常合适的</li><li>MEMORY：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>索引(inedx)是帮助MySQL<strong>高效获取数据</strong>的**数据结构(有序)**。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据，这样就可以在这些数据结构上实现查找算法，这种数据结构就是索引。</p><ul><li>优缺点</li></ul><table><thead><tr><th>优势</th><th>缺点</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库的IO成本</td><td>索引列也是要占用内存空间的</td></tr><tr><td>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</td><td>索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE时，效率很低</td></tr></tbody></table><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包含以下内容：</p><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td><strong>B+ Tree索引</strong></td><td><strong>最常见的索引类型，大部分引擎都支持B+ 树索引</strong></td></tr><tr><td>Hash 索引</td><td>底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R- tree (空间索引)</td><td>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-text (全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式。类似于Lucence,Solr，ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>MEMORY</th></tr></thead><tbody><tr><td>B+ tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R- tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text索引</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>B-tree(多路平衡查找树)</strong></p><p>以一颗最大度数为5(5阶)的b-tree为例(每个节点最多存储4个key，5个指针)：</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240306203048434.png" alt="image-20240306203048434"></p><p><strong>B+Tree</strong></p><p>以一颗最大度数为4的b+tree为例：</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240306203715175.png" alt="image-20240306203715175"></p><p>相比较B-Tree的区别：</p><ul><li>所有的数据都会出现在要叶子结点</li><li>叶子结点形成一个单向链表</li></ul><p>MySQL的索引数据结构对经典的B+Tree进行了优化，在原B+Tree的基础上，增加了一个指向相邻叶子结点的链表指针，就形成了带有顺序指针的B+Tree，提高了区间访问的性能，利于排序</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240306204334741.png" alt="image-20240306204334741"></p><p><strong>Hash</strong></p><p>哈希索引就是采用一定的哈希算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中</p><p>如果两个或多个键值，映射到一个相同的槽位上时，他们就产生了hash冲突(也称为hash碰撞)，可以通过链表来解决</p><p>索引特点</p><ul><li>hash索引只能用于对等比较(&#x3D;，in)，不支持范围查询(between，&gt;，&lt;，…)</li><li>无法利于索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于B+Tree索引</li></ul><p>在MySQL中，支持hash索引的是Memory引擎，而InnoDB中具有自适应hash功能，hash索引是存储引擎根据B+Tree索引在指定条件下自动构建的</p><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储和索引放到了一块，索引结构的叶子结点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据和索引分开存储，索引结构的叶子结点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引</li></ul><h4 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h4><ul><li>创建索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE | FULLTEXT] INDEX index_name on table_name (index_col,name,...);</span><br></pre></td></tr></table></figure><ul><li>查看索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM table_name;</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name ON table_name;</span><br></pre></td></tr></table></figure><h4 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h4><ul><li>SQL执行频率</li></ul><p>MySQL客户端连接成功后，通过show[session|global] status命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、SELECT的访问频次；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GLOBAL STATUS LIKE &#x27;COM_____&#x27;;  -- 一个下划线代表一个字符</span><br></pre></td></tr></table></figure><ul><li><strong>慢查询日志</strong></li></ul><p>慢查询日志记录了所有执行时间超过指定参数(long_query_time，单位：秒，默认10秒)的所有SQL语句的日志</p><p>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件(&#x2F;etc&#x2F;my.cnf)中配置如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 开启MySQL慢日志查询开关</span><br><span class="line">slow_query_log = 1</span><br><span class="line"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span><br><span class="line">long_query_time = 2</span><br></pre></td></tr></table></figure><p>配置完毕后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><ul><li><strong>profile详情</strong></li></ul><p>show profiles能够在做SQL优化时帮助我们了解时间都耗费到哪里去了，通过have_profiling参数，能够看到当前MySQL是否支持profile操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@have_profiling;</span><br></pre></td></tr></table></figure><p>默认profiling是关闭的，可以通过set语句在session &#x2F; global级别开启profiling：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@profiling; -- 查询是否开始</span><br><span class="line">SET profiling = 1;</span><br></pre></td></tr></table></figure><p>执行一系列的业务SQL操作，然后通过以下指令查看指令的执行耗时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看每一条SQL的耗时基本情况</span><br><span class="line">show profiles;</span><br><span class="line"># 查看指定query_id的SQL语句各个阶段的耗时情况</span><br><span class="line">show profile for query query_id;</span><br><span class="line"># 查看指定query_id的SQL语句CPU的使用情况</span><br><span class="line">show profile cpu for query query_id;</span><br></pre></td></tr></table></figure><ul><li><strong>explain执行计划</strong></li></ul><p>EXPLAIN或者DESC命令获取MySQL如何执行SELECT语句的信息，包括在SELECT语句执行过程中表如何连接和连接的顺序</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 直接在select语句前加上关键字explain / desc</span><br><span class="line">EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件;</span><br></pre></td></tr></table></figure><p>EXPLAIN执行计划各字段含义：</p><ul><li>id</li></ul><p>select查询的序列号，表示查询中执行select子句或者是操作表的顺序(id相同，执行顺序从上到下；id不同，值越大，越先执行)</p><ul><li>select_type</li></ul><p>表示SELECT的类型，常见的取值有SIMPLE(简单表，即不能使用表连接或者子查询)、PRIMARY(主查询，即外层的查询)、UNION(UNION中的第二个或者后面的查询语句)、SUBQUERY(SELECT&#x2F;WHERE之后包含了子查询等)</p><ul><li><strong>type</strong></li></ul><p>表示连接类型，性能由好到差的连接类型为NULL、system、const、eq_ref、ref、range、index、all</p><ul><li>possible_key</li></ul><p>显示可能应用在这张表上的索引，一个或者多个</p><ul><li>key</li></ul><p>实际使用的索引，如果为NULL，则没有使用索引</p><ul><li>key_len</li></ul><p>表示索引中使用的字节数，该值为索引字段的最大可能长度，并非实际长度，在不损失精确性的前提下，长度越短越好</p><ul><li>rows</li></ul><p>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并总是准确的</p><ul><li>filtered</li></ul><p>表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</p><h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><ul><li>验证索引效率</li></ul><p>在未建立索引之前，执行如下SQL语句，查看SQL的耗时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tb_sku WHERE sn = &#x27;1000000000314001&#x27;;</span><br></pre></td></tr></table></figure><p>针对字段创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_sku_sn on tb_sku(sn);</span><br></pre></td></tr></table></figure><p>然后再次执行相同的SQL语句，再次查看SQL的耗时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tb_sku WHERE sn = &#x27;1000000000314001&#x27;;</span><br></pre></td></tr></table></figure><p><strong>最左前缀法则</strong></p><p>如果索引了多列(联合索引)，要遵循最左前缀法则。最左前缀法则指的是查询从索引的<mark>最左列开始</mark>，并且不跳过索引中的列。如果跳跃了某一列，<mark>索引将部分失效(后面的字段索引失效)</mark></p><p><strong>索引失效情况</strong></p><ul><li>索引列运算</li></ul><p>不要在索引列上进行运算操作，索引将失效</p><ul><li>模糊查询</li></ul><p>如果仅仅是尾部模糊查询，索引将不会失效；如果是头部模糊查询，索引将会失效</p><ul><li>or连接的条件</li></ul><p>用or分割开的条件，如果or前的条件中的列有索引，而后面的列没有索引，那么涉及的索引都不会被使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where id = 10 or age = 20;</span><br><span class="line">explain select * from tb_user where phone = &#x27;17799990017&#x27; or age = 23;</span><br></pre></td></tr></table></figure><p>由于age没有索引，所以即使id、phone有索引，索引也会失效。所以需要针对age也要建立索引</p><ul><li>数据分布影响</li></ul><p>如果MySQL评估使用索引比全表更慢，则不会使用索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_user where phone&gt;=&#x27;17799990005&#x27;;</span><br><span class="line">select * from tb_user where phone&gt;=&#x27;17799990015&#x27;;</span><br></pre></td></tr></table></figure><p><strong>SQL提示</strong></p><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的</p><p><code>use index</code>(建议使用该索引)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user use index(idx_user_pro) where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p><code>ignore index</code>(忽略使用此索引)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user ignore index(idx_user_pro) where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p><code>force index</code>(强制使用该索引)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user force index(idx_user_pro) where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p><strong>覆盖索引</strong></p><p>尽量使用覆盖索引(查询使用了索引，并且需要返回的列，在该索引中已经能够全部找到)，减少select *；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select id,profession from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select id,profession,age from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select id,profession,age,status from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select id,profession,age,status,name from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br></pre></td></tr></table></figure><p><code>using index condition</code>：查找使用了索引，但是需要回表查询数据</p><p><code>using where;using index</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</p><p><strong>前缀索引</strong></p><p>当字段类型为字符串(varchar、text等)时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率</p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_xxx on table_name(column(n));//n代表字符串的前n个字符</span><br></pre></td></tr></table></figure><p>前缀长度</p><p>可以根据索引的选择性来决定，而选择性是指不重复的索引值(基数)和数据表的记录总数比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email)/ count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email,1,5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure><p><strong>单列索引与联合索引</strong></p><p>单列索引：即一个索引只包含单个列</p><p>联合索引：即一个索引包含了多个列</p><p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建立联合索引，而非单列索引</p><p>单列索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select id,phone,name from tb_user where phone = &#x27;17799990010&#x27; and name = &#x27;韩信&#x27;;</span><br></pre></td></tr></table></figure><p><mark>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</mark></p><p>联合索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index idx_phone_name on tb_user(phone,name);</span><br></pre></td></tr></table></figure><p><strong>索引设计原则</strong></p><ul><li>针对于数据量比较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件(where)、排序(order by)、分组(group by)操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段的长度较长，可以针对字符串的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它，当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引更有效地用于查询</li></ul><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p><strong>insert优化</strong></p><ul><li>批量插入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into tb_test values(1,&#x27;Tom&#x27;),(2,&#x27;Cat&#x27;),(3,&#x27;Jerry&#x27;);</span><br></pre></td></tr></table></figure><ul><li>手动事务提交</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into tb_test values(1,&#x27;Tom&#x27;),(2,&#x27;Cat&#x27;),(3,&#x27;Jerry&#x27;);</span><br><span class="line">insert into tb_test values(4,&#x27;Tom&#x27;),(5,&#x27;Cat&#x27;),(6,&#x27;Jerry&#x27;);</span><br><span class="line">insert into tb_test values(7,&#x27;Tom&#x27;),(8,&#x27;Cat&#x27;),(9,&#x27;Jerry&#x27;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><ul><li>主键插入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 主键乱序插入：8 1 9 21 80 2 4 15 89 5 7 3</span><br><span class="line">-- 主键顺序插入：1 2 3 4 5 6 7 8 9 15 21 88 89</span><br></pre></td></tr></table></figure><p><strong>大量批量插入数据</strong></p><p>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令进行插入操作如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务器时，还需要加上参数 --local-infile</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开始从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table `tb_user` fileds terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><p><mark>主键顺序插入性能高于乱序插入</mark></p><h4 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h4><ul><li>数据组织方式</li></ul><p>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为<mark>索引组织表</mark>(index organized table <strong>IOT</strong>)</p><ul><li>页分裂</li></ul><p>页可以为空，也可以填充一半，也可以填充100%。每个页包含了2-N行数据(如果一行数据过大，就会行溢出)，根据主键排列如果主键是乱序插入，会扰乱原来已排序好的页，MySQL 会通过新建页并调整原来已经存放在页中的数据来达到维护主键有序的效果，这便是<strong>页分裂</strong>。</p><ul><li>页合并</li></ul><p>当删除某一行记录时，实际上记录并没有被物理删除，只是记录被被标记(flaged)为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录达到MERGE_THRESHOLD(默认为页的50%)，InnoDB会开始寻找最靠近的页(前或后)看看是否可以将两个页合并以优化空间使用,此之谓<strong>页合并</strong>。</p><p><code>MERGE_THRESHOLD</code>：合并页的阈值，可以自己设置，在创建表或者索引的时候指定</p><p><strong>主键设计原则</strong></p><ol><li><p>满足业务需求条件下，尽量降低主键长度</p></li><li><p>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键</p></li><li><p>尽量不要使用UUID做主键或者其他自然主键，如身份证号</p></li><li><p>业务操作时，避免对主键的修改</p></li></ol><h4 id="order-by-优化"><a href="#order-by-优化" class="headerlink" title="order by 优化"></a>order by 优化</h4><ol><li><code>Using filesort</code>：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都是FileSort排序</li><li><code>Using index</code>：通过有序索引顺序扫描直接返回有序结果，这种情况即为Using index，不需要额外排序，操作效率高</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 没有创建索引时，根据age,phone进行排序</span><br><span class="line">explain select id,age,phone from tb_user order by age, phone;</span><br><span class="line"># 创建索引</span><br><span class="line">create index idx_user_age_phone_aa on tb_user(age,phone);</span><br><span class="line"># 创建索引成功后，根据age、phone进行升序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age, phone;</span><br><span class="line"># 创建索引成功后，根据age、phone进行降序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age desc, phone desc;</span><br><span class="line"># 根据age升序、phone降序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age asc, phone desc;</span><br><span class="line"># 创建索引</span><br><span class="line">create index idx_age_phone_ad on tb_user(age asc,phone desc);</span><br><span class="line"># 创建索引后，根据age、phone进行升序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age, phone;</span><br><span class="line"># 创建索引成功后，根据age、phone进行降序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age desc, phone desc;</span><br><span class="line"># 根据age升序、phone降序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age asc, phone desc;</span><br></pre></td></tr></table></figure><ol start="3"><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则(ASC&#x2F;DESC)</li><li>如果不可避免地出现了filesort，大数据量排序时，可以适当增大排序缓冲区sort_buffer_size(默认256k)</li></ol><h4 id="group-by-优化"><a href="#group-by-优化" class="headerlink" title="group by 优化"></a>group by 优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 删除当前的联合索引</span><br><span class="line">drop index idx_user_pro_age_sta on tb_user;</span><br><span class="line"># 执行分组操作，根据profession字段分组</span><br><span class="line">explain select profession,count(*) from tb_user group by profession;</span><br><span class="line">#创建索引</span><br><span class="line">create index idx_user_pro_age_sta on tb_user(profession,age,status);</span><br><span class="line"># 执行分组操作，根据profession字段分组</span><br><span class="line">explain select profession,count(*) from tb_user group by profession;</span><br><span class="line"># 执行分组操作，根据profession字段分组</span><br><span class="line">explain select profession,count(*) from tb_user group by profession,age;</span><br></pre></td></tr></table></figure><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><h4 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h4><p>limit 在大数据量的分页时越往后所需时间越长，因为 limit 底层默认走的是全表扫描。官方给出的优化方案是通过覆盖索引和子查询的方式提高 limit 的分页效率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 先拿到id</span><br><span class="line">select id from te_user order by id limit 10, 10;</span><br><span class="line"></span><br><span class="line"># 再查询id对应的行数据，mysql不支持in后跟limit，所以这里使用多表查询</span><br><span class="line">select</span><br><span class="line">    t.*</span><br><span class="line">from</span><br><span class="line">    te_user t,</span><br><span class="line">    (</span><br><span class="line">        select id from te_user order by  id limit 10, 10</span><br><span class="line">    ) tmp</span><br><span class="line">where</span><br><span class="line">    t.id = tmp.id</span><br></pre></td></tr></table></figure><p>上述方案使用了多表查询对 limit 语句进行优化。实际上，如果 limit 语句使用了 where 子句，可以在 where 子句所涉及到的字段添加索引，可以有效提高查询效率。</p><h4 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select count(*) from tb_user;</span><br></pre></td></tr></table></figure><ul><li>MySIAM引擎把一个表的总行数放到了磁盘上，因此执行count(*)的时候会直接返回这个数，效率很高（但是前提是没有 where 条件，即查询的是总数）</li><li>InnoDB引擎在执行count(*)时，需要把数据一行一行地从引擎中读取出来，然后累积计数</li></ul><p><strong>优化思路：自己计数(可以借助于redis这样的数 据库进行,但是如果是带条件的count又比较麻烦了)。</strong></p><p>count()是一个聚合函数，对于返回的结果集，一行行地判断，如果count函数的参数不是NULL，累计值就加1，否则不加，最后返回累计值</p><p><strong>count的几种用法</strong></p><table><thead><tr><th>count用法</th><th>说明</th></tr></thead><tbody><tr><td>count(*)</td><td>InnoDB引擎并不会把全部字段取出来，而是做了专门的优化，不取值，服务层直接按行进行累加</td></tr><tr><td>count(主键)</td><td>InnoDB引擎会遍历整张表，把每一行的主键id值都取出来，返回给服务层。服务层拿到主键后，直接按行进行累加(主键不可能为NULL)</td></tr><tr><td>count(字段)</td><td><strong>没有not null约束</strong>：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层后，服务层判断是否为null，不为null，计数累加；<strong>有not null约束</strong>：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行累加</td></tr><tr><td>count(1)</td><td>InnoDB会遍历整张表，但不取值。服务层对于返回的每一层，放一个数字”1“进去，直接按行累加</td></tr></tbody></table><p><mark>根据效率排序，count(字段) &lt; count(主键id) &lt; count(1) ≈ count(*)</mark></p><h4 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update student set no = &#x27;2000100100&#x27; where id = 1; -- 有inidex</span><br><span class="line"></span><br><span class="line">upfate student set no = &#x27;2000100105&#x27; where name &#x27;张三&#x27;; -- 无index</span><br></pre></td></tr></table></figure><p><mark>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁</mark></p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图(view)是一种虚拟存在的表，视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的，通俗地讲，视图只保存了查询的SQL逻辑，不保存查询结果，所以我们在创建视图的时候，主要的任务就是创建这条SQL查询语句</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [or replace] view 视图名称[(列名列表)] as select语句 [with[cascaded | local]check option]</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查看创建视图语句</span><br><span class="line">show create view 视图名称;</span><br><span class="line">-- 查看视图数据</span><br><span class="line">select * from 视图名称;</span><br></pre></td></tr></table></figure><ul><li>修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 方式一：</span><br><span class="line">create [or replace] view 视图名称[(列名列表)] as select语句 [with[cascaded | local] check option]</span><br><span class="line">-- 方式二：</span><br><span class="line">alter view 视图名称[(列名列表)] as select语句 [with[cascaded | local] check option]</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view [if exists] 视图名称 [,视图名称]...</span><br></pre></td></tr></table></figure><p>演示示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 创建视图</span><br><span class="line">create or replace view stu_v_1 as select id,name from student where id &lt;= 10;</span><br><span class="line">-- 查询视图</span><br><span class="line">show create view stu_v_1;</span><br><span class="line">select * from stu_v_1;</span><br><span class="line">select * from stu_v_1 where id &lt; 3;</span><br><span class="line">-- 修改视图</span><br><span class="line">create or replace view stu_v_1 as select id,name,no from student where id &lt;= 10;</span><br><span class="line">alter view stu_v_1 as select id,name from student where id &lt;= 10;</span><br><span class="line">-- 删除视图</span><br><span class="line">drop view if exists stu_v_1;</span><br></pre></td></tr></table></figure><h4 id="检查选项"><a href="#检查选项" class="headerlink" title="检查选项"></a>检查选项</h4><p>当使用WITH CHECK OPTION子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如 插 入，更新，删除，以使其符合视图的定义。 MySQL允许基于另一个视图创建视图，它还会检查依赖视 图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项： CASCADED 和 LOCAL ，默认值为 CASCADED 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create or replace view stu_v_1 as select id,name from student where id &lt;= 20 with cascaded check option; -- 检查选项</span><br></pre></td></tr></table></figure><p><strong>CASCADED(级联)</strong></p><p>比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 cascaded，但是v1视图 创建时未指定检查选项。 则在执行检查时，不仅会检查v2，还会级联检查v2的关联视图v1。</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240310174245373.png" alt="image-20240310174245373"></p><p><strong>LOCAL(本地)</strong></p><p>比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 local ，但是v1视图创 建时未指定检查选项。 则在执行检查时，知会检查v2，不会检查v2的关联视图v1</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240310174639914.png" alt="image-20240310174639914"></p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>要使视图更新，视图中的行与基础表中的行之间必须存在<mark>一对一的关系</mark>，如果视图中包含以下任何一项，则视图不可更新：</p><ul><li>聚合函数或窗口函数(SUM()、MIN()、MAX()、COUNT()等)</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION 或 UNION ALL</li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>简单</li></ul><p>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件</p><ul><li>安全</li></ul><p>数据库可以授权，但不能授权到数据库中特定行和特定的列上，通过视图用户只能查询和修改他们所能见到的数据</p><ul><li>数据独立</li></ul><p>视图可以帮助用户屏蔽真实表结构变化带来的影响</p><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p><strong>存储过程</strong>是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。 </p><p>存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用</p><p>特点：</p><ul><li>封装、复用</li><li>可以接收参数，也可以返回数据</li><li>减少网络交互，效率提升</li></ul><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名称([参数列表])</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">--SQL语句</span><br><span class="line"></span><br><span class="line">end;    </span><br></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 名称 ([参数]);</span><br></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = &#x27;xxx&#x27;; -- 查询指定数据库的存储过程及状态信息</span><br><span class="line">SHOW CREATE PROCEDURE 存储过程名称; -- 查询某个存储过程的定义</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE [IF EXISTS] 存储过程名称;</span><br></pre></td></tr></table></figure><p>注意：在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定的SQL语句的结束符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$ -- 表示SQL语句将以$$符号表示结束符</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p><strong>系统变量</strong>是MySQL服务器提供的，不是用户定义的，属于服务层面。分为全局变量(GLOBAL)、会话变量(SESSION)</p><ul><li>查看系统变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show [session | global] variables;  -- 查看所有系统变量</span><br><span class="line">show [session | global] variables like &#x27;......&#x27;;  -- 可以通过like模糊匹配方式查找变量</span><br><span class="line">select @@[session | global] 系统变量名; -- 查看指定变量的值</span><br></pre></td></tr></table></figure><ul><li>设置系统变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set [session | global] 系统变量名 = 值;</span><br><span class="line">set @@[session | global] 系统变量名 = 值;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果没有指定SESSION &#x2F; GLOBAL ，默认是SESSION，会话变量</li><li>mysql服务重新启动后，所设置的全局参数会失效，要想不失效，可以在&#x2F;etc&#x2F;my.cnf中配置</li></ul><p><strong>用户自定义变量</strong> 是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用<mark>@变量名</mark>使用就可以，其作用域为当前连接</p><ul><li>赋值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set @var_name = expr[,@var_name = expr]...;</span><br><span class="line">set @var_name := expr[,@var_name := expr]...;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select @var_name := expr[,@var_name := expr]...;</span><br><span class="line">select 字段名 into @var_name from 表名;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @var_name;</span><br></pre></td></tr></table></figure><p>注意：用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL</p><p><strong>局部变量</strong> 是根据需要定义的在局部生效的变量，访问之前，需要DECLARE声明，可用于存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的BEGIN…END块</p><ul><li>声明</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare 变量名 变量类型[default...];</span><br></pre></td></tr></table></figure><p>变量的类型就是数据库字段类型：INT、BIGINT、CHAR、VARCHAR、DATE、TIME等</p><ul><li>赋值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set 变量名 = 值;</span><br><span class="line">set 变量名 := 值;</span><br><span class="line">select 字段名 into 变量名 from 表名 ...;</span><br></pre></td></tr></table></figure><h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h4><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF 条件1 THEN </span><br><span class="line">...</span><br><span class="line">ELSE IF 条件2 THEN-- 可选</span><br><span class="line">...</span><br><span class="line">ELSE -- 可选</span><br><span class="line">...</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>类型</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>IN</td><td>该类参数作为输入，也就是需要调用时传入值</td><td>默认</td></tr><tr><td>OUT</td><td>该类参数作为输出，也就是该参数可以作为返回值</td><td></td></tr><tr><td>INOUT</td><td>既可以作为输入参数，也可以作为输出参数</td><td></td></tr></tbody></table><p>用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名称 ([IN / OUT / INOUT 参数名 参数类型])</span><br><span class="line">begin</span><br><span class="line">--SQL语句</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><ul><li>语法一</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case case_value</span><br><span class="line">where when_value1 then statement_list1</span><br><span class="line">[when when_value2] then statement_list2...</span><br><span class="line">[else statement_list]</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure><ul><li>语法二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case</span><br><span class="line">when search_condition1 then statement_list1</span><br><span class="line">[when search_condition2 then statement_list2]...</span><br><span class="line">[else statement_list]</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p><strong>while</strong></p><p>while循环是有条件的循环控制语句，满足条件后，再执行循环体中的SQL语句，具体语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑‘</span><br><span class="line">while 条件 do</span><br><span class="line">SQL逻辑...</span><br><span class="line">end while;</span><br></pre></td></tr></table></figure><p><strong>repeat</strong></p><p>repeat是有条件的循环控制语句，当满足条件时退出循环，具体语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 先执行一次循环，任何判断逻辑是否满足，如果满足，则退出，如果不满足，则继续下一次循环</span><br><span class="line">repeat</span><br><span class="line">SQL逻辑...</span><br><span class="line">until 条件</span><br><span class="line">end repeat;</span><br></pre></td></tr></table></figure><p><strong>loop</strong></p><p>LOOP实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用来实现简单的死循环，LOOP可以配合以下两个语句使用：</p><ul><li>LEAVE：配合循环使用，退出循环</li><li>ITERATE：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] loop</span><br><span class="line">SQL逻辑...</span><br><span class="line">end loop [end_label];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">leave label; -- 退出指定标记的循环体</span><br><span class="line">iterate label;  -- 直接进入下一次循环</span><br></pre></td></tr></table></figure><h4 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h4><p><strong>游标（CURSOR）</strong>是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下：</p><ul><li>声明游标</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare 游标名称 cursor for 查询语句;</span><br></pre></td></tr></table></figure><ul><li>打开游标</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open 游标名称;</span><br></pre></td></tr></table></figure><ul><li>获取游标记录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch 游标名称 into 变量[, 变量];</span><br></pre></td></tr></table></figure><ul><li>关闭游标</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close 游标名称;</span><br></pre></td></tr></table></figure><p><strong>条件处理程序(Handler)：</strong>可以用来定义在流程控制结构执行过程中遇到的问题时相应的处理步骤，具体语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DECLARE handler_action HANDLER FOR condition_value [, condition_value]... statement ;</span><br><span class="line"></span><br><span class="line">handler_action的取值：</span><br><span class="line">CONTINUE: 继续执行当前程序</span><br><span class="line">EXIT: 终止执行当前程序</span><br><span class="line">condition_value的取值：</span><br><span class="line">SQLSTATE sqlstate_value: 状态码，如 02000</span><br><span class="line">SQLWARNING: 所有以01开头的SQLSTATE代码的简写</span><br><span class="line">NOT FOUND: 所有以02开头的SQLSTATE代码的简写</span><br><span class="line">SQLEXCEPTION: 所有没有被SQLWARNING 或 NOT FOUND捕获的SQLSTATE代码的简写</span><br></pre></td></tr></table></figure><h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><p>存储函数是有返回值的存储过程，存储函数的参数只能是IN类型的，具体语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION 存储函数名称 ([ 参数列表 ])</span><br><span class="line">RETURNS type [characteristic ...]</span><br><span class="line">BEGIN</span><br><span class="line">-- SQL语句</span><br><span class="line">RETURN ...;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">characteristic说明：</span><br><span class="line">DETERMINISTIC：相同的输入参数总是产生相同的结果</span><br><span class="line">NO SQL：不包含SQL语句</span><br><span class="line">READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 存储函数</span><br><span class="line">-- 计算1累加到n的值</span><br><span class="line">create function fun1(n int)</span><br><span class="line">returns int deterministic</span><br><span class="line">begin</span><br><span class="line">    declare sum int default 0;</span><br><span class="line">    while n&gt;0 do</span><br><span class="line">        set sum := sum + n;</span><br><span class="line">        set n := n - 1;</span><br><span class="line">    end while;</span><br><span class="line">    return sum;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">select fun1(100);</span><br></pre></td></tr></table></figure><p>在mysql8.0版本中binlog默认是开启的，一旦开启了，mysql就要求在定义存储过程时，需要指定 characteristic特性，否则就会报如下错误：</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240311233650982.png" alt="image-20240311233650982"></p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器是与表有关的数据库对象，指在insert &#x2F; update &#x2F; delete之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录、数据校验等操作</p><p>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是类似的，现在触发器还只支持行级触发，不支持语句级触发</p><table><thead><tr><th>触发器类型</th><th>NEW和OLD</th></tr></thead><tbody><tr><td>INSERT型触发器</td><td>NEW表示将要或者已经新增的数据</td></tr><tr><td>UPDATE型触发器</td><td>OLD表示修改之前的数据，NEW表示将要或者已经修改之后的数据</td></tr><tr><td>DELETE型触发器</td><td>OLD表示将要或者已经删除的数据</td></tr></tbody></table><p>语法</p><ul><li>创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create trigger trigger_name</span><br><span class="line">before / after insert / update / delete</span><br><span class="line">on tbl_name for each row  -- 行级触发器</span><br><span class="line">begin</span><br><span class="line">-- triger_stmt;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show triggers;</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop trigger [schema_name.] trigger_name; -- 如果没有指定schema_name，默认为当前数据库</span><br></pre></td></tr></table></figure><h4 id="insert触发器"><a href="#insert触发器" class="headerlink" title="insert触发器"></a>insert触发器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- insert触发器</span><br><span class="line">-- 通过触发器记录tb_user表的数据变更日志，将变更日志插入到日志表user_logs中，包含增加、删除、修改</span><br><span class="line">create table user_logs(</span><br><span class="line">    id int(11) not null auto_increment,</span><br><span class="line">    operation varchar(20) not null comment &#x27;操作类型，insert / update / delete&#x27;,</span><br><span class="line">    operate_time datetime not null comment &#x27;操作时间&#x27;,</span><br><span class="line">    operate_id int(11) not null comment &#x27;操作id&#x27;,</span><br><span class="line">    operate_params varchar(500) comment &#x27;操作参数&#x27;,</span><br><span class="line">    primary key (`id`)  -- 反引号</span><br><span class="line">) engine = innodb default charset = utf8;</span><br><span class="line"></span><br><span class="line">-- 插入数据触发器</span><br><span class="line">create trigger tb_user_insert_trigger</span><br><span class="line">    after insert on tb_user for each row</span><br><span class="line">begin</span><br><span class="line">    insert into user_logs(id,operation,operate_time,operate_id,operate_params) values</span><br><span class="line">    (null,&#x27;insert&#x27;,now(),new.id,concat(&#x27;插入的数据内容为：id = &#x27;,new.id,&#x27; name = &#x27;,new.name,&#x27; phone = &#x27;,new.phone,&#x27;  email = &#x27;,new.email,&#x27; profession = &#x27;,new.profession));</span><br><span class="line">end;</span><br><span class="line">show triggers ;</span><br><span class="line"></span><br><span class="line">-- 删除</span><br><span class="line">drop trigger tb_user_insert_trigger;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">insert into tb_user(id,name,phone,email,profession,age,gender,status,createtime) values</span><br><span class="line">(26,&#x27;张三&#x27;,&#x27;13978542354&#x27;,&#x27;zhangsan@163.com&#x27;,&#x27;软件工程&#x27;,19,&#x27;1&#x27;,&#x27;1&#x27;,now());</span><br></pre></td></tr></table></figure><h4 id="update触发器"><a href="#update触发器" class="headerlink" title="update触发器"></a>update触发器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 修改数据触发器</span><br><span class="line">create trigger tb_user_update_trigger</span><br><span class="line">    after update on tb_user for each row</span><br><span class="line">begin</span><br><span class="line">    insert into user_logs(id,operation,operate_time,operate_id,operate_params) values</span><br><span class="line">    (null,&#x27;update&#x27;,now(),new.id,</span><br><span class="line">     concat(&#x27;修改前的数据内容为：id = &#x27;,old.id,&#x27; name = &#x27;,old.name,&#x27; phone = &#x27;,old.phone,&#x27;  email = &#x27;,old.email,&#x27; profession = &#x27;,old.profession,</span><br><span class="line">            &#x27;修改后的数据内容为：id = &#x27;,new.id,&#x27; name = &#x27;,new.name,&#x27; phone = &#x27;,new.phone,&#x27;  email = &#x27;,new.email,&#x27; profession = &#x27;,new.profession));</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">show triggers ;</span><br><span class="line"></span><br><span class="line">update tb_user set age = 32 where id = 25;</span><br></pre></td></tr></table></figure><h4 id="delete触发器"><a href="#delete触发器" class="headerlink" title="delete触发器"></a>delete触发器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 删除数据触发器</span><br><span class="line">create trigger tb_user_delete_trigger</span><br><span class="line">    after delete on tb_user for each row</span><br><span class="line">begin</span><br><span class="line">    insert into user_logs(id,operation,operate_time,operate_id,operate_params) values</span><br><span class="line">    (null,&#x27;delete&#x27;,now(),old.id,concat(&#x27;删除的数据内容为：id = &#x27;,old.id,&#x27; name = &#x27;,old.name,&#x27; phone = &#x27;,old.phone,&#x27;  email = &#x27;,old.email,&#x27; profession = &#x27;,old.profession));</span><br><span class="line">end;</span><br><span class="line">delete from tb_user where id = 26;</span><br><span class="line">show triggers ;</span><br></pre></td></tr></table></figure><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><strong>锁</strong>是计算机协调多个进程或者线程并发访问某一资源的机制，在数据库中，除传统的计算资源(CPU、RAM、I&#x2F;O)的争用以外，数据也是一种提供许多用户共享的资源，如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问虚性能的一个重要因素，从这个角度上来讲，锁对数据库而言显得尤其重要，也更加复杂。</p><p>MySQL中的锁，按照锁的粒度分为以下三类：</p><ol><li>全局锁：锁定数据库中的所有表</li><li>表级锁：每次操作锁定整张表</li><li>行级锁：每次操作锁住对应的行数据</li></ol><h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞，其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240312163035355.png" alt="image-20240312163035355"></p><p>语法</p><ul><li>加全局锁</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush tables with read lock ;</span><br></pre></td></tr></table></figure><ul><li>数据备份</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot –p1234 itcast &gt; itcast.sql</span><br></pre></td></tr></table></figure><ul><li>释放锁</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock tables ;</span><br></pre></td></tr></table></figure><p>特点</p><p>数据库中加全局锁，是一个比较重的操作，存在以下问题：</p><ol><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志(binlog)，会导致主从延迟</li></ol><p>在InnoDB引擎中，我们可以在备份时加入参数 –single-transaction 参数来完成不加锁的一致性数据备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --single-transaction -uroot –p1234 itcast &gt; itcast.sql</span><br></pre></td></tr></table></figure><h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><p>表级锁，每次操作锁定整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中</p><p>对于表级锁，主要分为以下三类：</p><ul><li>表锁</li><li>元数据锁（meta data lock，MDL）</li><li>意向锁</li></ul><p><strong>表锁</strong></p><p>对于表锁，分为以下两类：</p><ul><li>表共享读锁（read lock）</li><li>表独占写锁（write lock）</li></ul><p>语法</p><ul><li>加锁：lock tables 表名… read &#x2F; write</li><li>释放锁：unlock  tables &#x2F; 客户端断开连接</li></ul><p>读锁</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240312170153529.png" alt="image-20240312170153529"></p><p>写锁</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240312170635797.png" alt="image-20240312170635797"></p><p><mark>结论: 读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。</mark></p><p><strong>元数据锁（meta data lock，MDL）</strong></p><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上，MDL锁主要作用是维护表元数据的数据一致性，在表上有活动业务时，不可以对元数据进行写入操作。<mark>为了避免DML与DDL产生冲突，保证对写的正确性</mark></p><p>在MySQL5.5中引入了MDL，当对一张表进行增删改查时，加MDL读锁（共享），当对表结构进行变更操作的时候，加MDL写锁（排他）。</p><table><thead><tr><th>对应SQL</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td>lock tables xxx read &#x2F; write</td><td>SHARED_READ_ONLY &#x2F; SHARED_NO_READ_WRITE</td><td></td></tr><tr><td>select、select … lock in share mode</td><td>SHARED_READ<strong>（本会话只能读不能写，其他会话可以读也可以写）</strong></td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>insert、update、delete、select … for update</td><td>SHARED_WRITE<strong>（所有会话都可以读，但只有本会话可以写）</strong></td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>alter table …</td><td>EXCLUSIVE<strong>（本会话可以读也可以写，但是别的会话不能读也不能写）</strong></td><td>与其他的MDL都互斥</td></tr></tbody></table><p>查看元数据锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select object_type,object_schema,object_name,lock_type,lock_duration from performance_schema.metadata_locks ;</span><br></pre></td></tr></table></figure><p><strong>意向锁</strong></p><p>注意到一个场景：当我们利用<code>update</code>语句对表的数据进行操作时，这个时候系统会自动给表加上一个元数据锁，使得所有会话都可以读，但是只有本会话可以写。假设这个时候有另外一个客户端对这个表执行<code>lock tables xxx read / write</code>操作，欲给这个表上一个表锁，这时会发生锁的冲突。为了避免锁的冲突，客户端需要一行一行检查表的行数据以确定是否有元数据锁，这会使得性能下降。</p><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行 数据是否加锁，使用意向锁来减少表锁的检查。</p><p>意向锁分有：</p><ol><li>意向共享锁（IS）：由语句select … lock in share mode 添加，与表锁读锁（read）兼容，与表锁写锁（write）互斥。</li><li>意向排他锁（IX）：由insert、update、delete、select … for update 添加，与表锁读锁和写锁都互斥，<strong>意向锁之间不会互斥</strong>。</li></ol><p>可以通过以下SQL语句来查看意向锁及行锁的加锁情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from</span><br><span class="line">performance_schema.data_locks;</span><br></pre></td></tr></table></figure><p><mark>注意：一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。</mark></p><h4 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h4><p>行级锁，每次操作锁住对应的行数据，锁定粒度最小，发生锁冲突的概率最低，并发度最高，应用在InnoDB存储引擎中</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录的锁，对于行级锁，主要分为以下三大类：</p><ul><li>行锁（Record  Lock）：锁定单个行记录的锁，防止其他事务对行进行update和delete。在RC、RR隔离级别下都支持</li><li>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持</li><li>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap，在RR隔离级别下支持</li></ul><p><strong>行锁</strong></p><p>InnoDB实现了以下两种类型的行锁：</p><ol><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同的数据集的排他锁</li><li>排他锁（X）：允许获取其他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁</li></ol><table><thead><tr><th>当前锁类型（下）&#x2F; 请求锁类型（右）</th><th>S（共享锁）</th><th>X（排他锁）</th></tr></thead><tbody><tr><td>S（共享锁）</td><td>兼容</td><td>冲突</td></tr><tr><td>X（排他锁）</td><td>冲突</td><td>冲突</td></tr></tbody></table><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>INSERT …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT（正常）</td><td><mark>不加任何锁</mark></td><td></td></tr><tr><td>SELECT … LOCK IN SHARE MODE</td><td>共享锁</td><td>需要手动在SELECT之后加LOCK SHARE MODE</td></tr><tr><td>SELECT … FOR UPDATE</td><td>拍他锁</td><td>需要手动在SELECT之后加FOR UPDATE</td></tr><tr><td>DELETE …</td><td>排他锁</td><td>自动加锁</td></tr></tbody></table><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜 索和索引扫描，以防止幻读。</p><ul><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会<mark>升级为表锁</mark>。</li></ul><p>可以通过以下SQL，查看意向锁及行锁的加锁情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from</span><br><span class="line">performance_schema.data_locks;</span><br></pre></td></tr></table></figure><p><strong>间隙锁&amp;临键锁</strong></p><p>默认情况下，InnoDB在REPEATABLE READ事务隔离级别运行，InnoDB使用next-key锁进行搜索和索引扫描，以防止幻读</p><ol><li>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁</li><li>索引上的等值查询（普通索引），向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁</li><li>索引上的范围查询（唯一索引）– 会访问到不满足条件的第一个值为止</li></ol><p><mark>注意：间隙锁唯一目的是防止其他事务插入间隙，间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一个间隙上采用间隙锁</mark></p><h3 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h3><p>逻辑存储结构</p><p>InnoDB的逻辑存储结构如下图所示：</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240313085644609.png" alt="image-20240313085644609"></p><ol><li><strong>表空间</strong>， 表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在 8.0版本中默认开启) ，则每张表都会有一个表空间（xxx.ibd），一个mysql实例可以对应多个表空间，用于存储记录、索引等数据。 </li><li><strong>段</strong> ，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段 （Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点， 索引段即为B+树的 非叶子节点。段用来管理多个Extent（区）。</li><li><strong>区</strong>，表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为16K， 即一 个区中一共有64个连续的页。</li><li><strong>页</strong>，是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。为了保证页的连续性， InnoDB 存储引擎每次从磁盘申请 4-5 个区。</li><li><strong>行</strong>，InnoDB 存储引擎数据是按行进行存放的。在行中默认有两个字段：</li></ol><ul><li>Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。</li><li>Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个 隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><h5 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h5><p>MySQL5.5版本开始，默认使用InnoDB引擎，它擅长事务处理，具有奔溃恢复特性，在日常开发中使用非常广泛。下面是InnoDB架构图，左侧为内存结构，右侧为磁盘结构。</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240313090552575.png" alt="image-20240313090552575"></p><p>InnoDB存储引擎基于磁盘文件存储，访问物理硬盘和在内存中进行访问，速度相差很大，为了尽可能 弥补这两者之间的I&#x2F;O效率的差值，就需要把经常使用的数据加载到缓冲池中，避免每次访问都进行磁 盘I&#x2F;O。 在InnoDB的缓冲池中不仅缓存了索引页和数据页，还包含了undo页、插入缓存、自适应哈希索引以及 InnoDB的锁信息等等。</p><p><strong>Buffer Pool</strong>：缓冲池是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池中没有数据，则从磁盘中加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</p><p>缓冲池以Page页为单位，底层采用链表数据结构管理Page，根据状态，将Page分为三种类型：</p><ul><li>free page：空闲page，未被使用</li><li>clean page：被使用page，数据没有被修改过</li><li>dirty page：脏页，被使用page，数据被修改过，页中数据与磁盘的数据产生了不一致</li></ul><p>在专用服务器上，通常将多达80％的物理内存分配给缓冲池 。参数设置： <code>show variables like &#39;innodb_buffer_pool_size&#39;</code>;</p><p><strong>Change Buffer</strong>：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区 Change Buffer 中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。</p><p><strong>Change Buffer 存在的意义</strong>：</p><p>与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新 可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。有了 ChangeBuffer之后，我们可以在缓冲池中进行合并处理，减少磁盘IO。</p><p><strong>Adaptive Hash Index</strong>：自适应hash索引，用于优化对Buffer Pool 数据的查询。InnoDB存储引擎会监控对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立hash索引，称之为自适应hash索引。</p><p><mark>自适应哈希索引，无需人工干预，是系统根据情况自动完成的。</mark></p><p>参数：<code>adpative_hash_index</code></p><p><strong>Log Buffer</strong>：日志缓冲区，用来保存要写入到磁盘中的log日志数据（red log、undo log），默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果有需要更新、插入或者删除许多行的事务，增加日志缓冲区的大小可以节省磁盘I &#x2F; O。</p><p>参数：</p><p><code>innodb_log_buffer_size</code>：缓冲区大小</p><p><code>innodb_flush_log_trx_commit</code>：日志刷新到磁盘时机</p><ul><li>1：日志在每次事务提交时写入并刷新到磁盘中</li><li>0：每秒将日志写入并刷新到磁盘一次</li><li>2：日志在每次事务提交之后写入，并每秒刷新到磁盘一次</li></ul><h5 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h5><p><strong>System Tablespace</strong>：系统表空间是更改缓冲区的存储区域，如果表是在系统表空间而不是每个表文件或者通用表空间中创建的，它也可能包含表和索引数据。（在MySQL5.x版本中还包含InnoDB数据字典、undolog等）</p><p>参数：<code>innnodb_data_file_path</code></p><p><strong>File-Per-Table Tablespaces</strong>：每个表的文件表空间包含单个InnoDB表的数据和索引，并存储在文件系统上的单个数据文件上</p><p>参数：<code>innodb_file_per_table</code></p><p><strong>General Tablespaces</strong>：通用表空间，需要通过<code>CREATE TABLESPACE</code>语法创建通用表空间，在创建表时，可以指定该表空间</p><ul><li>创建表空间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLESPACE ts_name ADD DATAFILE &#x27;file_name&#x27; ENGINE = engine_name;</span><br></pre></td></tr></table></figure><ul><li>创建表时指定表空间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE xxx ... TABLESPACE ts_name;</span><br></pre></td></tr></table></figure><p><strong>Updo Tablespaces</strong>：撤销表空间，MySQL实例在初始化会自动创建两个默认的undo表空间(初始大小16M)，用于存储undo log 日志</p><p><strong>Temporary Tablespaces</strong>：InnoDB使用会话临时表空间和全局临时表空间，存储用户创建的临时表等数据</p><p><strong>Doublewrite Buffer Files</strong>：双写缓冲区，innoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件 中，便于系统异常时恢复数据。</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240313211647637.png" alt="image-20240313211647637"></p><p><strong>Red Log</strong>：重做日志，是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log）,前者是在内存中，后者在磁盘中。当事务提交之后会把所 有修改信息都会存到该日志中, 用于在刷新脏页到磁盘时,发生错误时, 进行数据恢复使用。以循环方式写入重做日志文件，涉及两个文件：</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240313211826679.png" alt="image-20240313211826679"></p><h5 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h5><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240313211907224.png" alt="image-20240313211907224"></p><p>在InnoDB的后台线程中，分为4类，分别是：Master Thread 、IO Thread、Purge Thread、 Page Cleaner Thread。</p><p><strong>Master Thread</strong></p><p>核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中，保持数据的一致性，还包括脏页的刷新、合并插入缓冲、undo页的回收</p><p><strong>IO Thread</strong></p><p>在InnoDB存储引擎中大量使用了AIO请求，这样可以极大地提高数据库的性能，而<code>IO Thread </code>主要负责这些IO请求的回调</p><table><thead><tr><th>线程类型</th><th>默认个数</th><th>职责</th></tr></thead><tbody><tr><td>Read thread</td><td>4</td><td>负责读操作</td></tr><tr><td>Write thread</td><td>4</td><td>负责写操作</td></tr><tr><td>Log thread</td><td>1</td><td>负责将日志缓冲区刷新到磁盘</td></tr><tr><td>Insert buffer thread</td><td>1</td><td>负责将写缓冲区内容刷新到磁盘</td></tr></tbody></table><p>我们可以通过以下的这条指令，查看到InnoDB的状态信息，其中就包含IO Thread信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engine innodb status ;</span><br></pre></td></tr></table></figure><p><strong>Purge Thread</strong></p><p>主要用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回收。</p><p><strong>Page Cleaner Thread</strong></p><p>协助Master Thread 刷新脏页到磁盘的线程，它可以减轻Masrter Thread 的工作压力，减少阻塞</p><h4 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h4><p><strong>事务</strong> 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或者撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p><strong>事务四大特性(ACID)</strong></p><ul><li><p>原子性(Atomicty)：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</p></li><li><p>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</p></li><li><p>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响下的独立环境下运行</p></li><li><p>持久性(Durability)：事务一旦提交或者回滚，它对数据库中的数据的改变就是永久的</p></li></ul><p>而对于这四大特性，实际上分为两个部分。 其中的原子性、一致性、持久化，实际上是由InnoDB中的两份日志来保证的，一份是<code>redo log</code>日志，一份是<code>undo log</code>日志。 而持久性是通过数据库的锁， 加上<code>MVCC</code>来保证的。</p><h5 id="red-log"><a href="#red-log" class="headerlink" title="red log"></a><strong>red log</strong></h5><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性</p><p>该日志文件由两部分组成：重做缓冲日志（redo log buffer）以及重做日志文件（redo log file），前者是在内存中，后者是在磁盘中。当事务提交之后会把所有修改信息都存到该日志中，再用于刷新脏页到磁盘，发生错误时，进行数据恢复使用</p><p>在InnoDB引擎中的内存结构中，主要的内存区域就是缓冲池，在缓冲池中缓存了很多的数据页。 当我们在一个事务中，执行多个增删改的操作时，InnoDB引擎会先操作缓冲池中的数据，如果缓冲区没有对应的数据，会通过后台线程将磁盘中的数据加载出来，存放在缓冲区中，然后将缓冲池中的数据修改，修改后的数据页我们称为脏页。 而脏页则会在一定的时机，通过后台线程刷新到磁盘中，从而保证缓冲区与磁盘的数据一致。 而缓冲区的脏页数据并不是实时刷新的，而是一段时间之后将缓冲区的数据刷新到磁盘中，假如刷新到磁盘的过程出错了，而提示给用户事务提交成功，而数据却没有持久化下来，这就出现问题了，没有保证事务的持久性。</p><p><img src="C:\Users\86185\AppData\Roaming\Typora\typora-user-images\image-20240313214159384.png" alt="image-20240313214159384"></p><p>有了<code>redo log</code>之后，当对缓冲区的数据进行增删改之后，会首先将操作的数据页的变化，记录在<code>redo log buffer</code>中。在事务提交时，会将<code>redo log buffer</code>中的数据刷新到<code>redo log</code>磁盘文件中。 过一段时间之后，如果刷新缓冲区的脏页到磁盘时，发生错误，此时就可以借助于<code>redo log</code>进行数据 恢复，这样就保证了事务的持久性。 而如果脏页成功刷新到磁盘 或 或者涉及到的数据已经落盘，此时<code>redo log</code>就没有作用了，就可以删除了，所以存在的两个<code>redo log</code>文件是循环写的。</p><p>在业务操作中，我们操作数据一般都是<mark>随机读写磁盘的，而不是顺序读写磁盘。</mark> 而<code>redo log</code>在 往磁盘文件中写入数据，由于是日志文件，所以都是顺序写的。顺序写的效率，要远大于随机写。 这种先写日志的方式，称之为 WAL（Write-Ahead Logging）。</p><h5 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h5><p>回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : <mark>提供回滚</mark>(保证事务的原子性) 和<mark> MVCC</mark>(多版本并发控制) 。</p><p>undo log和redo log记录物理日志不一样，它是<mark>逻辑日志</mark>。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的 update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</p><p> <strong>Undo log销毁</strong>：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些 日志可能还用于MVCC。   </p><p><strong>Undo log存储</strong>：undo log采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含1024个undo log segment。</p><h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><ul><li>当前读</li></ul><p>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁，对于我们日常的操作，如：select … lock in share mode （共享锁），select … for update、update、insert、delete（排他锁）都是一种当前读。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2024/02/04/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/02/04/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><p>对于常见的字符串匹配问题，在n个字符中查找某个字符串。</p><p>若采用暴力方法，需要逐一匹配每个字符串，时间复杂度为O(mn)，其中m是字符串的平均长度。</p><p>字典树就是模拟查字典操作的数据结构，例如查找dog单词，第一次查找字母d，第二次查找字母o，第三次查找字母g。这样查找每一个单词，查找次数最多只需要这个单词的字母个数。</p><ul><li>时间复杂度：插入和查找的时间复杂度都是O(m)，其中m是待处理字符串的长度。</li><li>空间复杂度：有公共前缀的单词只需要存一次公共前缀，节省了空间。</li></ul><p>字典树应用：</p><ul><li>字符串检索</li><li>词频统计：统计一个单词出现了多少次</li><li>字符串排序：在插入时，在树的平级按字母表的顺序插入。字典树建好之后，用先序遍历就得到了字典树的顺序。</li><li>前缀匹配：字典树是按照公共前缀来建树的，适合用于搜索提示。</li></ul><p>题目描述：</p><p>​Ignatius最近遇到一个难题,老师交给他很多单词(只有小写字母组成,不会有重复的单词出现),现在老师要他统计出以某个字符串为前缀的单词数量(单词本身也是自己的前缀).</p><p>Input</p><p>输入数据的第一部分是一张单词表,每行一个单词,单词的长度不超过10,它们代表的是老师交给Ignatius统计的单词,一个空行代表单词表的结束.第二部分是一连串的提问,每行一个提问,每个提问都是一个字符串.</p><p>注意:本题只有一组测试数据,处理到文件结束.</p><p>Output</p><p>对于每个提问,给出以该字符串为前缀的单词的数量.</p><p>字典树实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span> &#123;<span class="comment">//字典树定义</span></span><br><span class="line">Trie* next[<span class="number">26</span>];</span><br><span class="line"><span class="type">int</span> num;<span class="comment">//以当前字符串为前缀的单词的数量</span></span><br><span class="line"><span class="built_in">Trie</span>()<span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; i++) &#123;</span><br><span class="line">next[i]=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Trie root;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;<span class="comment">//将字符串插入到字典树中</span></span><br><span class="line">Trie *p=&amp; root;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)&#123;<span class="comment">//遍历每一个字符</span></span><br><span class="line"><span class="keyword">if</span>(p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">NULL</span>)<span class="comment">//如果该字符没有对应结点</span></span><br><span class="line">p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>]=<span class="keyword">new</span> Trie;<span class="comment">//创建一个</span></span><br><span class="line">p=p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">p-&gt;num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;<span class="comment">//返回以字符串为前缀的单词的数量</span></span><br><span class="line">Trie *p=&amp; root;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)&#123;<span class="comment">//在字典树中找到该单词的结尾位置</span></span><br><span class="line"><span class="keyword">if</span>(p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p=p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p-&gt;num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">gets</span>(str))&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strlen</span>(str)) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">insert</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">gets</span>(str)) cout&lt;&lt;<span class="built_in">find</span>(str)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>kmp是单模匹配算法，即在一个长度为n的文本串去查找一个长度为m的模式串，它的时间复杂度为O(m+n)。</p><p>问题描述：一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？</p><p>Input</p><p>输入中含有一些数据，分别是成对出现的花布条和小饰条，其布条都是用可见ASCII字符表示的，可见的ASCII字符有多少个，布条的花纹也有多少种花样。花纹条和小饰条不会超过1000个字符长。如果遇见#字符，则不再进行工作。</p><p>Output</p><p>输出能从花纹布中剪出的最多小饰条个数，如果一块都没有，那就老老实实输出0，每个结果之间应换行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> str[maxn],pattern[maxn];</span><br><span class="line"><span class="type">int</span> next[maxn];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getFail</span><span class="params">(<span class="type">char</span> *p,<span class="type">int</span> plen)</span></span>&#123;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">0</span>;next[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//预处理next[],用于在失配的情况下得到回溯j的位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;plen;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=next[i];</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j])j=next[j];</span><br><span class="line">next[i+<span class="number">1</span>]=(p[i]==p[j])?j+<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kmp</span><span class="params">(<span class="type">char</span> *s,<span class="type">char</span> *p)</span></span>&#123;<span class="comment">//在s中找p</span></span><br><span class="line"><span class="type">int</span> last=<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> slen=<span class="built_in">strlen</span>(s),plen=<span class="built_in">strlen</span>(p);</span><br><span class="line"><span class="built_in">getFail</span>(p,plen);<span class="comment">//预计算next[]数组</span></span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;slen;i++)&#123;<span class="comment">//匹配s和p的每个字符</span></span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j])j=next[j];<span class="comment">//失配了，用next[]找j的回溯位置</span></span><br><span class="line"><span class="keyword">if</span>(s[i]==p[j])j++;<span class="comment">//当前位置的字符匹配，继续</span></span><br><span class="line"><span class="keyword">if</span>(j==plen)&#123;<span class="comment">//完全匹配</span></span><br><span class="line"><span class="comment">//这个匹配，在s中的起点是i+1-plen,末尾是i，如果有需要可以打印</span></span><br><span class="line"><span class="comment">//prinf(&quot;at location = %d,%s\n&quot;,i+1-plen,&amp;s[i+1-plen]);</span></span><br><span class="line"><span class="comment">//下面是与本题相关工作</span></span><br><span class="line"><span class="keyword">if</span>(i-last&gt;=plen)&#123;<span class="comment">//判断新的匹配与上一个匹配是否能分开</span></span><br><span class="line">cnt++;</span><br><span class="line">last=i;<span class="comment">//last指向上一次匹配的末尾位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str))&#123;<span class="comment">//读串</span></span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;#&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,pattern);</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">kmp</span>(str,pattern);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java图形可视化编程</title>
      <link href="/2024/02/04/Java%E5%9B%BE%E5%BD%A2%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/02/04/Java%E5%9B%BE%E5%BD%A2%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA图形化界面编程"><a href="#JAVA图形化界面编程" class="headerlink" title="JAVA图形化界面编程"></a>JAVA图形化界面编程</h1><h2 id="一、AWT编程"><a href="#一、AWT编程" class="headerlink" title="一、AWT编程"></a>一、AWT编程</h2><p>AWT是“抽象窗口工具集”，它为Java应用程序提供了基本的图形组件，AWT是窗口框架，它从不同平台的窗口系统中抽取共同组件，当程序运行时，将这些组件的创建和动作委托给程序所在的运行平台。简而言之，当使用AWT编写图形界面应用时，程序仅指定了界面组件的位置和行为，并未实现真正的实现，Java调用操作系统本地的图形界面来创建和平台一致的对等体。</p><p>AWT继承体系：</p><p>AWT编程中有两个基类：Component和MenuComponent。</p><ul><li>Component: 代表一个能以图形化方式显示出来，并可以与用户交互的对象，例如Button代表一个按钮，TexField代表一个文本框等；</li><li>MenuComponent: 代表图形界面的菜单组件，包括MenuBar(菜单条)、MenuItem(菜单项)等子类。</li></ul><p>其中Container是一种特殊的Component，它代表一种容器，可以盛装普通的Component.</p><p>AWT还有一个非常重要的接口叫做LayoutManager,如果一个容器中有多个组件，那么容器就需要使用LayoutManager来管理这些组件的布局方式。</p><h3 id="1-Container容器"><a href="#1-Container容器" class="headerlink" title="1.Container容器"></a>1.Container容器</h3><p>Container容器继承体系</p><ul><li>Window是可以独立存在的顶级窗口，默认使用BorderLayout管理其内部组件布局；</li><li>Panel可以容纳其他组件，但不能独立存在，它必须内嵌其他容器使用，默认使用FlowLayout管理其内部组件布局；</li><li>ScrollPane是一个带滚动条的容器，它也不能独立存在，默认使用BorderLayout管理其内部组件布局；</li></ul><p>常见API</p><p>Component作为基类，提供了如下常用的方法来设置组件的大小，位置，可见性等。</p><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>setLocation(int x,int y)</td><td>设置组件的位置</td></tr><tr><td>setSize(int width,int height)</td><td>设置组件的大小</td></tr><tr><td>setBounds(int x,int y,int width,int height)</td><td>同时设置组件的位置，大小</td></tr><tr><td>setVisible(Boolean b)</td><td>设置该组件的可见性</td></tr></tbody></table><p>Container作为容器根类，提供了如下方法来访问容器中的组件</p><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>Component add(Component comp)</td><td>向容器中添加其他组件（该组件既可以是普通组件，也可以是容器）</td></tr><tr><td>Component getComponentAt(int x,int y)</td><td>返回指定点的组件</td></tr><tr><td>int getComponentCount()</td><td>返回该容器内组件的数量</td></tr><tr><td>Component[] getComponents()</td><td>返回该容器内的所有组件</td></tr></tbody></table><p>演示1(Window)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//创建一个窗口对象 指定窗口的位置，大小(单位是像素）  设置窗口对象可见</span></span><br><span class="line">       Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是Window测试窗口:&quot;</span>);</span><br><span class="line">       frame.setLocation(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">       frame.setSize(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">       frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示2（Panel):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个Window对象，Panel对象以及其他的容器都不能独立存在，必须依附于Window存在</span></span><br><span class="line">        <span class="comment">//1.创建一个Panel对象</span></span><br><span class="line">        <span class="comment">//2.创建一个文本框和一个按钮，并且把他们放入到Panel容器中</span></span><br><span class="line">        <span class="comment">//3.把panel放入到Window中</span></span><br><span class="line">        <span class="comment">//4.设置Window的位置 大小</span></span><br><span class="line">        <span class="comment">//5.设置Window可见</span></span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示Panel:&quot;</span>);</span><br><span class="line">        Panel p=<span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;这是一个测试文本&quot;</span>));</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;这是一个测试按钮&quot;</span>));</span><br><span class="line">        frame.add(p);</span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>演示3（ScrollPane):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示ScrollPane:&quot;</span>);</span><br><span class="line">        ScrollPane s=<span class="keyword">new</span> <span class="title class_">ScrollPane</span>(ScrollPane.SCROLLBARS_ALWAYS);<span class="comment">//创建ScrollPane对象 滚动条</span></span><br><span class="line">        s.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;这是一个测试文本&quot;</span>));</span><br><span class="line">        s.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;这是一个测试按钮&quot;</span>));</span><br><span class="line">        frame.add(s);</span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Layoutmanager管理器"><a href="#2-Layoutmanager管理器" class="headerlink" title="2.Layoutmanager管理器"></a>2.Layoutmanager管理器</h3><p>LayoutManager布局管理器，可以根据运行平台来自动调整组件大小，程序员不用再手动设置组件的大小和位置了，只需要为容器选择合适的布局管理器即可。</p><p>1.FlowLayout</p><p>​在flowLayout布局管理器中，组件像水流一样向某方向流动（排列），遇到障碍（边界）就折回。重头开始排列。在默认的情况下，FlowLayout布局管理器从左向右排列所有组件，遇到边界就会折回下一行重新开始。</p><table><thead><tr><th>构造方法</th><th>方法说明</th></tr></thead><tbody><tr><td>FlowLayout()</td><td>使用默认的对齐格式以及默认的垂直间距、水平间距创建FlowLayout布局管理器。</td></tr><tr><td>FlowLayout(int align)</td><td>使用指定的对齐格式以及默认的垂直间距、水平间距创建FlowLayout布局管理器。</td></tr><tr><td>FlowLayout(int align,int hgap,int vgap)</td><td>使用指定的对齐格式以及指定的垂直间距、水平间距创建FlowLayout布局管理器。</td></tr></tbody></table><p>FlowLayout中组件的排列方向（从左到右、从右到左，从中间到两边等等），该参数应该使用FlowLayout类的静态常量：</p><p>FlowLayout.LEET、FlowLayout.CENTER、FlowLayout.RIGHT，默认是左对齐。</p><p>FlowLayout中组件中间间距通过整数设置，单位是像素，默认是5个像素。</p><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示FlowLayout:&quot;</span>);</span><br><span class="line">        <span class="comment">//1.通过setLayout方法设置容器的布局管理器</span></span><br><span class="line">        <span class="comment">//frame.setLayout(new FlowLayout(FlowLayout.LEADING,20,30));</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.CENTER,<span class="number">40</span>,<span class="number">20</span>));</span><br><span class="line">        <span class="comment">//2.添加多个按钮</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮&quot;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.设置最佳大小，pack方法</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.BorderLayout</p><p>​Borderlayout将容器分为EAST、SOUTH、WEST、NORTH、CENTER五个区域，普通组件可以被放置在这5个区域的任意一个中。</p><p>当改变使用BorderLayout的容器大小时，NORTH、SOUTH、和CENTER区域水平调整，而EAST、WEST和CENTER区域垂直调整。使用BorderLayout有如下两个注意点：</p><ul><li>当向BorderLayout布局管理器的容器中添加组件时，需要指定添加到哪个区域中。如果没有指定添加到哪个区域，则默认添加到中间区域中；</li><li>如果向同一个区域中添加多个组件时，后放入的组件会覆盖先放入的组件；</li></ul><table><thead><tr><th>构造方法</th><th>方法说明</th></tr></thead><tbody><tr><td>BorderLayout()</td><td>使用默认的水平间距、垂直间距创建BorderLayout布局管理器</td></tr><tr><td>BorderLayout(int hgap,int vgap)</td><td>使用指定的水平间距、垂直间距创建BorderLayout布局管理器</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示   BorderLayout:&quot;</span>);</span><br><span class="line">        <span class="comment">//1.指定Frame对象的布局管理器为BorderLayout</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>(<span class="number">30</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//2.往Frame指定东西南北各添加一个按钮组件</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;北侧按钮&quot;</span>), BorderLayout.NORTH);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;南侧按钮&quot;</span>), BorderLayout.SOUTH);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;东侧按钮&quot;</span>), BorderLayout.EAST);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;西侧按钮&quot;</span>), BorderLayout.WEST);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;中间按钮&quot;</span>), BorderLayout.CENTER);</span><br><span class="line">        <span class="comment">//3.设置最佳大小，pack方法</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不往某个区域放入组件，那么该区域不会空白出来，而是会被其他区域占用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示   BorderLayout:&quot;</span>);</span><br><span class="line">        <span class="comment">//1.指定Frame对象的布局管理器为BorderLayout</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>(<span class="number">30</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//2.往Frame指定东西南北各添加一个按钮组件</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;北侧按钮&quot;</span>), BorderLayout.NORTH);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;南侧按钮&quot;</span>), BorderLayout.SOUTH);</span><br><span class="line">        <span class="comment">//frame.add(new Button(&quot;东侧按钮&quot;), BorderLayout.EAST);</span></span><br><span class="line">       <span class="comment">// frame.add(new Button(&quot;西侧按钮&quot;), BorderLayout.WEST);</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;中间按钮&quot;</span>), BorderLayout.CENTER);</span><br><span class="line">        Panel p=<span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;中间按钮&quot;</span>));</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;测试文本框&quot;</span>));</span><br><span class="line">        frame.add(p);</span><br><span class="line">        <span class="comment">//3.设置最佳大小，pack方法</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.GirdLayout</p><p>​GirdLayout布局管理器将容器分割成纵横线分隔的网格，每个网格所占的区域大小相同，当向使用GirdLayout布局管理器中的容器中添加组件时，默认从左至右、从上至下依次添加到每个网格中，与FlowLayout不同的是，</p><p>放置在GirdLayout布局管理器中的各组件的大小由组件所处的区域决定(每个组件将自动占满整个区域)。</p><table><thead><tr><th>构造方法</th><th>方法说明</th></tr></thead><tbody><tr><td>GirdLayout(int rows,int cols)</td><td>采用指定的行数和列数，以及默认的横向间距、纵向间距将容器分割成多个网格</td></tr><tr><td>GirdLayout(int rows,int cols,int hgap,int vgap)</td><td>采用指定的行数和列数，以及指定的横向间距、纵向间距将容器分割成多个网格</td></tr></tbody></table><p>案例：</p><p>​使用Frame+Panel，配合FlowLayout和GirdLayout完成一个计算器效果。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.w3c.dom.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;计算器&quot;</span>);</span><br><span class="line">        <span class="comment">//1.创建一个Panel对象，里面存放一个TextField组件</span></span><br><span class="line">        Panel p=<span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">30</span>));</span><br><span class="line">        <span class="comment">//2.把当前这个Panel添加到frame的北边区域</span></span><br><span class="line">        frame.add(p,BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建一个Panel对象，并且设置它的布局管理器为GridLayout</span></span><br><span class="line">        Panel p2=<span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p2.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.往Panel中添加内容</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(i+<span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;+&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.把当前Panel添加到frame中</span></span><br><span class="line">        frame.add(p2);</span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.GirdBagLayout</p><p>​GirdBagLayout布局管理器的功能最强大，但也是最复杂，与GirdLayout布局管理器不同的是，在GirdBagLayout布局管理器中，一个组件可以跨越一个或者多个网格，并可以设置各网格的大小互不相同，从而增强了布局的灵活性。当窗口的大小发生变化时，GirdBagLayout布局管理器可以准确控制窗口各部分的拉伸。</p><p>由于在GirdBagLayout布局中，每个组件可以占用多个网络，此时，我们往容器中添加组件时，就需要具体的控制每个组件占用多少网格，java提供的GridBagConstains类，与特定的组件绑定，可以完成具体大小和跨越性的设置</p><p>5.CardLayout</p><p>​ 以时间而非空间来管理它里面的组件，它将加入到的容器所有的组件看成一叠卡片，每个卡片其实就是一个组件，每次只有最上面的Component才可见。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>CardLayout()</td><td>创建默认的CardLayout布局管理器</td></tr><tr><td>CardLayout(int hgap,int vgap)</td><td>通过指定卡片与容器左右边界的间距C hgap)、上下边界Cvgap)的间距来创建CardLayout布局管理器</td></tr><tr><td>first(Container target)</td><td>显示target容器中的第一张卡片</td></tr><tr><td>last(Container target)</td><td>显示target容器中的最后一张卡片</td></tr><tr><td>previous(Container target)</td><td>显示target容器中的前一张卡片</td></tr><tr><td>next(Container target)</td><td>显示target容器中的后一张卡片</td></tr><tr><td>show(Container target,String name)</td><td>显示target容器中指定名字的卡片</td></tr></tbody></table><p>案例：</p><p>​使用Frame和Panel以及CardLayout完成下图中的效果，点击底部按钮，切换卡片</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;CardLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个Panel储存多个卡片</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        <span class="comment">//创建CardLayout对象，并且把该对象设置到容器中</span></span><br><span class="line">        <span class="type">CardLayout</span> <span class="variable">cardLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">        panel.setLayout(cardLayout);</span><br><span class="line">        <span class="comment">//往panel中储存多个组件</span></span><br><span class="line">        String[] names = &#123;<span class="string">&quot;第一张&quot;</span>, <span class="string">&quot;第二张&quot;</span>, <span class="string">&quot;第三张&quot;</span>, <span class="string">&quot;第四张&quot;</span>, <span class="string">&quot;第五张&quot;</span>,&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">            panel.add(names[i], <span class="keyword">new</span> <span class="title class_">Button</span>(names[i]));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把panel放到frame中间区域</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//船舰另外一个panel存放底部按钮组件</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panelButton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        <span class="comment">//创建5个按钮组件</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;上一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;下一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;第一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;最后一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;第三张&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个事件监听器对象，用于监听按钮</span></span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">actionListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//获取按钮对象</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">actionCommand</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line">                <span class="keyword">switch</span> (actionCommand) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;上一张&quot;</span>:</span><br><span class="line">                        cardLayout.previous(panel);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;下一张&quot;</span>:</span><br><span class="line">                        cardLayout.next(panel);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;第一张&quot;</span>:</span><br><span class="line">                        cardLayout.first(panel);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;最后一张&quot;</span>:</span><br><span class="line">                        cardLayout.last(panel);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;第三张&quot;</span>:</span><br><span class="line">                        cardLayout.show(panel, <span class="string">&quot;第三张&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//把当前这个事件监听器和多个按钮绑定到一起</span></span><br><span class="line">        b1.addActionListener(actionListener);</span><br><span class="line">        b2.addActionListener(actionListener);</span><br><span class="line">        b3.addActionListener(actionListener);</span><br><span class="line">        b4.addActionListener(actionListener);</span><br><span class="line">        b5.addActionListener(actionListener);</span><br><span class="line">        <span class="comment">//把按钮添加到容器中</span></span><br><span class="line">        panelButton.add(b1);</span><br><span class="line">        panelButton.add(b2);</span><br><span class="line">        panelButton.add(b3);</span><br><span class="line">        panelButton.add(b4);</span><br><span class="line">        panelButton.add(b5);</span><br><span class="line">        <span class="comment">//把panelButton存放的frame的那边区域</span></span><br><span class="line">        frame.add(panelButton, BorderLayout.SOUTH);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.BoxLayout</p><p>为了简化开发，Swing引入了一个新的布局管理器：BoxLayout。BoxLayout可以在水平和垂直两个方向上摆放GUI组件，BoxLayout提供了如下一个简单的构造器：</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>BoxLayout(Container target,int axis)</td><td>指定创建基于target容器的BoxLayout布局管理器，该布局管理器里的组件按照axis方向排列，其中axis有BoxLayout.X_AXIS(横向)和BoxLayout.Y.AXIS(纵向)两个方向。</td></tr></tbody></table><p>案例1：</p><p>​使用Frame和BoxLayout完成下图效果</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxLayoutDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;BoxLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//创建BoxLayout对象，该对象的组件垂直存放</span></span><br><span class="line"><span class="comment">//        BoxLayout boxLayout = new BoxLayout(frame,BoxLayout.X_AXIS);</span></span><br><span class="line">        <span class="type">BoxLayout</span> <span class="variable">boxLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoxLayout</span>(frame,BoxLayout.Y_AXIS);</span><br><span class="line">        <span class="comment">//把boxlayout对象设置给frame</span></span><br><span class="line">        frame.setLayout(boxLayout);</span><br><span class="line">        <span class="comment">//创建两个按钮组件</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;buttonOne&quot;</span>));</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;buttonTwo&quot;</span>));</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​ 在java.swing包中，提供了一个新的容器Box，该容器的默认布局管理器就是BoxLayout，大多数情况下使用Box容器去容纳多个GUI组件，然后把Box容器作为一个组件，添加到其他容器中，从而形成整体窗口布局。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>static Box createHorizontalBox()</td><td>创建一个水平排列组件的Box容器</td></tr><tr><td>static Box createVerticalBox()</td><td>创建一个垂直排列组件的Box容器</td></tr></tbody></table><p>案例2：</p><p>​使用Frame和Box,完成下图效果。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxLayoutDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;BoxLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Box水平排列组件的容器</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">horizontalBox</span> <span class="operator">=</span> Box.createHorizontalBox();</span><br><span class="line">        <span class="comment">//往容器中添加按钮</span></span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonOne&quot;</span>));</span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonTwo&quot;</span>));</span><br><span class="line">        <span class="comment">//创建Box垂直排列组件的容器</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">verticalBox</span> <span class="operator">=</span> Box.createVerticalBox();</span><br><span class="line">        <span class="comment">//往容器中添加按钮</span></span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonOne&quot;</span>));</span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonTwo&quot;</span>));</span><br><span class="line">        <span class="comment">//把容器添加到frame中</span></span><br><span class="line">        frame.add(horizontalBox,BorderLayout.NORTH);</span><br><span class="line">        frame.add(verticalBox);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ Box实现间隔组件</p><table><thead><tr><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>static Component createHorizontalGlue()</td><td>创建一条水平Glue(可在两个方向上同时拉伸的间距)</td></tr><tr><td>static Component createVerticalGlue()</td><td>创建一条垂直Glue(可在两个方向上同时拉伸的间距)</td></tr><tr><td>static Component createHorizontalStrut(int width)</td><td>创建一条指定宽度(宽度固定了，不能拉伸)的水平Strut(可在垂直方向上拉伸的间距)</td></tr><tr><td>static Component createVerticalStrut(int height)</td><td>创建一条指定高度(高度固定了，不能拉伸)的垂直Strut(可在水平方向上拉伸的间距)</td></tr></tbody></table><p>案例3：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BordLayoutDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;BoxLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//船舰水平排列的Box容器</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">horizontalBox</span> <span class="operator">=</span> Box.createHorizontalBox();</span><br><span class="line">        <span class="comment">//往容器中添加按钮和间隔</span></span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonOne&quot;</span>));</span><br><span class="line">        horizontalBox.add(Box.createHorizontalGlue());<span class="comment">//默认间隔</span></span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonTwo&quot;</span>));</span><br><span class="line">        horizontalBox.add(Box.createHorizontalStrut(<span class="number">30</span>));<span class="comment">//指定间隔</span></span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonThree&quot;</span>));</span><br><span class="line">        <span class="comment">//创建垂直排列的容器</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">verticalBox</span> <span class="operator">=</span> Box.createVerticalBox();</span><br><span class="line">        <span class="comment">//往容器中添加按钮和间隔</span></span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonOne&quot;</span>));</span><br><span class="line">        verticalBox.add(Box.createVerticalGlue());</span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonTwo&quot;</span>));</span><br><span class="line">        verticalBox.add(Box.createVerticalStrut(<span class="number">30</span>));</span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonThree&quot;</span>));</span><br><span class="line">        <span class="comment">//把box容器添加到frame中</span></span><br><span class="line">        frame.add(horizontalBox,BorderLayout.NORTH);</span><br><span class="line">        frame.add(verticalBox);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-常用组件"><a href="#3-常用组件" class="headerlink" title="3.常用组件"></a>3.常用组件</h3><h4 id="3-1基本组件"><a href="#3-1基本组件" class="headerlink" title="3.1基本组件"></a>3.1基本组件</h4><table><thead><tr><th>组件名</th><th>功能</th></tr></thead><tbody><tr><td>Button</td><td>按钮</td></tr><tr><td>Canvas</td><td>用于绘画的画布</td></tr><tr><td>Checkbox</td><td>复选框组件(也可当作单选框组件使用)</td></tr><tr><td>CheckboxGroup</td><td>用于将多个Checkbox组件合成一组，一组Checkbox组件中将只有一个可以被选中，即全部变成单选框组件</td></tr><tr><td>Choice</td><td>下拉选择框</td></tr><tr><td>Frame</td><td>窗口，在GUI程序里通过该类创建窗口</td></tr><tr><td>Label</td><td>标签类，用于放置提示性文本</td></tr><tr><td>List</td><td>列表框组件，可以添加多项条目</td></tr><tr><td>Panel</td><td>不能单独存在基本容器类，必须放置到其他容器中</td></tr><tr><td>Scrollbar</td><td>滑动条组件，如果需要用户输入某个范围中的值，就可以使用滑动条组件，比如调色板中设置RGB的三个值所用的滑动条。当创建一个滑动条时，必须指定它的方向、初始值、滑块的大小、最小值和最大值。</td></tr><tr><td>ScrollPane</td><td>带水平和垂直滚动条的容器组件</td></tr><tr><td>TextArea</td><td>多行文本域</td></tr><tr><td>TextField</td><td>单行文本框</td></tr></tbody></table><p>案例：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicComponentDemo</span> &#123;</span><br><span class="line">    Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是测试组件&quot;</span>);</span><br><span class="line">    TextArea ta=<span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="number">5</span>,<span class="number">20</span>);</span><br><span class="line">    Choice colorChoice=<span class="keyword">new</span> <span class="title class_">Choice</span>();</span><br><span class="line">    CheckboxGroup cbg=<span class="keyword">new</span> <span class="title class_">CheckboxGroup</span>();</span><br><span class="line">    Checkbox male=<span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;男&quot;</span>,cbg,<span class="literal">true</span>);</span><br><span class="line">    Checkbox female=<span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;女&quot;</span>,cbg,<span class="literal">false</span>);</span><br><span class="line">    Checkbox isMarried=<span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;是否已婚&quot;</span>);</span><br><span class="line"></span><br><span class="line">    TextField tf=<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">50</span>);</span><br><span class="line">    Button ok=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    List colorList=<span class="keyword">new</span> <span class="title class_">List</span>(<span class="number">6</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//组装界面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装底部</span></span><br><span class="line">        Box bBox= Box.createHorizontalBox();</span><br><span class="line">        bBox.add(tf);</span><br><span class="line">        bBox.add(ok);</span><br><span class="line">        frame.add(bBox,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装选择部分</span></span><br><span class="line">       colorChoice.add(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">       colorChoice.add(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">       colorChoice.add(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">        Box cBox=Box.createHorizontalBox();</span><br><span class="line">        cBox.add(colorList);</span><br><span class="line">        cBox.add(male);</span><br><span class="line">        cBox.add(female);</span><br><span class="line">        cBox.add(isMarried);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装文本域和选择部分</span></span><br><span class="line">        Box topLeft=Box.createHorizontalBox();</span><br><span class="line">        topLeft.add(ta);</span><br><span class="line">        topLeft.add(cBox);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装顶部左边和列表框</span></span><br><span class="line">        colorList.add(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">        colorList.add(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">        colorList.add(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">        Box top=Box.createHorizontalBox();</span><br><span class="line">        top.add(topLeft);</span><br><span class="line">        top.add(colorList);</span><br><span class="line"></span><br><span class="line">        frame.add(top);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame为最佳大小 可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BasicComponentDemo</span>().init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2对话框Dialog"><a href="#3-2对话框Dialog" class="headerlink" title="3.2对话框Dialog"></a>3.2对话框Dialog</h4><h5 id="3-2-1-Dialog"><a href="#3-2-1-Dialog" class="headerlink" title="3.2.1 Dialog"></a>3.2.1 Dialog</h5><p> Dialog是windos类的子类，是一个容器，属于特殊组件，对话框可以独立存在的顶级窗口，和普通窗口用法一样。</p><ul><li>使用对话框通常依赖其他窗口，就是通常有一个父窗口。</li><li>对话框分为非模式和模式两种，当某个模式被打开之后该模式对话框位于它的父窗口之上，在模式对话框被关闭之前，父窗口无法获取焦点。</li></ul><p>案例1：</p><p>​通过Frame、Button、Dialog实现下图效果：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DialogDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试Dialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建两个对话框Dialog对象，一个模式的，一个非模式的</span></span><br><span class="line">        Dialog d1=<span class="keyword">new</span> <span class="title class_">Dialog</span>(frame,<span class="string">&quot;模式对话框&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        Dialog d2=<span class="keyword">new</span> <span class="title class_">Dialog</span>(frame,<span class="string">&quot;非模式对话框&quot;</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过setBounds方法设置Dialog组件的位置以及大小</span></span><br><span class="line">        d1.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        d2.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建两个按钮</span></span><br><span class="line">        Button b1=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮1：打开模式对话框&quot;</span>);</span><br><span class="line">        Button b2=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮2：打开非模式对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.给这两个按钮添加点击后的行为</span></span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d1.setVisible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        b2.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d2.setVisible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//5.把按钮添加到frame中</span></span><br><span class="line">        frame.add(b1,BorderLayout.NORTH);</span><br><span class="line">        frame.add(b2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例2：</p><p>​设置如下图效果：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DialogDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是测试Dialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建两个对话框Dialog对象，一个模式的</span></span><br><span class="line">        Dialog d1=<span class="keyword">new</span> <span class="title class_">Dialog</span>(frame,<span class="string">&quot;模式对话框&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个垂直的Box容器把文本框和一个按钮添加到Box容器中</span></span><br><span class="line">        Box vBox=Box.createHorizontalBox();</span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>));</span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确定&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把Box容器添加到Dialog中</span></span><br><span class="line">        d1.add(vBox);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过setBounds方法设置Dialog组件的位置以及大小</span></span><br><span class="line">        d1.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建按钮</span></span><br><span class="line">        Button b1=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮1：打开模式对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.给按钮添加点击后的行为</span></span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d1.setVisible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.把按钮添加到frame中</span></span><br><span class="line">        frame.add(b1,BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-2-2-FileDiaglog"><a href="#3-2-2-FileDiaglog" class="headerlink" title="3.2.2 FileDiaglog"></a>3.2.2 FileDiaglog</h5><p>Dialog类还有一个子类：FileDialog，它代表一个文件对话框，用于打开或者保存文件，需要注意的是FileDialog无法指定模态或者非模态，这是因为FileDialog依赖于运行平台的实现，如果运行平台的文件对话框是模态的，那么FileDialog也是模态的，那么FileDialog也是模态的，否则就是非模态的。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>FileDialog(Frame parent，String title，int mode)</td><td>创建一个对话框：parent:指定一个父窗口   title：对话框标题  mode:文件对话框类型，如果指定为FileDialog.LOAD，用于打开文件，如果指定为FileDialog.SAVE，用于保存文件</td></tr><tr><td>String getDirectory()</td><td>获取被打开或保存文件的绝对路径</td></tr><tr><td>String getFile()</td><td>获取被打开或保存文件的文件名</td></tr></tbody></table><p>案例：</p><p>​使用Frame、Button、和FileDialog完成下图效果：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDialogDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是测试FileDialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建两个FileDialog对象</span></span><br><span class="line">        FileDialog f1=<span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame,<span class="string">&quot;选择要打开的文件：&quot;</span>,FileDialog.LOAD);</span><br><span class="line">        FileDialog f2=<span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame,<span class="string">&quot;选择要保存的文件：&quot;</span>,FileDialog.SAVE);</span><br><span class="line">        <span class="comment">//2.创建两个按钮</span></span><br><span class="line">        Button b1=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;打开文件&quot;</span>);</span><br><span class="line">        Button b2=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;保存文件&quot;</span>);</span><br><span class="line">        <span class="comment">//3.给这两个按钮设置点击后的行为：获取打开或者保存的路径文件名</span></span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                f1.setVisible(<span class="literal">true</span>);<span class="comment">//代码会阻塞到这里</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取选择的路径以及文件</span></span><br><span class="line">                String directory=f1.getDirectory();</span><br><span class="line">                String file=f1.getFile();</span><br><span class="line">                System.out.println(<span class="string">&quot;打开的文件路径为：&quot;</span>+directory);</span><br><span class="line">                System.out.println(<span class="string">&quot;打开的文件名：&quot;</span>+file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        b2.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                f2.setVisible(<span class="literal">true</span>);<span class="comment">//代码会阻塞到这里</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取选择的路径以及文件</span></span><br><span class="line">                String directory=f2.getDirectory();</span><br><span class="line">                String file=f2.getFile();</span><br><span class="line">                System.out.println(<span class="string">&quot;保存的文件路径为：&quot;</span>+directory);</span><br><span class="line">                System.out.println(<span class="string">&quot;保存的文件名：&quot;</span>+file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//4.把按钮添加到Frame中</span></span><br><span class="line">        frame.add(b1,BorderLayout.NORTH);</span><br><span class="line">        frame.add(b2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.设置frame的最佳大小以及可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-事件处理机制"><a href="#4-事件处理机制" class="headerlink" title="4.事件处理机制"></a>4.事件处理机制</h3><h5 id="4-1GUI事件处理机制"><a href="#4-1GUI事件处理机制" class="headerlink" title="4.1GUI事件处理机制"></a>4.1GUI事件处理机制</h5><p>定义：</p><p>​在某个组件上发生操作的时候，会自动触发一段代码的执行。</p><p>在GUI事件处理机制中涉及到4个重要的概念需要理解：</p><p><strong>事件源</strong>:操作发生的场所，通常指某个组件，例如按钮，窗口等。</p><p><strong>事件</strong>：在事件源上发生的操作可以叫做事件，GUI会把事件都封装到一个Event对象中，如果需要知道该事件的详细信息，就可以通过Event对象来获取。</p><p><strong>事件监听器</strong>：当在某个事件源上发生了某个对象，事件监听器就可以对这个事件进行处理。</p><p><strong>注册监听</strong>：把某个事件监听器(A)通过某个事件(B)绑定到某个事件源(C)上，当在事件源C上发生事件B后，那么事件监听器A的代码就会自动执行。</p><p>使用步骤：</p><p>1.创建事件源组件对象；</p><p>2.自定义类，实现xxxListener接口，重写方法；</p><p>3.创建事件监听器对象(自定义类对象)</p><p>4.调用事件源组件对象的addXxxxListener方法完成注册监听</p><p>案例：</p><p>​完成下图效果，点击确定按钮，在单行文本框内显示hello world</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventDemo1</span> &#123;</span><br><span class="line">    Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试事件处理&quot;</span>);</span><br><span class="line">    TextField tf=<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">30</span>);</span><br><span class="line">    Button ok=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确认&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//组装视图</span></span><br><span class="line">        <span class="comment">//监听器</span></span><br><span class="line">        MyListener myListener=<span class="keyword">new</span> <span class="title class_">MyListener</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册监听</span></span><br><span class="line">        ok.addActionListener(myListener);</span><br><span class="line">        <span class="comment">//把tf和ok放到frame中</span></span><br><span class="line">        frame.add(tf,BorderLayout.NORTH);</span><br><span class="line">        frame.add(ok);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span>&#123;</span><br><span class="line">            tf.setText(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">EventDemo1</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-2GUI常用事件和事件监听器"><a href="#4-2GUI常用事件和事件监听器" class="headerlink" title="4.2GUI常用事件和事件监听器"></a>4.2GUI常用事件和事件监听器</h5><p>​事件监听器必须实现事件监听器接口，AWT提供了大量的事件监听器接口用于实现不同类型的事件监听器，用于监听不同类型的事件。AWT中提供了丰富的事件类，用于封装不同组件上所发生的特定操作，AWT的事件类都是AWTEvent类的子类，AWTEvent是EventObject的子类。</p><h6 id="4-2-1事件"><a href="#4-2-1事件" class="headerlink" title="4.2.1事件"></a>4.2.1事件</h6><p>AWT把事件分为了两大类：</p><p>​1.低级事件：这类事件是基于某个特定动作的事件。比如进入、点击、播放等动作的鼠标事件，再比如得到焦点和失去焦点等焦点事件。</p><table><thead><tr><th>事件</th><th>触发时机</th></tr></thead><tbody><tr><td>ComponentEvent</td><td>组件事件，当组件尺寸发生变化，位置发生移动，显示&#x2F;隐藏状态发生改变时触发该事件</td></tr><tr><td>ContainerEvent</td><td>容器事件，当容器里发生添加组件、删除组件时触发该事件</td></tr><tr><td>WindowEvent</td><td>窗口事件，当窗口状态发生改变(如打开、关闭、最大化、最小化)时触发该事件</td></tr><tr><td>FocusEvent</td><td>焦点事件，当事件得到焦点或者失去焦点时触发该事件</td></tr><tr><td>KeyEvent</td><td>键盘事件，当按键被按下、松开、单击时触发该事件</td></tr><tr><td>MouseEvent</td><td>鼠标事件，当进行单击、按下、松开、移动鼠标等动作时触发该事件</td></tr><tr><td>PaintEvent</td><td>组件绘制事件，该事件是一个特殊的事件类型，当GUI组件</td></tr></tbody></table><p>​2.高级事件：这类事件不会基于某个特定动作，而是根据功能含义的事件。</p><table><thead><tr><th>事件</th><th>触发时机</th></tr></thead><tbody><tr><td>ActionEvent</td><td>动作事件，当按钮、菜单项被单击，在TextField中按Enter键触发</td></tr><tr><td>AjustmentEvent</td><td>调节事件，在滑动条上移动滑块以调节数值时触发该事件</td></tr><tr><td>ItemEvent</td><td>选项事件，在用户选中某项，或取消选中某项时触发该事件</td></tr><tr><td>TextEvent</td><td>文本事件，当文本框、文字域里的文本发生改变时触发该事件</td></tr></tbody></table><p>​</p><h6 id="4-2-2事件监听器"><a href="#4-2-2事件监听器" class="headerlink" title="4.2.2事件监听器"></a>4.2.2事件监听器</h6><p>不同的事件需要不同的监听器监听，不同的监听器需要实现不同的监听器接口，当指定事件发生后，事件监听器就会调用所包含的事件处理器(实例方法)来处理事件。</p><table><thead><tr><th>事件类别</th><th>描述信息</th><th>监听器接口名</th></tr></thead><tbody><tr><td>ContainerEvent</td><td>容器中增加或者删除了组件</td><td>ContainerListener</td></tr><tr><td>TextEvent</td><td>文本字段或者文本区发生改变</td><td>TextListener</td></tr><tr><td>ActionEvent</td><td>激活组件</td><td>ActionListener</td></tr><tr><td>ItemEvent</td><td>选择了某些项目</td><td>ItemListener</td></tr><tr><td>MouseEvent</td><td>鼠标移动</td><td>MouseMotionListener</td></tr><tr><td>MouseEvent</td><td>鼠标点击等</td><td>MouseListener</td></tr><tr><td>KeyEvent</td><td>键盘输入</td><td>KeyListener</td></tr><tr><td>FoucsEvnet</td><td>组件收到或者失去焦点</td><td>FoucsListener</td></tr><tr><td>AdjustmentEvent</td><td>移动了滚动条等组件</td><td>AdjustListener</td></tr><tr><td>ComponentEvent</td><td>对象移动缩放显示隐藏等</td><td>ComponentListener</td></tr><tr><td>WindowEvent</td><td>窗口收到窗口级事件</td><td>WindowListener</td></tr></tbody></table><p>案例一：</p><p>​通过ContainerListener监听Frame容器添加组件；</p><p>​通过TextListener监听TextField内容变化；</p><p>​通过ItemListener监听Choice条目中状态变化；</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试监听器&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建组件(事件源)</span></span><br><span class="line">        TextField tf=<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">30</span>);</span><br><span class="line">        Choice names=<span class="keyword">new</span> <span class="title class_">Choice</span>();</span><br><span class="line">        names.add(<span class="string">&quot;第一&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;第二&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;第三&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;第四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给文本域添加TextListener，监听内容的变化</span></span><br><span class="line">        tf.addTextListener(<span class="keyword">new</span> <span class="title class_">TextListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">textValueChanged</span><span class="params">(TextEvent e)</span> &#123;</span><br><span class="line">              String text=tf.getText();</span><br><span class="line">                System.out.println(<span class="string">&quot;当前文本框内容为：&quot;</span>+text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给下拉选择框添加ItemListener，监听条目选项的变化</span></span><br><span class="line">        names.addItemListener(<span class="keyword">new</span> <span class="title class_">ItemListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">itemStateChanged</span><span class="params">(ItemEvent e)</span> &#123;</span><br><span class="line">             Object item=e.getItem();</span><br><span class="line">                System.out.println(<span class="string">&quot;当前选中的条目为：&quot;</span>+item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给frame注册ContainerListener监听器，监听容器中组件的添加</span></span><br><span class="line">        frame.addContainerListener(<span class="keyword">new</span> <span class="title class_">ContainerListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">componentAdded</span><span class="params">(ContainerEvent e)</span> &#123;</span><br><span class="line">                Component child=e.getChild();</span><br><span class="line">                System.out.println(<span class="string">&quot;frame中添加了:&quot;</span>+child);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">componentRemoved</span><span class="params">(ContainerEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加到frame中</span></span><br><span class="line">        Box hBox= Box.createHorizontalBox();</span><br><span class="line">        hBox.add(tf);</span><br><span class="line">        hBox.add(names);</span><br><span class="line">        frame.add(hBox);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame的最佳大小以及可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例2：</p><p>​给Frame设置WindowListener，监听用户点击X的动作，如果用户点击X，则关闭当前的窗口</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是测试WindowListener&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowOpened</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;打开了Window界面&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;关闭了Window界面&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-菜单组件"><a href="#5-菜单组件" class="headerlink" title="5.菜单组件"></a>5.菜单组件</h3><p>​在实际开发中，除了主界面，还有一类比较重要的内容就是菜单相关组件，可以通过菜单相关组件很方便的使用特定的功能，在AWT中，菜单相关组件的使用和之前的组件一模一样，只需要把菜单条、菜单、菜单项组合到一起，按照一定的布局，放入到容器中即可。</p><p>下表给出常见的菜单相关组件：</p><table><thead><tr><th>菜单组件名称</th><th>功能</th></tr></thead><tbody><tr><td>MenuBar</td><td>菜单条，菜单的容器</td></tr><tr><td>Menu</td><td>菜单组件，菜单项的容器。它也是MenuItem的子类，所以可以作为菜单项使用</td></tr><tr><td>PopupMenu</td><td>上下文菜单组件(右键菜单组件)</td></tr><tr><td>MenuItem</td><td>菜单项选项</td></tr><tr><td>CheckboxMenuItem</td><td>复选框菜单项组</td></tr></tbody></table><p>菜单相关组件使用：</p><p>1.准备菜单项组件，这些组件可以是MenuItem及其子类对象</p><p>2.准备菜单组件Menu或者PopupMenu(右击弹出子菜单)，把第一步中准备好的菜单项组件添加进来</p><p>3.准备菜单条组件MenuBar，把第二步中准备好的菜单组件Menu添加进来</p><p>4.把第三步中准备好的菜单条组件添加到窗口对象中显示</p><p>小技巧：</p><p>1.如果要在某个菜单的菜单项之前添加分割线，那么只需要调用Menu的add(new MenuItem(“.”))即可。</p><p>2.如果要在某个菜单项关联快捷键功能，那么只需要在创建菜单项对象时设置即可，例如给菜单项关联crtl+shift+Q快捷键，只需要：new MenuItem(“菜单项名字”，new MenuShortcut(KeyEvent.VK_Q，true));</p><p>案例：</p><p>​使用常用awt中常用菜单组件，完成下图效果。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.dsig.SignatureProperties;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMenu</span> &#123;</span><br><span class="line">    <span class="comment">//创建窗口</span></span><br><span class="line">    <span class="keyword">private</span> Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试菜单相关组件&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单条</span></span><br><span class="line">    MenuBar menuBar=<span class="keyword">new</span> <span class="title class_">MenuBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单组件</span></span><br><span class="line">    Menu fileMenu=<span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    Menu editMenu=<span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line">    Menu formatMenu=<span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;格式&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单项组件</span></span><br><span class="line">    MenuItem auto=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;自动换行&quot;</span>);</span><br><span class="line">    MenuItem copy=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;复制&quot;</span>);</span><br><span class="line">    MenuItem paste=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;粘贴&quot;</span>);</span><br><span class="line">    MenuItem comment=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;注释 &quot;</span>,<span class="keyword">new</span> <span class="title class_">MenuShortcut</span>(KeyEvent.VK_Q,<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">//关联快捷键 Ctrl+shift+Q</span></span><br><span class="line">    MenuItem cancel=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;取消注释&quot;</span>);</span><br><span class="line">    TextArea ta=<span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="number">6</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//组装视图</span></span><br><span class="line">        comment.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                ta.append(<span class="string">&quot;您点击了菜单项&quot;</span>+e.getActionCommand()+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        formatMenu.add(comment);</span><br><span class="line">        formatMenu.add(cancel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装编译菜单</span></span><br><span class="line">        editMenu.add(auto);</span><br><span class="line">        editMenu.add(copy);</span><br><span class="line">        editMenu.add(paste);</span><br><span class="line">        editMenu.add(formatMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装菜单条</span></span><br><span class="line">        menuBar.add(fileMenu);</span><br><span class="line">        menuBar.add(editMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把菜单条放到frame</span></span><br><span class="line">        frame.setMenuBar(menuBar);</span><br><span class="line">        frame.add(ta);</span><br><span class="line">        <span class="comment">//设置frame的最佳大小和可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SimpleMenu</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-绘图"><a href="#6-绘图" class="headerlink" title="6.绘图"></a>6.绘图</h3><p>​很多程序例如各种游戏都需要在窗口绘制各种图形，除此之外，即使在开发javaEE项目时，有时候也必须”动态”地向客户端生成各种图形、图表，比如图形验证码、统计图等，这都需要利用AWT的绘图功能。</p><p>组件绘图原理：</p><p>​在AWT中，真正提供绘图功能的对象是Graphics对象。</p><p>​paint(Graphics g):绘制组件的外观；</p><p>​update(Graphics g):内部调用paint方法，刷新组件外观；</p><p>​repaint(Graphics g):调用update方法，刷新组件外观；</p><p>一般情况下，update和paint方法是由AWT系统负责调用，如果程序要希望系统程序绘制组件，可以调用repaint方法实现。</p><p>Graphics类的使用：</p><p>​AWT中提供了Canvas类充当画布，提供了Graphics类充当画笔，通过调用Graphics对象的setColor()方法可以给画笔设置颜色。</p><p><strong>画图的步骤：</strong></p><p>​1.自定义类，继承Canvas类，重写paint(Graphics g)方法完成画图；</p><p>​2.在paint方法内部，真正开始画图之前调用Graphics对象的setColor()，setFont()方法设置画笔的颜色、字体等属性；</p><p>​3.调用画笔的Graphics的drawXxx()方法开始画图。</p><p>​Graphics类的常用方法：</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>setColor(Color c)</td><td>设置颜色</td></tr><tr><td>setFont(Font font)</td><td>设置字体</td></tr><tr><td>drawLine()</td><td>绘制直线</td></tr><tr><td>drawRect()</td><td>绘制矩形</td></tr><tr><td>drawRoundRect()</td><td>绘制圆角矩形</td></tr><tr><td>drawOval()</td><td>绘制椭圆</td></tr><tr><td>drawPolygon()</td><td>绘制多边形</td></tr><tr><td>drawArc()</td><td>绘制圆弧</td></tr><tr><td>drawPolyLine()</td><td>绘制折线</td></tr><tr><td>fillRect()</td><td>填充矩形区域</td></tr><tr><td>fillRoundRect()</td><td>填充圆角矩形区域</td></tr><tr><td>fillOval()</td><td>填充椭圆区域</td></tr><tr><td>fillPolygon()</td><td>填充多边形区域</td></tr><tr><td>fillArc()</td><td>填充圆弧对应的扇形区域</td></tr><tr><td>drawImage()</td><td>绘制位图</td></tr></tbody></table><p>案例：</p><p>​使用AWT绘图，绘制下图效果：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">simpleDraw</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RECT_SHAPE</span> <span class="operator">=</span> <span class="string">&quot;rect&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OVAL_SHAPE</span> <span class="operator">=</span> <span class="string">&quot;oval&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;绘制图形&quot;</span>);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">butRect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;绘制矩形&quot;</span>);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">butOval</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;绘制椭圆&quot;</span>);</span><br><span class="line">    <span class="comment">//定义一个变量，记录当前绘制的图形</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">shape</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//自定义类继承Canvas类，从写paint方放完成画图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            <span class="comment">//绘制不同的图形</span></span><br><span class="line">            <span class="keyword">if</span> (shape.equals(RECT_SHAPE)) &#123;</span><br><span class="line">                <span class="comment">//矩形</span></span><br><span class="line">                g.setColor(Color.BLACK);</span><br><span class="line">                g.drawRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.equals(OVAL_SHAPE)) &#123;</span><br><span class="line">                <span class="comment">//圆形</span></span><br><span class="line">                g.setColor(Color.RED);</span><br><span class="line">                g.drawOval(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建自定义画布</span></span><br><span class="line">    <span class="type">MyCanvas</span> <span class="variable">drawArea</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//组装视图</span></span><br><span class="line">        butRect.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//修改记录值为rect</span></span><br><span class="line">                shape=RECT_SHAPE;</span><br><span class="line">                drawArea.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        butOval.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//修改记录值为oval</span></span><br><span class="line">                shape=OVAL_SHAPE;</span><br><span class="line">                drawArea.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//创建panel承载按钮</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        panel.add(butRect);</span><br><span class="line">        panel.add(butOval);</span><br><span class="line">        frame.add(panel,BorderLayout.SOUTH);</span><br><span class="line">        drawArea.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">300</span>,<span class="number">300</span>));</span><br><span class="line">        frame.add(drawArea);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">simpleDraw</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>位图： Graphics提供了drawImage方法来绘制位图，该方法需要一个image参数，通过该方法可以绘制出指定的位图</p><p>使用步骤：</p><p>​1.创建image的子类对象BufferedImage(int width，int height，int ImageType)，创建时需要指定位图的宽高以及类型属性；此时相当于在内存中生成了一张照片</p><p>​2.调用BufferedImage对象的getGraphics()方法获取画笔，此时就可以往内存中的这张图片上绘图了，绘图的方法和之前的学习一模一样</p><p>​3.调用组件paint()方法中提供的Graphics对象的drawImage()方法，一次性的内存中的图片BufferedImage绘制到特定的组件上去。</p><p>使用位图绘制的好处：</p><p>​使用位图来绘制组件，相当于实现了图的缓冲区，此时绘图中没有直接把图形绘制到组件，而是先绘制到内存中的BufferedImage上，等全部绘制完成后，再一次性的图像显示到组件上即可，这样用户的体验会好一些。</p><p>案例：</p><p>​通过BufferedImage实现一个简单的手绘程序，通过鼠标能够在窗口中绘图。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandDraw</span> &#123;</span><br><span class="line">    <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;HandDraw&quot;</span>);</span><br><span class="line">    <span class="comment">//定义画图区域的宽高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AREA_WIDTH</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AREA_HEIGHT</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line">    <span class="comment">//定义右击菜单，设置画笔的color</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">PopupMenu</span> <span class="variable">colorMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PopupMenu</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">redItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">greenItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">blueItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    <span class="comment">//定义一个变量定义，记录当前画笔的颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Color</span> <span class="variable">foceColor</span> <span class="operator">=</span> Color.black;</span><br><span class="line">    <span class="comment">//创建一个位图对象</span></span><br><span class="line">    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(AREA_WIDTH,AREA_HEIGHT,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">    <span class="comment">//通过位图获取关联的Graphics对象</span></span><br><span class="line">    <span class="type">Graphics</span> <span class="variable">g</span> <span class="operator">=</span> image.getGraphics();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义一个类 继承Canvas</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">MyCanvas</span> <span class="variable">drawArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line">    <span class="comment">//定义变量，记录鼠标拖动过程中上一处的坐标</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> preX=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> preY=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">actionCommand</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line">                <span class="keyword">switch</span> (actionCommand) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;red&quot;</span>:</span><br><span class="line">                        foceColor = Color.RED;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;green&quot;</span>:</span><br><span class="line">                        foceColor = Color.GREEN;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;blue&quot;</span>:</span><br><span class="line">                        foceColor = Color.BLUE;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        redItem.addActionListener(listener);</span><br><span class="line">        greenItem.addActionListener(listener);</span><br><span class="line">        blueItem.addActionListener(listener);</span><br><span class="line"></span><br><span class="line">        colorMenu.add(redItem);</span><br><span class="line">        colorMenu.add(greenItem);</span><br><span class="line">        colorMenu.add(blueItem);</span><br><span class="line">        <span class="comment">//把colorMenu设置绘图区域</span></span><br><span class="line">        drawArea.add(colorMenu);</span><br><span class="line"></span><br><span class="line">        drawArea.addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">popupTrigger</span> <span class="operator">=</span> e.isPopupTrigger();</span><br><span class="line">                <span class="keyword">if</span> (popupTrigger)&#123;</span><br><span class="line">                    colorMenu.show(drawArea,e.getX(),e.getY());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//重置</span></span><br><span class="line">                preX=-<span class="number">1</span>;</span><br><span class="line">                preY=-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置位图的背景色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,AREA_WIDTH,AREA_HEIGHT);</span><br><span class="line">        <span class="comment">//鼠标点击移动事件</span></span><br><span class="line">        drawArea.addMouseMotionListener(<span class="keyword">new</span> <span class="title class_">MouseMotionAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseDragged</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (preX&gt;<span class="number">0</span>&amp;&amp;preY&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    g.setColor(foceColor);</span><br><span class="line">                    g.drawLine(preX,preY,e.getX(),e.getY());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//修正preX值和preY的值</span></span><br><span class="line">                preX=e.getX();</span><br><span class="line">                preY=e.getY();</span><br><span class="line">                <span class="comment">//重绘组件</span></span><br><span class="line">                drawArea.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        drawArea.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(AREA_WIDTH,AREA_HEIGHT));</span><br><span class="line">        frame.add(drawArea);</span><br><span class="line">        <span class="comment">//组装视图</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.pack();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HandDraw</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ImageIO的使用</p><p>​在实际生活中，很多软件都支持打开本地磁盘已经保存的图片，然后点击进行编辑，编译完成后，再重新保存到本地磁盘。如使用AWT要完成这样的功能，那么需要用到ImageIO这个类，可以操作本地磁盘的图片文件。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>static BufferedImage read(File input)</td><td>读取本地磁盘图片文件</td></tr><tr><td>static BufferedImage read(InputStream input)</td><td>读取本地磁盘图片文件</td></tr><tr><td>static boolean write(RenderedImage im，String formatName，File output)</td><td>往本地磁盘中输出图片</td></tr></tbody></table><p>案例：</p><p>​编写图片查看程序，支持另存操作</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadAndSaveImage</span> &#123;</span><br><span class="line">   <span class="keyword">private</span>  <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;图片查看器&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="type">MenuBar</span> <span class="variable">menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuBar</span>();</span><br><span class="line">   <span class="type">Menu</span> <span class="variable">menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">   <span class="type">MenuItem</span> <span class="variable">open</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="type">MenuItem</span> <span class="variable">save</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;另存为&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//声明BufferedImage对象，记录本地存取到内存中的图片</span></span><br><span class="line">    BufferedImage image ;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">           g.drawImage(image,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">MyCanvas</span> <span class="variable">drawArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//组装视图</span></span><br><span class="line">       open.addActionListener(e -&gt; &#123;</span><br><span class="line">           <span class="comment">//打开一个文件框</span></span><br><span class="line">           <span class="type">FileDialog</span> <span class="variable">fileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame,<span class="string">&quot;打开图片&quot;</span>,FileDialog.LOAD);</span><br><span class="line">           fileDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取用户选择的图片路径以及名称</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> fileDialog.getDirectory();</span><br><span class="line">           <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> fileDialog.getName();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             image =  ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(dir,fileName));</span><br><span class="line">             drawArea.repaint();</span><br><span class="line">         &#125;<span class="keyword">catch</span>(IOException ex)&#123;</span><br><span class="line">             ex.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       save.addActionListener(e -&gt; &#123;</span><br><span class="line">           <span class="comment">//展示一个文件对话框</span></span><br><span class="line">           <span class="type">FileDialog</span> <span class="variable">fileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame,<span class="string">&quot;保存图片&quot;</span>,FileDialog.SAVE);</span><br><span class="line">           fileDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取用户选择的图片路径以及名称</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> fileDialog.getDirectory();</span><br><span class="line">           <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> fileDialog.getName();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               ImageIO.write(image,<span class="string">&quot;JPEG&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(dir,fileName));</span><br><span class="line">           &#125;<span class="keyword">catch</span>(IOException ex)&#123;</span><br><span class="line">               ex.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       menu.add(open);</span><br><span class="line">       menu.add(save);</span><br><span class="line">       menuBar.add(menu);</span><br><span class="line">       <span class="comment">//把菜单条放入到窗口中</span></span><br><span class="line">       frame.setMenuBar(menuBar);</span><br><span class="line">       frame.add(drawArea);</span><br><span class="line">       frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">1080</span>,<span class="number">1080</span>);</span><br><span class="line"></span><br><span class="line">       frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">       frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">               System.exit(<span class="number">0</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">ReadAndSaveImage</span>().init();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、Swing编程"><a href="#二、Swing编程" class="headerlink" title="二、Swing编程"></a>二、Swing编程</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>​Swing是纯100%Java实现的，不再依赖于本地平台的GUI，因此可以在所有平台上都保持相同的界面外观。独立于本地平台的Swing组件被称为<strong>轻量级组件</strong>，而依赖于本地平台的AWT组件被称为<strong>重量级组件</strong>。</p><p>​由于Swing的所有组件完全采用Java实现，不再调用本地平台的GUI，所以导致Swing图形界面的显示速度要比AWT图形界面的显示速度要慢一些，但相对于快速发展的硬件设施而言，这种微小的速度差别无妨大碍。</p><p><strong>使用Swing的优势</strong>：</p><p>​1.Swing组件不再依赖于本地平台的GUI，无须采用各种平台的GUI交集，因此Swing提供了大量图形界面组件，远远超出了AWT提供的图形界面组件集。</p><p>​2.Swing组件不再依赖于本地平台GUI，因此不会产生与平台相关的bug。</p><p>​3.Swing组件在各种平台上运行时可以保证具有相同的图形界面外观。</p><p>​Swing提供的这些优势，让java图形界面程序真正实现了”Write Once，Run Anywhere”的目标。</p><p><strong>Swing的特征</strong>：</p><p>​1.Swing组件采用MVC(Model-View-Controller，即模型-视图-控制器)设计模式：</p><p>​模型(Model):用于维护组件的各种状态</p><p>​视图(View):是组件的可视化表现</p><p>​控制器(controller):用于控制对于各种事件、组件做出响应。</p><p>​当模型发生改变时，它会通知所有依赖它的视图，视图会根据模型数据来更新自己。Swing使用UI代理来包装视图和控制器，还有一个模型对象来维护该组件的状态。例如，按钮JButton有一个维护其状态信息的模型ButtonModel对象。Swing组件的模型是自动设置的，因此一般都使用JButton，而无须关心ButtonModel对象。</p><p>​2.Swing在不同平台上表现一致，并且有能力提供本地平台不支持的显示外观。由于Swing采用MVC模式来维护各组件，所以当组件的外观被改变时，对组件的状态信息(由模型维护)没有影响。因此，Swing可以使用插拔式外观感受(Pluggable Look And Feel，PLAF)来控制组件外观，使得Swing图形界面在同一个平台上运行时能拥有不同的外观，用户可以选择自己喜欢的外观。相比之下，在AWT图形界面中，由于控制组件外观的对象类与具体平台有关，因此AWT组件总是具有和本地平台相同的外观。</p><h3 id="2-基本组件的用法"><a href="#2-基本组件的用法" class="headerlink" title="2.基本组件的用法"></a>2.基本组件的用法</h3><h4 id="2-1、Swing组件层次"><a href="#2-1、Swing组件层次" class="headerlink" title="2.1、Swing组件层次"></a>2.1、Swing组件层次</h4><p>大部分Swing组件都是JComponent抽象类的直接或间接子类（并不是全部的Swing组件），JComponent类定义了所有子类组件的通用方法，JComponent类是AWT里java.awt.Container类的子类，这也是AWT和Swing的联系之一。绝大部分Swing组件类继承了Container类，所以Swing组件都可作为容器使用（JFrame类继承了Frame类）。</p><p>Swing组件和AWT组件的对应关系：大部分情况下，只需要在AWT组件的名称前面加个J，就可以得到其对应的Swing组件名称，但有几个例外：</p><ul><li>JComboBox：对应于AWT里的Choice组件，但比Choice组件功能更丰富；</li><li>JFileChooser：对应于AWT里的FileDialog组件；</li><li>JScrollBar：对应于AWT里的ScrollBar组件，注意两个组件类名中b字母的大小写差别；</li><li>JCheckBox：对应于AWT里的Checkbox组件，注意两个组件类名中b字母的大小写差别；</li><li>JCheckBoxMenuItem：对应于AWT里的CheckboxMenuItem组件，注意两个组件类名中b字母的大小写差别。</li></ul><p>Swing组件按照功能来分类：</p><ul><li>顶层容器：JFrame、JApplet、JDialog和JWindow。</li><li>中间容器：JPanel、JScrollPane、JSplitPane、JToolBar等。</li><li>特殊容器：在用户界面上具有特殊作用的中间容器，如JInternalFrame、JRootPane、JLayeredPane和JDesktopPane等。</li><li>基本组件：实现人机交互的组件，如JButton、JComboBox、JList、JMenu、JSlider等。</li><li>不可编辑信息的显示组件：向用户显示不可编辑信息的组件，如JLabel、JProgressBar和JToolTip等。</li><li>可编辑信息的显示组件：向用户显示能被编辑的格式化信息的组件，如JTable、JTextArea和JTextField等。</li><li>特殊对话框组件：可以直接产生特殊对话框的组件，如JColorChooser和JFileChooser等。</li></ul><h4 id="2-2AWT组件的Swing实现"><a href="#2-2AWT组件的Swing实现" class="headerlink" title="2.2AWT组件的Swing实现"></a>2.2AWT组件的Swing实现</h4><p>Swing为除Canvas之外的所有AWT组件提供了相应的实现，Swing组件比AWT组件的功能更加强大。相对于AWT组件，Swing组件具有如下的4个额外的功能：</p><ol><li>可以为Swing组件设置提示信息。使用setToolTipText()方法，为组件设置对用户有帮助的提示信息。</li><li>很多Swing组件如按钮、标签、菜单项等，除使用文字外，还可以使用图标修饰自己。为了允许在Swing组件中使用图标，Swing为Icon接口提供了一个实现类：ImageIcon，该实现类代表一个图像图标。</li><li>支持插拔式的外观风格。每个JComponent对象都有一个相应的ComponentUI对象，为它完成所有的绘画、事件处理、决定尺寸大小等工作。ComponentUI对象依赖当前使用的PLAF，使用UIManager.setLookAndFeel()方法可以改变图形界面的外观风格。</li><li>支持设置边框。Swing组件可以设置一个或多个边框。Swing中提供了各式各样的边框供用户使用，也能建立组合边框或自己设置边框。一种空白边框可以用于增大组件，同时协助布局管理器对容器中的组件进行合理的布局。</li></ol><p>每个Swing组件都有一个对应的UI类。例如JButton组件就有一个对应的ButtonUI类来作为UI代理。每个Swing组件的UI代理的类名总是将该Swing组件类名的J去掉，然后在后面添加UI后缀。UI代理类通常是一个抽象基类，不同的PLAF会有不同的UI代理实现类。Swing类库中包含了几套UI代理，分别放在不同的包下，每套UI代理都几乎包含了所有Swing组件的ComponentUI实现，每套这样的实现都被称为一种PLAF实现。</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++STL容器</title>
      <link href="/2024/02/04/C-STL%E5%AE%B9%E5%99%A8/"/>
      <url>/2024/02/04/C-STL%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="C-STL容器"><a href="#C-STL容器" class="headerlink" title="C++STL容器"></a>C++STL容器</h1><h2 id="1、vector容器"><a href="#1、vector容器" class="headerlink" title="1、vector容器"></a>1、vector容器</h2><ul><li>vector的构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器的构造</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;<span class="comment">//默认构造（无参）构造</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//通过区间方式进行构造</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">v2</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line">cout &lt;&lt;endl;</span><br><span class="line"><span class="comment">//通过n个elem方式来进行构造</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">v3</span>(<span class="number">3</span>, <span class="number">100</span>);<span class="comment">// 第一个参数是个数，第二个参数是数据</span></span><br><span class="line"><span class="built_in">printVector</span>(v3);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">v4</span>(v3);</span><br><span class="line"><span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>赋值操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器-赋值操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printvector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;<span class="comment">//无参构造</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printvector</span>(v);</span><br><span class="line"><span class="comment">//赋值   operator=</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">v2 = v;</span><br><span class="line"><span class="built_in">printvector</span>(v2);</span><br><span class="line"><span class="comment">//赋值    assign</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v3;</span><br><span class="line">v3 .<span class="built_in">assign</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());<span class="comment">//begin是闭区间，end是开区间</span></span><br><span class="line"><span class="built_in">printvector</span>(v3);</span><br><span class="line"><span class="comment">//赋值    assign   n个elem方式赋值</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v4;</span><br><span class="line">v4.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">printvector</span>(v4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>容量和大小</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器的容量和大小操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="keyword">if</span> (v1.<span class="built_in">empty</span>())<span class="comment">//为真  代表容器为空</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1为空 &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1不为空 &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1的容量为：&quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1的大小为： &quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新指定大小</span></span><br><span class="line">v1.<span class="built_in">resize</span>(<span class="number">15</span>, <span class="number">4</span>);<span class="comment">//如果重新指定的size比原来大，则默认用0填充,若指定一个数，则会用指定数来填充</span></span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">v1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">printVector</span>(v1);<span class="comment">//如果重新定义的比原来短了，超出部分会删除掉</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector插入和删除</span></span><br><span class="line"><span class="comment">/*·push_back(elem);    //尾部插入元素elem</span></span><br><span class="line"><span class="comment">·pop_back();         //删除最后一个元素</span></span><br><span class="line"><span class="comment">·insert(const_iterator pos, elem);   //迭代器指向位置pos插入元素elem</span></span><br><span class="line"><span class="comment">·insert(const_iterator pos, int count,elem);  迭代器指向位置pos插入count个元素elem</span></span><br><span class="line"><span class="comment">·erase(const_iterator  pos);  //删除迭代器指向元素</span></span><br><span class="line"><span class="comment">·erase(const_iterator start, const iterator end);   //删除迭代器从start到end之间的元素</span></span><br><span class="line"><span class="comment">·clear();         //删除容器中所有元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;v)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">60</span>);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">v1.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//插入  第一个参数为迭代器</span></span><br><span class="line">v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">100</span>);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">3</span>, <span class="number">500</span>);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//删除 第一个参数也是迭代器</span></span><br><span class="line">v1.<span class="built_in">erase</span>(v1.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">v1.<span class="built_in">erase</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">begin</span>() + <span class="number">2</span>);<span class="comment">//删除begin到begin+2之间的元素</span></span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">v1.<span class="built_in">clear</span>();<span class="comment">//删除容器中所以元素</span></span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据存取</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器  数据存取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用[]方式访问数组中元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//利用成员函数at来访问元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v1.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//获取第一个元素</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一个元素为：&quot;</span> &lt;&lt; v1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//获取最后一个元素</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;最后一个元素为：&quot;</span> &lt;&lt; v1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>互换容器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector  互换容器</span></span><br><span class="line"><span class="comment">//1.基本使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前的打印：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">v2.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后的打印：&quot;</span> &lt;&lt; endl;</span><br><span class="line">v1.<span class="built_in">swap</span>(v2);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实际用途</span></span><br><span class="line"><span class="comment">//巧用swap可以收缩内存空间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">3</span>);<span class="comment">//重新指定大小</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//巧用swap收缩内存</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v);</span><br><span class="line"><span class="comment">//vector&lt;int&gt;(v);//匿名对象</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>预留空间</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器-预留空间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="comment">//利用reserve预留空间</span></span><br><span class="line">v1.<span class="built_in">reserve</span>(<span class="number">100000</span>);</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;<span class="comment">//统计开辟次数</span></span><br><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>]) &#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];<span class="comment">//每开辟一次新的内存空间，地址发生变化</span></span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、map容器"><a href="#2、map容器" class="headerlink" title="2、map容器"></a>2、map容器</h2><ul><li>构造与赋值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//map容器  构造和赋值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建map容器</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="built_in">printmap</span>(mp);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;<span class="built_in">mp2</span>(mp);</span><br><span class="line"><span class="built_in">printmap</span>(mp2);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;mp3;</span><br><span class="line">mp3 = mp2;</span><br><span class="line"><span class="built_in">printmap</span>(mp3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大小和交换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//map容器大小和交换</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;m为空 ！&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m不为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m的大小为：&quot;</span> &lt;&lt; m.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m2;</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">6</span>, <span class="number">10</span>));</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">7</span>, <span class="number">20</span>));</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">8</span>, <span class="number">30</span>));</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">9</span>, <span class="number">40</span>));</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">50</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printmap</span>(m2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">m.<span class="built_in">swap</span>(m2);</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printmap</span>(m2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//map容器 插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line"><span class="comment">//第四种</span></span><br><span class="line"><span class="comment">//[]不建议插入，用途 可以利用key访问到value</span></span><br><span class="line">m[<span class="number">4</span>] = <span class="number">40</span>; </span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">erase</span>(<span class="number">3</span>);<span class="comment">//按照key删除</span></span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>(), m.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查找和统计</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//map容器  查找和统计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator pos = m.<span class="built_in">find</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != m.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到了元素 key = &quot;</span> &lt;&lt; (*pos).first &lt;&lt; <span class="string">&quot;     &quot;</span> &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; pos-&gt;second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未找到该元素！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计</span></span><br><span class="line"><span class="comment">//map不允许插入重复的key元素， count统计而言，结果要么为1 要么为0</span></span><br><span class="line"><span class="comment">//multimap的count统计可能大于1</span></span><br><span class="line"><span class="type">int</span> num = m.<span class="built_in">count</span>(<span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line"><span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//map容器 排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>,myCompare&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">6</span>, <span class="number">60</span>));</span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>,myCompare&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、stack容器"><a href="#3、stack容器" class="headerlink" title="3、stack容器"></a>3、stack容器</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//栈容器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//特点：符合先进后出数据结构</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt;s;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line"><span class="comment">//只要栈不为空，查看栈顶，并且执行出栈操作</span></span><br><span class="line"><span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查看栈顶元素</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈顶元素为：&quot;</span> &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、queue容器"><a href="#4、queue容器" class="headerlink" title="4、queue容器"></a>4、queue容器</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 队列 queue容器  front队头  back队尾</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">&#125;</span><br><span class="line">string m_name;</span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建队列</span></span><br><span class="line">queue&lt;person&gt;q;</span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="string">&quot;唐僧&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p3</span><span class="params">(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p4</span><span class="params">(<span class="string">&quot;沙僧&quot;</span>, <span class="number">300</span>)</span></span>;</span><br><span class="line">q.<span class="built_in">push</span>(p1);</span><br><span class="line">q.<span class="built_in">push</span>(p2);</span><br><span class="line">q.<span class="built_in">push</span>(p3);</span><br><span class="line">q.<span class="built_in">push</span>(p4);</span><br><span class="line"><span class="comment">//判断队列是否为空，查看队头，查看队尾，出队</span></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查看队头</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队头元素-姓名：&quot;</span> &lt;&lt; q.<span class="built_in">front</span>().m_name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; q.<span class="built_in">front</span>().m_age &lt;&lt; endl;</span><br><span class="line"><span class="comment">//查看队尾</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队尾元素-姓名：&quot;</span> &lt;&lt; q.<span class="built_in">back</span>().m_name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; q.<span class="built_in">back</span>().m_age &lt;&lt; endl;</span><br><span class="line"><span class="comment">//查看队中元素个数</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前队列中元素个数为:&quot;</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、set容器"><a href="#5、set容器" class="headerlink" title="5、set容器"></a>5、set容器</h2><ul><li>构造与赋值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//set构造以及赋值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_set</span><span class="params">(set&lt;<span class="type">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据只有insert方式</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">60</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="comment">//set容器特点，所有元素插入时自动排序</span></span><br><span class="line"><span class="comment">//set容器不允许插入重复值</span></span><br><span class="line"><span class="built_in">print_set</span>(s1);</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;<span class="built_in">s2</span>(s1);</span><br><span class="line"><span class="built_in">print_set</span>(s2);</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;s3;</span><br><span class="line">s3 = s2;</span><br><span class="line"><span class="built_in">print_set</span>(s3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>大小和交换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//set容器大小和交换</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(set&lt;<span class="type">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大小</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line"><span class="keyword">if</span> (s1.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;s1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s2;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">60</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">90</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s2);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">s1.<span class="built_in">swap</span>(s2);</span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//set容器大小和交换</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(set&lt;<span class="type">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大小</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line"><span class="keyword">if</span> (s1.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;s1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s2;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">60</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">90</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s2);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">s1.<span class="built_in">swap</span>(s2);</span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查找和统计</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//set查找和统计</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">69</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator pos = s1.<span class="built_in">find</span>(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != s1.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到元素：&quot;</span> &lt;&lt; *pos &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未找到元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">69</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line"><span class="type">int</span> num = s1.<span class="built_in">count</span>(<span class="number">30</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num=&quot;</span> &lt;&lt; num;</span><br><span class="line"><span class="comment">//对于set而言 统计结果要么为1 要么为0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、deque容器"><a href="#6、deque容器" class="headerlink" title="6、deque容器"></a>6、deque容器</h2><ul><li>构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="comment">//deque构造函数</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//容器里的数据不可以修改，只读</span></span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;<span class="built_in">d2</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;<span class="built_in">d3</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(d3);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;<span class="built_in">d4</span>(d3);</span><br><span class="line"><span class="built_in">print</span>(d4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>赋值操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="comment">//deque容器赋值操作</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"><span class="comment">//operator = 赋值</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d2;</span><br><span class="line">d2 = d1;</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line">   <span class="comment">//assign 赋值</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d3;</span><br><span class="line">d3.<span class="built_in">assign</span>(d2.<span class="built_in">begin</span>(), d2.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">print</span>(d3);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d4;</span><br><span class="line">d4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(d4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大小操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//deque容器  大小操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)d1.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"><span class="keyword">if</span> (d1.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d1的大小为：&quot;</span> &lt;&lt; d1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//deque容器没有容量概念</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新指定容器大小</span></span><br><span class="line">d1.<span class="built_in">resize</span>(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">d1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//deque容器插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两端操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">5</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">d1.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line">d1.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对指定位置操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d2;</span><br><span class="line">d2.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">d2.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">d2.<span class="built_in">push_front</span>(<span class="number">5</span>);</span><br><span class="line">d2.<span class="built_in">push_front</span>(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line"><span class="comment">//insert插入</span></span><br><span class="line">d2.<span class="built_in">insert</span>(d2.<span class="built_in">begin</span>(), <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line">d2.<span class="built_in">insert</span>(d2.<span class="built_in">begin</span>() + <span class="number">1</span>, <span class="number">2</span>, <span class="number">500</span>);</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照区间进行插入</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d3;</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">d3.<span class="built_in">insert</span>(d3.<span class="built_in">begin</span>(), d2.<span class="built_in">begin</span>(), d2.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">print</span>(d3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">5</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">d1.<span class="built_in">erase</span>(d1.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;::iterator it = d1.<span class="built_in">begin</span>();</span><br><span class="line">it++;</span><br><span class="line">d1.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"><span class="comment">//按照区间的方式删除</span></span><br><span class="line">d1.<span class="built_in">erase</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line">d1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据存取</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="comment">//deque容器数存取</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过[]方式访问元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; d1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//通过at方式访问元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; d1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d1.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; d1.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="comment">//deque排序</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">70</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">30</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">60</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序前的容器:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序后的容器:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//排序 默认排序规则是从小到大</span></span><br><span class="line"><span class="comment">//对于支持随机访问的迭代器的容器，都可以利用sort算法直接对其进行排序</span></span><br><span class="line"><span class="comment">//vector容器也可以利用sort进行排序</span></span><br><span class="line"><span class="built_in">sort</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、priority-queue容器"><a href="#7、priority-queue容器" class="headerlink" title="7、priority_queue容器"></a>7、priority_queue容器</h2><p>优先队列，其底层是基于堆来进行实现的，在优先队列中，队首元素一定是当前队列中优先级最高的那一个</p><p>1.priority_queue的定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>2.priority_queue容器内元素的访问</p><p>只能通过top()函数来访问队首元素（堆顶元素）,时间复杂度为O（1）,也就是优先级最高的元素,通过push()函数入队，其时间复杂度为O（logN)，通过pop()函数弹出队首元素出队，时间复杂度为O（logN)。empty()函数判断优先队列是否为空，返回true为空，返回false为非空。size()函数返回优先队列内元素的个数,时间复杂度为O（1）;</p><p>3.priority_queue内元素优先级的设置</p><p>（1）基本数据类型的优先级设置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt; &gt;q;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt;q;</span><br></pre></td></tr></table></figure><p>第二个参数vector<int>参数填写的是承载底层数据结构堆（heap)的容器，第三个参数less<int>则是对第一个参数的比较类，less<int>表示数字大的优先级大，greater<int>表示数字小的优先级大。</p><p>（2）结构体的优先级设置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fruit</span></span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> price;</span><br><span class="line">&#125;f1, f2, f3;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">const</span> fruit&amp; a,<span class="type">const</span> fruit&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.price &lt; b.price;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;fruit, vector&lt;fruit&gt;, cmp&gt; q;</span><br><span class="line">f1.name = <span class="string">&quot;桃子&quot;</span>;</span><br><span class="line">f1.price = <span class="number">15</span>;</span><br><span class="line">f2.name = <span class="string">&quot;苹果&quot;</span>;</span><br><span class="line">f2.price = <span class="number">20</span>;</span><br><span class="line">f3.name = <span class="string">&quot;菠萝&quot;</span>;</span><br><span class="line">f3.price = <span class="number">12</span>;</span><br><span class="line">q.<span class="built_in">push</span>(f1);</span><br><span class="line">q.<span class="built_in">push</span>(f2);</span><br><span class="line">q.<span class="built_in">push</span>(f3);</span><br><span class="line">cout &lt;&lt; q.<span class="built_in">top</span>().name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; q.<span class="built_in">top</span>().price &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-pair容器"><a href="#8-pair容器" class="headerlink" title="8.pair容器"></a>8.pair容器</h2><p>pair实际上可以看作一个内部含有两个元素的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pair</span>&#123;</span></span><br><span class="line">    typename first;</span><br><span class="line">    typename second;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1.pair的定义，要使用pair要添加头文件#include<utility>，由于map的内部涉及pair，故添加map头文件也能使用pair.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;typename1, typename2&gt; name;</span><br></pre></td></tr></table></figure><p>2.pair中元素的访问</p><p>pair中只有两个元素，分别是frist和second，只需要按照正常结构体方式去访问即可。</p><p>3.pair常用函数</p><p>比较操作数</p><p>两个pair类型数据进行比较可以直接使用&#x3D;&#x3D;，！&#x3D;，&gt;,&lt;比较大小，比较规则是先以first的大小作为标准，只有当first相等时才会去判别second的大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;<span class="built_in">p1</span>(<span class="number">5</span>,<span class="number">10</span>);</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;<span class="built_in">p2</span>(<span class="number">5</span>,<span class="number">22</span>);</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;<span class="built_in">p3</span>(<span class="number">3</span>,<span class="number">20</span>);</span><br><span class="line">cout&lt;&lt;(p1&lt;p2?<span class="string">&quot;p1&lt;p2&quot;</span>:<span class="string">&quot;p1&gt;=p2&quot;</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;(p1&lt;p3?<span class="string">&quot;p1&lt;p3&quot;</span>:<span class="string">&quot;p1&gt;=p3&quot;</span>)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-algorithm头文件下的常用函数"><a href="#9-algorithm头文件下的常用函数" class="headerlink" title="9.algorithm头文件下的常用函数"></a>9.algorithm头文件下的常用函数</h2><p>1.max(),min(),abs()</p><p>max(x,y)和min(x,y)分别返回x与y中的最大值与最小值，且参数必须是两个（可以是浮点数）,abs(x)返回x的绝对值。且x必须是整数，浮点数的绝对值采用fabs()。</p><p>2.swap()</p><p>swap(x,y)用来交换x与y的值。</p><p>3.reverse(it,it2)可以将数组指针在[it,it2)之间的元素或者容器的迭代器在[it，it2)范围内的元素进行反转。</p><p>4.next_permutation()</p><p>next_permutation()给出一个序列在全序列中的下一个序列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;arr[<span class="number">0</span>]&lt;&lt;arr[<span class="number">1</span>]&lt;&lt;arr[<span class="number">2</span>]&lt;&lt;arr[<span class="number">3</span>]&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(arr,arr+<span class="number">4</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.fill()</p><p>fill()可以把数组或者容器中的某一段区间赋值某个相同的值。和memset不同，这里的赋值可以是数组类型对应范围中的任意值。</p><p>6.sort()</p><p>sort(首元素地址，尾元素地址的下一个地址，比较函数)对数据进行排序</p><p>7.lower_bound()和upper_bound()</p><p>lower_bound和upper_bound需要用在一个有序数组或者容器中</p><p>lower_bound(first,last,val)用来寻找在数组或者容器的[first,last)范围内第一个值大于等于val的元素的位置</p><p>upper_bound(first,last,val)用来寻找在数组或者容器的[first,last)范围内第一个值大于val的元素的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> *lowerPos=<span class="built_in">lower_bound</span>(arr,arr+<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> *upperPos=<span class="built_in">upper_bound</span>(arr,arr+<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;第一个大于等于2的元素的位置为：&quot;</span>&lt;&lt;lowerPos&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;第一个大于2的元素的位置为：&quot;</span>&lt;&lt;upperPos&lt;&lt;endl;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2024/02/04/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2024/02/04/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划（Dynamic Programming,DP)是一种用来解决一类最优化问题的算法思想。简单来说，动态规划就是将一个复杂的问题分解成若干个子问题，通过综合子问题的最优解来得到原问题的最优解。需要注意的是，动态规划会将每个求解过的子问题的解记录下来，这样当下次碰到相同的子问题时，就可以直接使用之前记录的结果，而不是重复计算。</p><p>关键:每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划(DP)。</p><p>核心：如何设计状态和状态转移方程</p><h2 id="1、0-1背包问题"><a href="#1、0-1背包问题" class="headerlink" title="1、0-1背包问题"></a>1、0-1背包问题</h2><p>二维数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//二维数组形式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 8</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> dp[N][N],w[N],v[N];<span class="comment">//w数组存储物品重量 v数组存储物品价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;<span class="comment">//物品数量 背包容量</span></span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);<span class="comment">//核心递推式</span></span><br><span class="line"><span class="keyword">else</span> dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;max = &quot;</span>&lt;&lt;dp[n][m]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>滚动数组一维优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//滚动一维数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 8</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> dp[N],w[N],v[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=w[i];j--)<span class="comment">//逆序更新dp数组，因为dp[j]依赖于dp表左上方的值来进行更新</span></span><br><span class="line">&#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;max = &quot;</span>&lt;&lt;dp[m]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、完全背包问题"><a href="#2、完全背包问题" class="headerlink" title="2、完全背包问题"></a>2、完全背包问题</h2><p>二维数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="comment">/* 4 10</span></span><br><span class="line"><span class="comment">   3 3</span></span><br><span class="line"><span class="comment">   2 1</span></span><br><span class="line"><span class="comment">   4 5</span></span><br><span class="line"><span class="comment">   7 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="type">int</span> w[N],v[N];<span class="comment">//w数组存放重量，v数组存放价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++) &#123;</span><br><span class="line">cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=m ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j-w[i]]+v[i]);<span class="comment">/*核心递推式 与0-1背包区别是dp[i][j-w[i]]+v[i]，而0-1背包是dp[i-1][j-w[i]]+v[i]*/</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;dp[n][m]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一维滚动数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//一维滚动数组</span></span><br><span class="line"><span class="comment">/* 4 10</span></span><br><span class="line"><span class="comment">   3 3</span></span><br><span class="line"><span class="comment">   2 1</span></span><br><span class="line"><span class="comment">   4 5</span></span><br><span class="line"><span class="comment">   7 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="type">int</span> w[N],v[N];<span class="comment">//质量 价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = w[i]; j &lt;= m; j++)<span class="comment">//注意了，这里的j是从小到大枚举，和01背包不一样,01背包必须逆序</span></span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w[i]] + v[i]);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;maxn=&quot;</span>&lt;&lt;dp[m] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、最长连续子序列之和"><a href="#3、最长连续子序列之和" class="headerlink" title="3、最长连续子序列之和"></a>3、最长连续子序列之和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn=200010</span></span><br><span class="line"><span class="type">int</span> arr[maxn],dp[maxn];<span class="comment">//arr[i]存放序列 dp[i]存放以arr[i]结尾的连续序列之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>]=arr[<span class="number">0</span>];<span class="comment">//边界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i]=<span class="built_in">max</span>(arr[i],dp[i<span class="number">-1</span>]+arr[i]);<span class="comment">//状态转移方程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i]&gt;dp[k])<span class="comment">//寻找最大值</span></span><br><span class="line">&#123;</span><br><span class="line">k=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[k]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"><span class="comment">//-2 11 -4 13 -5 -2</span></span><br><span class="line"><span class="comment">//输出 20</span></span><br></pre></td></tr></table></figure><h2 id="4、最长不下降子序列-LIS"><a href="#4、最长不下降子序列-LIS" class="headerlink" title="4、最长不下降子序列(LIS)"></a>4、最长不下降子序列(LIS)</h2><p>在一个数字序列中找到一个最长的子序列（可以不连续），使得这个序列是不下降的（非递减的).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：8</span></span><br><span class="line"><span class="comment">1 2 3 -9 3 9 0 11</span></span><br><span class="line"><span class="comment">输出：6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> A[N],dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)cin&gt;&gt;A[i];</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-1</span>;<span class="comment">//记录最大值的dp[i]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">dp[i]=<span class="number">1</span>;<span class="comment">//边界初始条件</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]&gt;=A[j]&amp;&amp;dp[j]+<span class="number">1</span>&gt;dp[i]) &#123;<span class="comment">//转移方程</span></span><br><span class="line">dp[i]=dp[j]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">max</span>(dp[i],ans);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、最长公共子序列（LCS）"><a href="#5、最长公共子序列（LCS）" class="headerlink" title="5、最长公共子序列（LCS）"></a>5、最长公共子序列（LCS）</h2><p>给定两个字符串（或者数字序列）A和B,求一个字符串，使得这个字符串是A和B的最长公共部分（子序列可以不连续）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">char</span> A[N],B[N];<span class="comment">//A B字符串</span></span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">gets</span>(A+<span class="number">1</span>);<span class="comment">//从下标1开始读入</span></span><br><span class="line"><span class="built_in">gets</span>(B+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> lenA=<span class="built_in">strlen</span>(A+<span class="number">1</span>);<span class="comment">//由于读入时从下标1开始，因此读取长度也是从1开始</span></span><br><span class="line"><span class="type">int</span> lenB=<span class="built_in">strlen</span>(B+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//边界初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=lenA;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=lenB;j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[<span class="number">0</span>][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//状态转移方程</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lenA;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=lenB;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]==B[j])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;<span class="comment">//如果相同，则从dp表左上角+1赋值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> dp[i][j]=<span class="built_in">max</span>(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j]);<span class="comment">//不相同 则取左边或者上面较大的赋值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[lenA][lenB]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、最长回文子串"><a href="#6、最长回文子串" class="headerlink" title="6、最长回文子串"></a>6、最长回文子串</h2><p>给出一个字符串S，求S的最长回文子串的长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="type">char</span> S[maxn];</span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">gets</span>(S);<span class="comment">//从下标0开始读入字符串</span></span><br><span class="line"><span class="type">int</span> len=<span class="built_in">strlen</span>(S),ans=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));<span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//边界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i&lt;len<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(S[i]==S[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">ans=<span class="number">2</span>;<span class="comment">//初始化时注意当前最长回文子串长度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//状态转移方程</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> L=<span class="number">3</span>;L&lt;=len;L++)<span class="comment">//枚举子串的长度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i+L<span class="number">-1</span>&lt;len;i++)<span class="comment">//枚举子串的起始端点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j=i+L<span class="number">-1</span>;<span class="comment">//子串的右端点</span></span><br><span class="line"><span class="keyword">if</span>(S[i]==S[j]&amp;&amp;dp[i+<span class="number">1</span>][j<span class="number">-1</span>]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="number">1</span>;</span><br><span class="line">ans=L;<span class="comment">//更新回文子串长度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java笔记</title>
      <link href="/2024/02/04/java%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/04/java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习笔记"><a href="#Java学习笔记" class="headerlink" title="Java学习笔记"></a>Java学习笔记</h1><h2 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h2><h3 id="1、遍历数组"><a href="#1、遍历数组" class="headerlink" title="1、遍历数组"></a>1、遍历数组</h3><ul><li>法1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> b[][]=&#123;&#123;<span class="number">1</span>&#125;.&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;<span class="comment">//定义二维数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;b.length;k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">0</span>;c&lt;b[k].length;c++)&#123;</span><br><span class="line">                System.out.print(b[k][c]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>法2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">deo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[][]= &#123;&#123;<span class="number">4</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中的元素是：&quot;</span>);</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;<span class="comment">//外层循环计数器变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x[]:arr) &#123; <span class="comment">//外层循环变量为一维数组</span></span><br><span class="line">i++;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e:x) &#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(i==arr.length&amp;&amp;j==x.length) &#123;</span><br><span class="line">System.out.print(e);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.print(e+<span class="string">&quot;、&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、填充替换数组元素"><a href="#2、填充替换数组元素" class="headerlink" title="2、填充替换数组元素"></a>2、填充替换数组元素</h3><ul><li>fill(int [] arr,int value)；</li><li>1.arr：要进行填充的数组；</li><li>2.value：要存储数组中所有元素的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays; <span class="comment">//导包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.fill(arr, <span class="number">8</span>);<span class="comment">//使用同一个值对数组进行填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>fill(int[] arr,int from,int to,int value)；</li><li>1.arr：要进行填充的数组；</li><li>2.from：要使用指定值填充的第一个元素的索引（包括）；</li><li>3.to：要使用指定值填充的最后一个元素的索引（不包括）；</li><li>4.value：要分配给数组指定范围中的每个元素的值.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">Arrays.fill(arr,<span class="number">1</span>,<span class="number">3</span>, <span class="number">8</span>);<span class="comment">//使用同一个值对数组进行填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、对数组进行排序"><a href="#3、对数组进行排序" class="headerlink" title="3、对数组进行排序"></a>3、对数组进行排序</h3><p>Arrays.sort(object)；</p><p>object为需要进行排序的数组名称.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">Arrays.fill(arr,<span class="number">1</span>,<span class="number">3</span>, <span class="number">8</span>);<span class="comment">//使用同一个值对数组进行填充</span></span><br><span class="line">Arrays.sort(arr);<span class="comment">//从小到大排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">int</span> []arr=<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">43</span>,<span class="number">54</span>,<span class="number">65</span>&#125;;<span class="comment">//创建一个数组</span></span><br><span class="line">     BubbleSort sorter=<span class="keyword">new</span> <span class="title class_">BubbleSort</span>();<span class="comment">//创建冒泡排序类的对象</span></span><br><span class="line">     sorter.sort(arr);<span class="comment">//调用排序方法，对数组进行排序</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> []arr)</span> &#123;<span class="comment">//冒泡排序</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) &#123;<span class="comment">//排序趟数</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-i;j++) &#123;</span><br><span class="line">     <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">     <span class="type">int</span> temp=arr[j];</span><br><span class="line">     arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">     arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;<span class="comment">//打印输出数组</span></span><br><span class="line">     System.out.print(<span class="string">&quot;&gt;&quot;</span>+i);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;<span class="comment">//选择排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[]arr= &#123;<span class="number">43</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">7</span>&#125;;</span><br><span class="line">sort(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line"><span class="comment">//每次排序一趟找出待排序元素中的最大值放到末尾</span></span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=arr.length-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[index]) &#123;</span><br><span class="line">index=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换index和arr.length-i的值</span></span><br><span class="line"><span class="type">int</span> temp=arr[arr.length-i];</span><br><span class="line">arr[arr.length-i]=arr[index];</span><br><span class="line">arr[index]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;<span class="comment">//打印输出数组</span></span><br><span class="line">System.out.print(<span class="string">&quot;&gt;&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a>反转排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReverseSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]= &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>&#125;;</span><br><span class="line">sort(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> []arr)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;原数组元素内容为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;&gt;&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="type">int</span> temp,len=arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++) &#123;</span><br><span class="line"><span class="comment">//交换元素位置   </span></span><br><span class="line">temp=arr[i];</span><br><span class="line">arr[i]=arr[len-i-<span class="number">1</span>];</span><br><span class="line">arr[len-<span class="number">1</span>-i]=temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;新数组元素内容为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;&gt;&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、复制数组"><a href="#4、复制数组" class="headerlink" title="4、复制数组"></a>4、复制数组</h3><p>copyOf(arr,int newlength)；</p><p>arr：要进行复制的数组；</p><p>newlength：int型常量，指复制后的新数组的长度。如果新数组长度大于原数组长度，则用0（null)来填充；</p><p>若小于原数组长度，则会从原数组的第一个元素开始截取至满足新数组长度为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr2[]=Arrays.copyOf(arr,<span class="number">3</span>);<span class="comment">//复制数组，新数组长度小于原数组</span></span><br><span class="line"><span class="type">int</span> arr3[]=Arrays.copyOf(arr, <span class="number">10</span>);<span class="comment">//复制数组，新数组长度大于原数组，多的部分用0填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr2.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr2[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr3.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr3[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>copyOfRange(arr,int from,int to)；</p><p>arr：要复制的数组</p><p>from：指开始复制数组的索引位置(包括）;</p><p>to：指开始复制数组的结束索引位置（不包括）;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr2[]=Arrays.copyOfRange(arr,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//复制数组</span></span><br><span class="line"><span class="type">int</span> arr3[]=Arrays.copyOfRange(arr,<span class="number">0</span>,<span class="number">10</span>);<span class="comment">//超过部分会用0填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr2.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr2[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr3.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr3[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、查询数组"><a href="#5、查询数组" class="headerlink" title="5、查询数组"></a>5、查询数组</h3><p>binarySearch(Object[] arr, Object value); &#x2F;&#x2F;返回的是搜素值得索引，否则返回-1或‘  -  ’（插入点）;</p><p>arr：要搜素的数组；</p><p>value：要搜素的值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> index=Arrays.binarySearch(arr, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3的索引位置是：&quot;</span>+index);</span><br><span class="line"><span class="type">int</span> index2=Arrays.binarySearch(arr, <span class="number">11</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;11的索引位置是：&quot;</span>+index2+<span class="string">&quot;(数组中未找到该元素）&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>binarySearch(object[] arr,int from,int to,int value);</p><p>arr：要进行检索的数组；</p><p>from：指定范围检索的开始处索引（包括）;</p><p>to：指定范围检索的结束处索引（不包括）;</p><p>value：要搜素的值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> index=Arrays.binarySearch(arr,<span class="number">0</span>,<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3的索引位置是：&quot;</span>+index);</span><br><span class="line"><span class="type">int</span> index2=Arrays.binarySearch(arr,<span class="number">0</span>,<span class="number">5</span>, <span class="number">11</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;11的索引位置是：&quot;</span>+index2+<span class="string">&quot;(数组中未找到该元素）&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><p>单个字符可以用char类型保存，多个字符组成的文本就需要保存在String对象中。String通常称为字符串，一个String对象最多可以保存2^32-1个字节（占用4GB空间大小）的文本内容。</p><h3 id="1、声明、创建字符串"><a href="#1、声明、创建字符串" class="headerlink" title="1、声明、创建字符串"></a>1、声明、创建字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str;<span class="comment">//声明字符串</span></span><br><span class="line"><span class="comment">//声明的字符串变量必须经过初始化后才能使用，否则编译器会报出&quot;变量未被初始化错误&quot;。</span></span><br><span class="line"><span class="comment">//创建字符串</span></span><br><span class="line"><span class="type">char</span> a[]=&#123;<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">String s=<span class="keyword">new</span> <span class="title class_">String</span>(a);    <span class="comment">//等价于String s=new String(&quot;good&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[]=[<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line">String s=<span class="keyword">new</span> <span class="title class_">String</span>(a,<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//等价于String s=new String(&quot;udent&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String str1;</span><br><span class="line">str1=<span class="string">&quot;Student&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="2、连接字符串"><a href="#2、连接字符串" class="headerlink" title="2、连接字符串"></a>2、连接字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Link</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String str1=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;春色绿千里&quot;</span>);</span><br><span class="line">String str2=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;马蹄香万家&quot;</span>);</span><br><span class="line">String s=str1+<span class="string">&quot;\n&quot;</span>+str2;</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="type">int</span> booktime=<span class="number">4</span>;</span><br><span class="line"><span class="type">float</span> practice=<span class="number">6.5f</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;我每天花费&quot;</span>+booktime+<span class="string">&quot;小时看书；&quot;</span>+practice+<span class="string">&quot;小时上机训练&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、获取字符串信息"><a href="#3、获取字符串信息" class="headerlink" title="3、获取字符串信息"></a>3、获取字符串信息</h3><ul><li>使用String类的length()方法可以获取声明的字符串对象的长度.</li><li>indexOf(String s)；&#x2F;&#x2F;该方法返回参数字符串s在指定字符串中首次出现的索引位置。若未找到字符串s，则会返回-1.</li><li>lastIndexOf(String str)；&#x2F;&#x2F;该方法返回参数字符串s在指定字符串中最后一次出现的索引位置。若未找到字符串s，则会返回-1.</li><li>charAt(int index)方法可以将指定索引处的字符返回。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取字符串长度</span></span><br><span class="line">String str=<span class="string">&quot;We are student&quot;</span>;</span><br><span class="line"><span class="type">int</span> size=str.length();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.字符串查找</span></span><br><span class="line">String str=<span class="string">&quot;We are student&quot;</span>;</span><br><span class="line"><span class="type">int</span> index=str.indexOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="type">int</span> index2=str.lastIndexOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取指定索引位置的字符</span></span><br><span class="line">String str=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">char</span> mychar=str.chatAt(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="4、字符串操作"><a href="#4、字符串操作" class="headerlink" title="4、字符串操作"></a>4、字符串操作</h3><ul><li>获取子字符串</li></ul><p>substring(int begin)；</p><p>该方法返回的是从指定的索引位置开始截取到该字符串结尾的子串</p><p>substring(int begin,int end)；</p><p>该方法返回的是从字符串某一索引位置开始截取到某一索引位置结束的子串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取子字符串</span></span><br><span class="line">String sub1=str.substring(<span class="number">2</span>);</span><br><span class="line">String sub2=str.substring(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(sub1);</span><br><span class="line">System.out.println(sub2);</span><br></pre></td></tr></table></figure><ul><li>去除空格</li></ul><p>trim();</p><p>该方法返回字符串的副本，忽略掉前导空格和后导空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.去除空格</span></span><br><span class="line">String s=<span class="string">&quot; Java  学习 &quot;</span>;</span><br><span class="line">System.out.println(s.length());</span><br><span class="line">System.out.println(s.trim().length());</span><br></pre></td></tr></table></figure><ul><li>字符串替换</li></ul><p>replace(target, replacement)；</p><p>该方法可以实现将指定的字符或字符串替换成新的字符或字符串。</p><p>target:要替换的字符或字符串</p><p>replacement:用于替换原来字符串的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.替换字符串</span></span><br><span class="line">String s1=<span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">String s2=s1.replace( <span class="string">&quot;l&quot;</span>,<span class="string">&quot;L&quot;</span>);</span><br><span class="line">System.out.println(s2);</span><br></pre></td></tr></table></figure><ul><li>判断字符串的开始与结尾</li></ul><p>startWith(String prefix)；</p><p>该方法判断当前字符串对象的前缀是否为参数指定的字符串。</p><p>prefix是指作为前缀的字符串。</p><p>endWith(String suffix)；</p><p>该方法用于判断当前字符串是否以给定的字符串结束。</p><p>suffix是指作为后缀的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.判断字符串的开始与结束</span></span><br><span class="line">String num1=<span class="string">&quot;22045612&quot;</span>;</span><br><span class="line">String num2=<span class="string">&quot;21304578&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> flag1=num1.startsWith(<span class="string">&quot;22&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> flag2=num2.endsWith(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;字符串num1是以&#x27;22&#x27;开始的吗？&quot;</span>+flag1);</span><br><span class="line">System.out.println(<span class="string">&quot;字符串num2是以&#x27;11&#x27;结束的吗？&quot;</span>+flag2);</span><br></pre></td></tr></table></figure><ul><li>判断字符是否相等</li></ul><p>equals(String str)；</p><p>该方法用于判断两个字符串是否相等，且区分大小写，返回的是boolean类型。</p><p>equalsLgnoreCase(String str)；</p><p>该方法用于判断两个字符串是否相等，忽略字母的大小写，返回的是boolean类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.判断字符串是否相等</span></span><br><span class="line">String sh1=<span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">String sh2=<span class="string">&quot;HElloworld&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> a1=sh1.equals(sh2);<span class="comment">//区分大小写</span></span><br><span class="line"><span class="type">boolean</span> a2=sh1.equalsIgnoreCase(sh2);<span class="comment">//忽略大小写</span></span><br><span class="line">System.out.println(a1);</span><br><span class="line">System.out.println(a2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>按字典序比较两个字符串</li></ul><p>compareTo(String str)；</p><p>该方法按照字典顺序比较两个字符串，若按照字典顺序此String对象位于参数字符串之前则返回一个负整数，位于之后，则返回一个正整数，如果两个字符串相同则返回0.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.按字典顺序比较两个字符串</span></span><br><span class="line">String sa1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String sa2=<span class="string">&quot;hallo&quot;</span>;</span><br><span class="line"><span class="type">int</span> compare=sa1.compareTo(sa2);</span><br><span class="line">System.out.println(compare);</span><br></pre></td></tr></table></figure><ul><li>字母大小写转换</li></ul><p>toLowerCase()；</p><p>将字符串中所有大写字母转化为小写字母；</p><p>toUpperCase()；</p><p>将字符串中所有小写字母转化为大写字母</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.字母大小写转换</span></span><br><span class="line">sa1=<span class="string">&quot;heelll&quot;</span>;</span><br><span class="line">String ss=sa1.toUpperCase();</span><br><span class="line">String sss=ss.toLowerCase();</span><br><span class="line">System.out.println(ss);</span><br><span class="line">System.out.println(sss);</span><br></pre></td></tr></table></figure><ul><li>字符串分割</li></ul><p>1.split(String sign)；</p><p>该方法可以将给定的分割符对字符串进行拆分，其中sign为分割字符串的分割符。</p><p>2.split(String sign,int limit)；</p><p>该方法可以根据给定的分割符对字符串进行拆分，并限定拆分的次数，其中sign为分割字符串的分割符，limit为限制的拆分次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//8.字符串分割</span></span><br><span class="line">str=<span class="string">&quot;192.168.0.1&quot;</span>;</span><br><span class="line">String[]firstArray=str.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">String[]secondArray=str.split(<span class="string">&quot;\\.&quot;</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;str的原值为：[&quot;</span>+str+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;全部分割后的结果为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String a:firstArray) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;[&quot;</span>+a+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print(<span class="string">&quot;分割两次后的结果为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String a:secondArray) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;[&quot;</span>+a+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><h3 id="5、字符串生成器"><a href="#5、字符串生成器" class="headerlink" title="5、字符串生成器"></a>5、字符串生成器</h3><p>如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费内存空间，而这种操作还不可避免。因此我们可以通过StringBuild类来解决这个问题。</p><p>StringBuilder是一个可变的字符串类，我们可以把它看作一个容器，这里的可变指的是StringBuilder对象中的内容是可变的</p><p><strong>StringBuilder和String的区别：</strong></p><ul><li>StringBuilder：内容是可变的</li><li>String：内容是不变的</li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>public StringBuilder()；  创建一个空白可变字符串对象，不含任何内容</p><p>public StringBuilder(String str)；  根据字符串的内容，来创建可变字符串对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//public StringBuilder();创建一个空白可变字符串对象，不含任何内容</span></span><br><span class="line"><span class="comment">//public StringBuilder(String str);根据字符串的内容，来创建可变字符串对象</span></span><br><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;sb:&quot;</span>+sb);</span><br><span class="line">System.out.println(<span class="string">&quot;sb.length():&quot;</span>+sb.length());</span><br><span class="line">StringBuilder sb2=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2:&quot;</span>+sb2);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2.length():&quot;</span>+sb2.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加和反转方法"><a href="#添加和反转方法" class="headerlink" title="添加和反转方法"></a>添加和反转方法</h4><p>public StringBuilder append(任意类型) ；   添加数据，并返回对象本身</p><p>public StringBuilder reverse()；     返回相反的字符序列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加和反转方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//public StringBuilder append(任意类型);添加数据，并返回对象本身</span></span><br><span class="line"><span class="comment">//public StringBuilder reverse();返回相反的字符序列</span></span><br><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">StringBuilder sb2=sb.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2:&quot;</span>+sb2);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2.length():&quot;</span>+sb2.length());</span><br><span class="line">sb.append(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="comment">//链式编程</span></span><br><span class="line">sb.append(<span class="string">&quot; good &quot;</span>).append(<span class="string">&quot;C++ &quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb:&quot;</span>+sb);</span><br><span class="line">System.out.println(<span class="string">&quot;sb.length():&quot;</span>+sb.length());</span><br><span class="line">sb.reverse();</span><br><span class="line">System.out.println(<span class="string">&quot;sb:&quot;</span>+sb);</span><br><span class="line">System.out.println(<span class="string">&quot;sb.length():&quot;</span>+sb.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="StringBuilder和String的相互转换"><a href="#StringBuilder和String的相互转换" class="headerlink" title="StringBuilder和String的相互转换"></a>StringBuilder和String的相互转换</h4><ul><li><p>StringBuilder转换为String</p><p>public String toString()；  通过toSTring可以实现把StringBuilder转换为String</p></li><li><p>String转换为StringBuilder</p><p>public StringBuilder(String str)；  通过构造方法实现把String转换为StringBuilder</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StringTest;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zhuanhuan</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//public String toString();通过toSTring可以实现把StringBuilder转换为String</span></span><br><span class="line"><span class="comment">//public StringBuilder(String str);通过构造方法实现把String转换为StringBuilder</span></span><br><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">String str=sb.toString();</span><br><span class="line">System.out.println(str);</span><br><span class="line">String temp=<span class="string">&quot;java&quot;</span>;</span><br><span class="line">StringBuilder temp2=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(temp);</span><br><span class="line">System.out.println(temp2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、正则表达式"><a href="#6、正则表达式" class="headerlink" title="6、正则表达式"></a>6、正则表达式</h3><p>正则表达式可以检验字符串是否满足一定的规则，并用来校验数据格式的合法性。</p><p>作用：</p><ul><li>校验字符串是否满足规则</li><li>在一段文本中查找满足要求的内容</li></ul><p><strong>字符类(只匹配一个字符)</strong></p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>[abc]</td><td>只能是a,b,c</td></tr><tr><td>[^abc]</td><td>除了a,b,c之外的任何字符</td></tr><tr><td>[a-zA-Z]</td><td>a到z，A到Z，包括(范围)</td></tr><tr><td>[a-d[m-p]]</td><td>a到d或者m到p</td></tr><tr><td>[a-z&amp;&amp;[def]]</td><td>a-z和def的交集，为：d,e,f</td></tr><tr><td>[a-z&amp;&amp;[^bc]]</td><td>a-z和非bc的交集。等同于[ad-z]</td></tr><tr><td>[a-z&amp;&amp;[^m-p]]</td><td>a到z除了m到p的交集。等同于[a-lq-z]]</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public static matches(String regex): 判断是否与正则表达式匹配，匹配返回true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//只能是a,b,c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------1--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ab&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">//false 一个中括号只表示一个字符，含有2个字符故会返回false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不能出现a,b,c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------2---------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">//false 一个中括号只表示一个字符，含有2个字符故会返回false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc][^abc]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//a到z A到Z（包括头尾的范围）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------3--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aa&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//a[d[m-p]] a到d 或m-p</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------4--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;p&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;e&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//[a-z&amp;&amp;[def]]  a-z和def的交集，为def</span></span><br><span class="line">        <span class="comment">//细节：如果要求两个范围的交集，那么需要写符号&amp;&amp;</span></span><br><span class="line">        <span class="comment">//如果写成了&amp;，那么此时&amp;不表示交集，仅仅表示一个简简单单的符号&amp;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------5---------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;[def]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&amp;&quot;</span>.matches(<span class="string">&quot;[a-z&amp;[def]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^bc]] a-z和非bc的交集。 等同于[ad-z]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------6--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^m-p]] a到和和除了m到p的交集。 等同于[a-lq-z]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------7--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>预定义字符(只匹配一个字符)</strong></p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>任何字符</td></tr><tr><td>\d</td><td>一个数字：[0-9]</td></tr><tr><td>\D</td><td>非数字：[^0-9]</td></tr><tr><td>\s</td><td>一个空白字符[\t\n\x0B\f\r]</td></tr><tr><td>\S</td><td>非空白字符[^\s]</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9] 英文、数字、下划线</td></tr><tr><td>\W</td><td>[^\w]  一个非单词字符</td></tr></tbody></table><p><strong>数量词</strong></p><p>X?     X，一次或0次</p><p>X* X，零次或多次</p><p>X+ X，一次或多次</p><p>X{n}X，至少n次</p><p>X{n,m}至少n但不超过m次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  \  转义字符  改变后面那个字符原来的含义</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// .表示任意一个字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;..&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你a&quot;</span>.matches(<span class="string">&quot;..&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// \\d只能是任意一个数字 简单来记：两个\\表示一个\</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;22&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// \\w表示只能是一位单词字符 [a-zA-Z_0-9]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;_&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;W&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1w&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// \\W 非单词字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;\\W&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//以上正则表达式只能校验单个字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//必须是数字 字母 下划线 至少6位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;22138ws32&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_f&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//必须是数字和字符 必须是4位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[a-zA-Z_0-9]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23df&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;\\w&amp;&amp;[^-]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、ArrayList"><a href="#三、ArrayList" class="headerlink" title="三、ArrayList"></a>三、ArrayList</h2><h3 id="1-ArrayList的构造与添加方法"><a href="#1-ArrayList的构造与添加方法" class="headerlink" title="1.ArrayList的构造与添加方法"></a>1.ArrayList的构造与添加方法</h3><p> ArrayList构造方法：<br>         public ArrayList();创建一个空的对象集合</p><p>  ArrayList添加方法：<br>         public boolean add(E e);&#x2F;&#x2F;将指定元素追加到此集合的末尾<br>         public void add(int index, E element);&#x2F;&#x2F;在此集合的指定位置插入指定的元素   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  ArrayList构造方法：</span></span><br><span class="line"><span class="comment">         public ArrayList();创建一个空的对象集合</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">  ArrayList添加方法：</span></span><br><span class="line"><span class="comment">         public boolean add(E e);//将指定元素追加到此集合的末尾</span></span><br><span class="line"><span class="comment">         public void add(int index, E element);//在此集合的指定位置插入指定的元素   </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">case1</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//创建一个空的对象</span></span><br><span class="line">       ArrayList&lt;String&gt; array=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">       <span class="comment">//在集合末尾追加元素</span></span><br><span class="line">       System.out.println(array.add(<span class="string">&quot;Hello&quot;</span>));<span class="comment">//返回的是boolean类型</span></span><br><span class="line">       array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">       array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">       <span class="comment">//在集合指定位置添加元素</span></span><br><span class="line">       array.add(<span class="number">1</span>,<span class="string">&quot;good&quot;</span>);</span><br><span class="line">       array.add(<span class="number">4</span>,<span class="string">&quot;people&quot;</span>);</span><br><span class="line">       <span class="comment">//输出集合</span></span><br><span class="line">       System.out.println(<span class="string">&quot;array : &quot;</span>+array);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、ArrayList的常用方法"><a href="#2、ArrayList的常用方法" class="headerlink" title="2、ArrayList的常用方法"></a>2、ArrayList的常用方法</h3><p>public boolean remove(Object o);删除指定元素，返回删除是否成功</p><p> public E remove(int index);删除指定索引位置上的元素，并返回删除元素</p><p> public E set(int index, E element);修改指定位置处的元素，返回被修改的元素</p><p> public E get(int index);返回指定索引处的元素</p><p> public int size();返回集合中元素的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList;</span><br><span class="line"><span class="comment">//ArrayList的常用方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public boolean remove(Object o);删除指定元素，返回删除是否成功</span></span><br><span class="line"><span class="comment"> public E remove(int index);删除指定索引位置上的元素，并返回删除元素</span></span><br><span class="line"><span class="comment"> public E set(int index, E element);修改指定位置处的元素，返回被修改的元素</span></span><br><span class="line"><span class="comment"> public E get(int index);返回指定索引处的元素</span></span><br><span class="line"><span class="comment"> public int size();返回集合中元素的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">case2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">ArrayList&lt;String&gt; array=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">array.remove(<span class="number">0</span>);</span><br><span class="line">array.remove(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="comment">//修改元素</span></span><br><span class="line">array.set(<span class="number">1</span>,<span class="string">&quot;begin&quot;</span>);</span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;下标为2的元素为：&quot;</span>+array.get(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//获取集合元素个数</span></span><br><span class="line">System.out.println(<span class="string">&quot;集合中元素个数为：&quot;</span>+array.size());</span><br><span class="line">System.out.println(<span class="string">&quot;array:&quot;</span>+array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、面向对象编程"><a href="#四、面向对象编程" class="headerlink" title="四、面向对象编程"></a>四、面向对象编程</h2><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>在软件系统中，类不是孤立存在的，类与类之间存在各种关系。根据类与类之间的耦合度从弱到强排列，UML 中的类图有以下几种关系：依赖关系、关联关系、聚合关系、组合关系、泛化关系和实现关系。其中泛化和实现的耦合度相等，它们是最强的。</p><p>1.依赖关系</p><p>依赖（Dependency）关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。</p><p>2.关联关系</p><p>关联（Association）关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联可以是双向的，也可以是单向的。在 UML 类图中，双向的关联可以用带两个箭头或者没有箭头的实线来表示，单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色。</p><p>3.聚合关系</p><p>聚合（Aggregation）关系是 关联关系的一种，是强关联关系，是整体和部分之间的关系，是 has-a 的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。</p><p>4.组合关系</p><p>组合（Composition）关系也是 关联关系的一种，也表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系，是 cxmtains-a 关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。</p><p>5.泛化（继承）关系</p><p>泛化（Generalization）关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系，是 is-a 的关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。</p><p>6.实现关系</p><p>实现（Realization）关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。</p><p>异同分析</p><ul><li><p>聚合和组合的区别：<br>聚合是个体离开了整体，依然可以存在.<br>组合是个体和整体不可以分开，个体不能离开整体单独存在.</p></li><li><p>依赖，关联 和聚合，组合的区别：<br>依赖，关联 : 类之间的关系是在同一层次上.<br>聚合，组合: 类之间的关系表现为整体和部分</p></li></ul><p>在代码层面的体现方式</p><ul><li><p>依赖：<br>一般情况下，依赖关系体现为：局域变量、方法的形参(返回值)、对静态方法的调用。</p></li><li><p>关联：</p><p>一般情况下，关联（组合，聚合都是关联关系的一种）关系体现为：成员变量</p></li></ul><h3 id="1-继承"><a href="#1-继承" class="headerlink" title="1.继承"></a>1.继承</h3><p>在Java语言中，一个类继承另一个类需要使用关键字extends，关键字extends的使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">child</span> <span class="keyword">extends</span> <span class="title class_">parent</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Java只支持单继承，即一个类只有一个父类，子类在继承父类的方法后，创建子类对象的同时也会调用父类的构造方法，其中会先执行父类的构造方法，再执行子类的构造方法。子类继承父类后，可以调用父类创建好的方法和属性。</p><p>继承的好处与弊端：</p><p>好处：</p><ul><li>提高了代码的复用性</li><li>提高了代码的维护性</li></ul><p>弊端：</p><ul><li>继承让类与类之间产生了关系，类的耦合性增强了。当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</li></ul><hr><p>继承中变量的访问特点</p><p>在子类方法中访问一个变量</p><ol><li>子类局部范围内找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>如果没有就会报错（不考虑父亲的父亲)</li></ol><hr><p><mark>super</mark>关键字</p><p>super关键字和this关键字的用法相似</p><ul><li>this代表本类对象的引用</li><li>super代表父类存储空间的标识（可以理解为父类对象引用）</li></ul><table><thead><tr><th>关键字</th><th>访问成员变量</th><th>访问构造方法</th><th>访问成员方法</th></tr></thead><tbody><tr><td>this</td><td>this.成员变量 访问本类成员变量</td><td>this(……) 访问本类构造方法</td><td>this.成员方法（……）访问本类成员方法</td></tr><tr><td>super</td><td>super.成员变量 访问父类成员变量</td><td>super(……) 访问父类构造方法</td><td>super.成员方法（……）访问父类成员方法</td></tr></tbody></table><hr><p><mark>instanceof</mark>关键字</p><p>该关键字可以用来判断是否一个类实现了某个接口或者用来判断一个实例化对象是否属于一个类，其返回类型是布尔类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Quadrangle</span>&#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Quadrangle</span>&#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circular</span>&#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Quadrangle q=<span class="keyword">new</span> <span class="title class_">Quadrangle</span>();</span><br><span class="line">        Square s=<span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">        System.out.println(q <span class="keyword">instanceof</span> Square);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承中构造方法的访问特点</p><p>子类中所有的构造方法默认都会访问父类中无参的构造方法</p><ul><li>子类会继承父类中的数据，可能还会使用父类中的数据。所以，子类初始化前，一定要先完成父类数据的初始化</li><li>每一个子类构造方法的第一条语句默认为: super()</li></ul><p>如果父类中没有无参构造方法，只有带参构造方法，有两种解决方案：</p><ul><li>通过使用super关键字去显式的调用父类的带参构造方法</li><li>在父类中提供一个无参构造方法</li></ul><hr><p>继承中成员方法的访问特点</p><p>通过子类对象访问一个方法</p><ol><li>子类成员范围中找</li><li>父类范围成员找</li><li>如果都没有则会报错（不考虑父亲的父亲）</li></ol><hr><p>方法重写：</p><ul><li>子类中出现了和父类一样的方法声明</li></ul><p>应用：</p><ul><li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，既沿袭了父类的功能，又定义了子类特有的内容</li></ul><p><mark>@Override</mark></p><ul><li>是一个注解</li><li>可以帮助我们检查重写方法的方法声明的正确性</li></ul><p>注意事项：</p><ul><li>私有方法不能被重写（父类私有成员子类不能继承）</li><li>子类方法的访问权限不能更低（public&gt;默认&gt;私有）</li></ul><hr><p>Java继承中注意事项：</p><ul><li>Java中类只支持单继承，不支持多继承</li><li>Java中类支持多层继承</li></ul><hr><p>修饰符</p><p>1.包的概述与使用</p><p>其实就是文件夹，作用是对类进行分类管理</p><p>包的定义格式：</p><p>package 包名；（多级包.分开)</p><p>带包的Java类编译和执行</p><ul><li><p>手动建包：按照以前的格式编译java文件 javac   xxx.java</p><p>​                   手动创建包                                       在x盘建立文件夹com然后在com下建立文件夹itheima</p><p>​                   把class文件放到包的最里面             把xxx.class文件放到com.itheima这个文件夹下</p><p>​                   带包执行                                          java  com.itheima.xxx</p></li><li><p>自动建包：javac-d .xxx.java                                            java com.itheima.xxx</p></li></ul><p>2.导包</p><p>使用不同包下的类时，使用的时候要写类的全路径，写起来太麻烦了，为了简化带包的操作，Java提供了导包的功能</p><p>导包的格式：</p><p>import 包名；</p><p>3.修饰符</p><table><thead><tr><th>修饰符</th><th>同一个类中</th><th>同一个包中子类无关类</th><th>不同包的子类</th><th>不同包的无关类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>默认</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>状态修饰符：</p><p><mark>final</mark> 最终 可以修饰成员方法，成员变量，类</p><p>final修饰的特点</p><ul><li>修饰方法：表明该方法是最终方法，不能被重写</li><li>修饰变量：表明该变量是常量，不能再次被赋值</li><li>修饰类：表明该类是最终类，不能被继承</li></ul><p>final修饰局部变量</p><ul><li>变量是基本数据类型：final修饰指的是基本数据类型的数据值不能发生改变</li><li>变量是引用类型：final修饰指的是引用类型的地址值不能改变，但是地址里面的内容是可以改变的</li></ul><p><mark>static</mark> 静态 可以修饰成员方法和成员变量</p><p>static修饰的特点</p><ul><li>被类的所有对象共享（这也是判断我们是否使用静态关键字的条件）</li><li>可以通过类名调用（也可以通过对象调用）</li></ul><p>static访问特点</p><p>非静态的成员方法</p><ul><li>能访问静态的成员变量</li><li>能访问非静态的成员变量</li><li>能访问静态的成员方法</li><li>能访问非静态的成员方法</li></ul><p>静态的成员方法</p><ul><li>能访问静态的成员方法</li><li>能访问静态的成员变量</li></ul><hr><h3 id="2-多态"><a href="#2-多态" class="headerlink" title="2.多态"></a>2.多态</h3><p>同一个对象，在不同时刻表现出来的不同的形态</p><p>举例：</p><p>猫 cat&#x3D; new 猫（）；</p><p>动物 animal &#x3D;new 猫（）;</p><p>这里猫在不同时刻表现出来了不同的形态，这就是多态。</p><p>多态的前提和体现</p><ul><li>有继承&#x2F;实现关系</li><li>有方法重写</li><li>有父类引用指向子类对象</li></ul><hr><p>多态中成员的访问特点</p><p>成员变量：编译看左边，执行看左边</p><p>成员方法：编译看左边，执行看右边（因为成员方法有重写，而成员变量没有重写）</p><hr><p>多态的好处与弊端</p><p>好处：提高了程序的扩展性</p><p>具体实现：定义方法的时候，使用父类型作为参数，将来使用的时候，使用具体的子类型参与操作</p><p>弊端：不能使用子类的特有功能</p><p><mark><strong>执行顺序</strong>：先执行父类的静态语句（哪句语句在前先执行）再执行子类的静态语句（哪句语句在前先执行），再执行父类的代码块、成员属性赋值（哪个在前哪个先执行），后执行父类的构造方法，最后执行子类的代码块、成员属性赋值（哪个在前哪个先执行），后执行子类的构造方法。</mark></p><hr><p>多态中的转型</p><ul><li><p>向上转型</p><p>从子到父</p><p>父类引用指向子类对象</p></li><li><p>向下转型</p><p>从父到子</p><p>父类引用转化为子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//eat（）方法已重写</span></span><br><span class="line"><span class="comment">//playGame()方法未被重写</span></span><br><span class="line">Animal a=<span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//向上转型</span></span><br><span class="line">        a.eat();</span><br><span class="line"><span class="comment">//向下转型</span></span><br><span class="line">        Cat c=(Cat)a;</span><br><span class="line">        c.eat();</span><br><span class="line">        c.playGame();</span><br></pre></td></tr></table></figure><hr><p>抽象类</p><p>在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类</p><p>抽象类的特点：</p><ul><li><p>抽象类和抽象方法必须使用<mark>abstract</mark>关键字修饰</p><p>​     public abstract class 类名 {}</p><p>​     public abstract void eat();</p></li><li><p>抽象类中不一定有抽象方法，但有抽象方法的一定是抽象类</p></li><li><p>抽象类不能实例化对象</p></li><li><p>抽象类可以参考多态的形式，通过子类对象实例化，这叫抽象类多态</p></li><li><p>抽象类的子类</p><p>​要么重写抽象类中的所有抽象方法</p><p>​    要么该子类也必须是一个抽象类</p></li></ul><p>抽象类的成员特点：</p><ul><li><p>成员变量</p><p>​可以是变量，也可以是常量</p></li><li><p>构造方法</p><p>​有构造方法，但是不能实例化，构造方法用于子类访问父类数据的初始化</p></li><li><p>成员方法</p><p>​可以有抽象方法：限定子类必须完成某些任务</p><p>​也可以有非抽象类方法：提高代码复用性</p></li></ul><hr><p>接口：</p><p>接口就是一种公共的规范标准，只要符合规范标准，大家都可以通用</p><p>Java中的接口更多的体现在对行为的抽象</p><p>接口的特点：</p><ul><li><p>接口用关键字<mark>interface</mark>修饰</p><p>​public interface 接口名 {}</p></li><li><p>类实现接口用<mark>implements</mark>表示</p><p>​public class 类名 implements 接口名{}</p></li><li><p>接口不能实例化</p><p>​接口实例参照多态的方式，通过实现类对象实例化，这叫接口多态</p><p>​多态的形式：具体类多态，抽象类多态，接口多态</p><p>​多态的前提：有继承或者实现关系；有方法重写；有父（类&#x2F;接口）引用指向（子&#x2F;实现）类对象</p></li><li><p>接口的实现类</p><p>​要么重写接口中的所有抽象类方法，要么是抽象类</p></li></ul><p>接口的成员特点：</p><ul><li><p>成员变量</p><p>​只能是常量，默认修饰符：<mark>public static final</mark></p></li><li><p>构造方法：</p><p>​接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在</p><p>​一个类如果没有父类，默认继承超类Object类</p></li><li><p>成员方法：</p><p>​只能是抽象方法，默认修饰符：public abstract</p></li></ul><hr><p>类和接口之间的关系：</p><ul><li><p>类和类的关系</p><p>​继承关系，只能单继承，但是可以多层继承</p></li><li><p>类和接口之间的关系</p><p>​实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p></li><li><p>接口和接口之间的关系</p><p>​继承关系，可以单继承，也可以多继承</p></li></ul><p>抽象类和接口的区别：</p><ul><li><p>成员区别</p><p>​抽象类 变量，常量；有构造方法；有抽象方法，也有非抽象方法</p><p>​接口常量；抽象方法</p></li><li><p>关系区别</p><p>​类与类继承，单继承</p><p>​类与接口实现，可以单实现，也可以多实现</p><p>​接口与接口继承，单继承，多继承</p></li><li><p>设计理念区别</p><p>​抽象类对类抽象，包括属性，行为</p><p>​接口对行为抽象，主要是行为</p></li></ul><p>抽象类是对事物的抽象，而接口是对行为的抽象</p></li></ul><h3 id="3-内部类"><a href="#3-内部类" class="headerlink" title="3.内部类"></a>3.内部类</h3><p>1.类名作为形参和返回值</p><ul><li>方法的形参是类名，其实需要的是该类的对象</li><li>方法的返回值值是类名，其实返回的是该类的对象</li></ul><p>2.抽象类名作为形参和返回值</p><ul><li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</li><li>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</li></ul><p>3.接口名作为形参和返回值</p><ul><li>方法的形参是接口名，其实需要的是该接口的实现类对象</li><li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li></ul><hr><p>内部类：就是在一个类中定义一个类。</p><p>内部类的定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">    修饰符 class 类名&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类的访问特点：</p><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象</li></ul><p>成员内部类不止可以在外部类中使用，在其他类中也可以使用。语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类 outer =<span class="keyword">new</span> 外部类();</span><br><span class="line">外部类.内部类 inter=<span class="keyword">new</span> <span class="title class_">outer</span>.new 内部类();</span><br></pre></td></tr></table></figure><ul><li>如果在外部类和非静态方法之外实例化内部类对象，需要使用“外部类.内部类”的形式指向该对象的类型。</li><li>内部类对象会依赖于外部类对象，除非已经存在一个外部类对象，否则类中不会出现内部类对象。</li></ul><p>使用<mark>this</mark>关键字获取内部类和外部类之间的引用</p><p>​如果在外部类中定义的成员变量与内部类的成员变量名称相同，可以使用this关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TheSameName</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="number">11</span>;</span><br><span class="line">            x++;<span class="comment">//局部变量x++</span></span><br><span class="line">            <span class="built_in">this</span>.x++;<span class="comment">//内部类中的成员变量x++</span></span><br><span class="line">            TheSameName.<span class="built_in">this</span>.x++;<span class="comment">//外部类中的成员变量x++</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类：</p><p>匿名内部类是在创建对象时才会编写类体的一种写法，匿名类的特点是“<mark>现用现写</mark>”，其语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类/接口&#123;</span><br><span class="line">    子类实现的内容</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：最后一个大括号之后有<strong>分号</strong></p><p>匿名类的特点：</p><ul><li>匿名类不能写构造方法</li><li>匿名类不能定义静态的成员变量</li><li>如果匿名类创建的对象没有赋值给任何引用变量，会导致该对象用完一次后就会被Java虚拟机销毁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用匿名类创建一个抽象狗类的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    String Color;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Dog temp=<span class="keyword">new</span> <span class="title class_">Dog</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;四腿狂奔&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;嗷呜~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        temp.Color=<span class="string">&quot;灰色&quot;</span>;</span><br><span class="line">        temp.move();</span><br><span class="line">        temp.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：匿名内部类编译以后，会产生以“外部类名$序号”为名称的.class文件，序号以1~n排列，分别代表1-n个匿名内部类。</p><h3 id="4-Object类"><a href="#4-Object类" class="headerlink" title="4.Object类"></a>4.Object类</h3><p>Java中所有类都直接或者间接继承了java.lang.Object类.Object类是比较特殊的类，它是所有类的父类，是Java类中的最高层类。</p><p>Object类的常用方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getClass()</td><td>它会返回对象执行时的Class实例，此外也可以通过此实例调用getName()方法取得类名。getClass().getName();</td></tr><tr><td>toString()</td><td>将一个对象返回以字符串的形式，它会返回一个String实例。</td></tr><tr><td>equals()</td><td>“&#x3D;&#x3D;”比较的是两个对象引用地址是否相等，而equals()比较的是两个对象的实际内容。</td></tr></tbody></table><p>toString()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toString 返回对象的字符串表示形式</span></span><br><span class="line">        <span class="comment">//包名 + 类名 + 地址值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> obj.toString();</span><br><span class="line">        System.out.println(str1);   <span class="comment">//java.lang.Object@723279cf</span></span><br><span class="line">        System.out.println(obj);    <span class="comment">//直接打印也可以获得相同结果</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * System：类名</span></span><br><span class="line"><span class="comment">        * out：静态变量</span></span><br><span class="line"><span class="comment">        * System.out：获取打印的对象</span></span><br><span class="line"><span class="comment">        * print()：方法，会调用toString</span></span><br><span class="line"><span class="comment">        * 参数：表示打印的内容</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//如果要打印对象属性，可以重写toString方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>equals()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//IDEA中使用 alt + insert，快捷重写equals方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//同一个对象，直接true</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;  <span class="comment">//强转成子类对象</span></span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);    <span class="comment">//进行对比</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、常用API"><a href="#五、常用API" class="headerlink" title="五、常用API"></a>五、常用API</h2><h3 id="1-Math类"><a href="#1-Math类" class="headerlink" title="1.Math类"></a>1.Math类</h3><p>Math包括执行基本数学运算的方法，如基本指数，对数，平方根和三角函数。</p><p>调用形式：</p><p>Math.数学方法 </p><p>也存在一些常用数字常量 如：Math.PI        Math.E</p><p>1.三角函数方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sin</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//返回角的正弦值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">cos</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">// 返回角的余弦值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">tan</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//返回角的正切值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">asin</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">// 返回一个值的反正弦</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">acos</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//返回一个值的反余弦</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">atan</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//返回一个值的反正切</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">toRadians</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//将角度转化为弧度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">toDegrees</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//将弧度转化为角度</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>2.指数函数方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">exp</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//获取e的a次方，即取e^a的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">log</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//用于取自然对数，即lna的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">log10</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//用于取底数为10的a的对数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sqrt</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//用于取a的算术平方根，其中a的值不能为负值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">cbrt</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//用于取a的立方根</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>;<span class="comment">//用于取a的b次方</span></span><br></pre></td></tr></table></figure><p>3.取整函数方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">ceil</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//返回大于等于参数的最小整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">floor</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//返回小于等于参数的最小整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">rint</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//返回与参数最接近的整数，若存在两个同样接近的数，取偶数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//四舍五入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//四舍五入，然后强制转换为长整型</span></span><br></pre></td></tr></table></figure><p>4.取最大值、最小值、绝对值方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>;<span class="comment">//取最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>/<span class="type">long</span>/<span class="type">float</span>/<span class="type">double</span> <span class="title function_">min</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>;<span class="comment">//取最小值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>/<span class="type">long</span>/<span class="type">float</span>/<span class="type">double</span> <span class="title function_">abs</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//返回int/long/float/double类型参数的绝对值</span></span><br></pre></td></tr></table></figure><h3 id="2-BigInteger类"><a href="#2-BigInteger类" class="headerlink" title="2.BigInteger类"></a>2.BigInteger类</h3><p>BigInteger类的数字范围比Integer类的大得多，BigInteger类支持任意精度的整数，使用BigInteger类进行运算可以准确无误地表示任何大小的整数值并且不会丢失任何信息。语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">twoInstance</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="comment">//参数2的双引号不能省略，因为参数是以字符串的形式存在的</span></span><br></pre></td></tr></table></figure><p>BigInteger类的常用运算方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">add</span><span class="params">(BigInteger val)</span>;<span class="comment">//做加法运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">subtract</span><span class="params">(BigInteger val)</span>;<span class="comment">//做减法运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">multiply</span><span class="params">(BigInteger val)</span>;<span class="comment">//做乘法运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">divide</span><span class="params">(BigInteger val)</span>;<span class="comment">//做除法运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">remainder</span><span class="params">(BigInteger val)</span>;<span class="comment">//做取余运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger[] divideAndRemainder(BigInteger val);<span class="comment">//用数组返回余数和商，数组的第一个值为商，第二个值为余数</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">pow</span><span class="params">(<span class="type">int</span> exponent)</span>;<span class="comment">//进行取参数的exponent次方操作</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">negate</span><span class="params">()</span>;<span class="comment">//取相反数</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">shiftLeft</span><span class="params">(<span class="type">int</span> n)</span>;<span class="comment">//数字左移n位，若n为负数，则右移</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">shiftRight</span><span class="params">(<span class="type">int</span> n)</span>;<span class="comment">//数字右移n位，若n为负数，则左移</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">and</span><span class="params">(BigInteger val)</span>;<span class="comment">//与操作</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">or</span><span class="params">(BigInteger val)</span>;<span class="comment">//或操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(BigInteger val)</span>;<span class="comment">//做数字比较操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object x)</span>;<span class="comment">//当参数x是BigInteger类并且数值与对象实例的数值相等时，返回true</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">max</span><span class="params">(BigIntegr val)</span>;<span class="comment">//返回较大的数值</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">min</span><span class="params">(BigInteger val)</span>;<span class="comment">//返回较小的数值</span></span><br></pre></td></tr></table></figure><p>样例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        BigInteger x=<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;222222222&quot;</span>);</span><br><span class="line">        BigInteger y=<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;111111111&quot;</span>);</span><br><span class="line">        BigInteger z=x.add(y);<span class="comment">//加法</span></span><br><span class="line">        BigInteger c=x.subtract(y);<span class="comment">//减法</span></span><br><span class="line">        BigInteger v=x.multiply(y);<span class="comment">//乘法</span></span><br><span class="line">        BigInteger u=x.divide(y);<span class="comment">//除法</span></span><br><span class="line">        BigInteger r=x.remainder(y);<span class="comment">//取余</span></span><br><span class="line">        BigInteger Max=x.max(y);<span class="comment">//取最大值</span></span><br><span class="line">        BigInteger Min=x.min(y);<span class="comment">//取最小值</span></span><br><span class="line">        BigInteger yu=x.and(y);<span class="comment">//与运算</span></span><br><span class="line">        BigInteger huo=x.or(y);<span class="comment">//或运算</span></span><br><span class="line">        BigInteger oppo=x.negate();<span class="comment">//取相反数</span></span><br><span class="line">        BigInteger exp=x.pow(<span class="number">2</span>);<span class="comment">//进行取参数的exponent次方操作</span></span><br><span class="line">        <span class="type">int</span> ans=x.compareTo(y);<span class="comment">//做数字的比较操作,大于参数返回正整数，等于返回0，小于返回负整数</span></span><br><span class="line">        BigInteger left=x.shiftLeft(<span class="number">1</span>);<span class="comment">//将数字左移n位，如果n为负数，做右移操作</span></span><br><span class="line">        BigInteger right=x.shiftRight(<span class="number">1</span>);<span class="comment">//将数字右移n位，如果n为负数，做左移操作</span></span><br><span class="line">        BigInteger []arr=x.divideAndRemainder(y);<span class="comment">//用数组返回余数和商，结果数组中第一个值为商，第二个值为余数</span></span><br><span class="line">        <span class="type">boolean</span> flag=x.equals(<span class="number">12</span>);<span class="comment">//当参数x是BigInteger类型的数字并且数值与对象实例的数值相等时，返回true，否则返回false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加法运算后的结果：&quot;</span>+z);</span><br><span class="line">        System.out.println(<span class="string">&quot;减法运算后的结果：&quot;</span>+c);</span><br><span class="line">        System.out.println(<span class="string">&quot;乘法运算后的结果：&quot;</span>+v);</span><br><span class="line">        System.out.println(<span class="string">&quot;除法运算后的结果：&quot;</span>+u);</span><br><span class="line">        System.out.println(<span class="string">&quot;取余运算后的结果：&quot;</span>+r);</span><br><span class="line">        System.out.println(<span class="string">&quot;两者中的最大值为：&quot;</span>+Max);</span><br><span class="line">        System.out.println(<span class="string">&quot;两者中的最小值为：&quot;</span>+Min);</span><br><span class="line">        System.out.println(<span class="string">&quot;与操作后的结果：&quot;</span>+yu);</span><br><span class="line">        System.out.println(<span class="string">&quot;或操作后的结果：&quot;</span>+huo);</span><br><span class="line">        System.out.println(<span class="string">&quot;相反数为：&quot;</span>+oppo);</span><br><span class="line">        System.out.println(<span class="string">&quot;参数的2次方结果为：&quot;</span>+exp);</span><br><span class="line">        System.out.println(<span class="string">&quot;做比较操作后的结果为：&quot;</span>+ans);</span><br><span class="line">        System.out.println(<span class="string">&quot;做左移1位后的结果:&quot;</span>+left);</span><br><span class="line">        System.out.println(<span class="string">&quot;做右移1位后的结果：&quot;</span>+right);</span><br><span class="line">        System.out.println(<span class="string">&quot;商：&quot;</span>+arr[<span class="number">0</span>]+<span class="string">&quot; 余数：&quot;</span>+arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;判断参数与12是否相等：&quot;</span>+flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-System类"><a href="#3-System类" class="headerlink" title="3.System类"></a>3.System类</h3><p>System类是JDK提供的系统类，该类是用<mark>final</mark>修饰的，所以不允许继承，System类提供了很多系统层面的操作方法，并且这些方法全部都是静态的。以下为System类常用方法：</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>currentTimeMillis()</td><td>返回以毫秒为单位的当前时间</td></tr><tr><td>exit(int status)</td><td>通过启动虚拟机的关闭序列，终止当前正在运行的Java虚拟机，此方法从不正常返回，可以将变量作为一个状态码，根据惯例，非零的状态码表示非正常终止；0表示正常终止</td></tr><tr><td>Map<String String>getenv()</td><td>返回一个不能修改的当前系统环境的字符串映射视图</td></tr><tr><td>getenv(String name)</td><td>获取指定的环境变量值</td></tr><tr><td>getProperties()</td><td>确定当前的系统属性</td></tr><tr><td>getProperty(String key)</td><td>获取用指定键描述的系统属性</td></tr><tr><td>setIn(InputStream in)</td><td>重新分配“标准输入流”</td></tr></tbody></table><p>System类提供了标准输入、标准输出和错误输出流，即System类提供了三个静态对象：in、out、err.在控制台输出字符串，有两种方法：</p><ul><li>不会自动换行的print()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>会自动换行的println()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;书籍是人类进步的阶梯&quot;</span>);</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>System.out.println(“\n”);   &#x2F;&#x2F;会打印两个空行</li><li>System.out.print();          &#x2F;&#x2F;没有参数会报错</li></ul><p>计时</p><p>利用System.currentTimeMillis()方法可以用来记录程序的运行时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemTimeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">long</span> start=System.currentTimeMillis();<span class="comment">//程序开始记录时间</span></span><br><span class="line">        String str=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            str+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> end=System.currentTimeMillis();<span class="comment">//记录循环结束时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;循环用时为：&quot;</span>+(end-start)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Arrays类"><a href="#4-Arrays类" class="headerlink" title="4.Arrays类"></a>4.Arrays类</h3><p>Array类包含于用于操作数组的各种方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(int[] a)</td><td>返回指定数组的内容的字符串表达形式</td></tr><tr><td>public static void sort(int[] a)</td><td>按照数字顺序排列指定的数组</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">20</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">57</span>,<span class="number">13</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类的设计思想：</p><ul><li>构造方法用private修饰</li><li>成员用public static修饰</li></ul><h3 id="5-基本类型包装类"><a href="#5-基本类型包装类" class="headerlink" title="5.基本类型包装类"></a>5.基本类型包装类</h3><p>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p><p>常用的操作之一：用于基本数据类型和字符串之间的转换</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>Integer类的概述和使用</p><p>Integer:包装一个对象中的原始类型int的值</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public Integer(int value)</td><td>根据int值创建Integer对象（过时）</td></tr><tr><td>public Integer(String s)</td><td>根据String值创建Integer对象（过时）</td></tr><tr><td>public static Integer valueOf(int i)</td><td>返回指定的int值的Integer实例</td></tr><tr><td>public static Integer valueOf(String s)</td><td>返回一个保存指定值的Interger对象String</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Integer i1=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);<span class="comment">//过时</span></span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        Integer i2=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;100&quot;</span>);<span class="comment">//过时 字符串里面的内容必须由数字组成</span></span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        Integer i3=Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line">        Integer i4=Integer.valueOf(<span class="string">&quot;100&quot;</span>);<span class="comment">//字符串里面的内容必须由数字组成</span></span><br><span class="line">        System.out.println(i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>int和String的相互转换</p><p>1.int →String类型</p><ul><li>public static String valueOf(int i):返回int类型参数的字符串表示形式，该方法是String类中的方法。</li></ul><p>2.String →int类型</p><ul><li>public  static int parseInt(String s);将字符串解析成int类型，该方法是Integer类中的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int -- String 的相互转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> number=<span class="number">100</span>;</span><br><span class="line">        <span class="comment">///int -&gt;String</span></span><br><span class="line">        <span class="comment">//方式1 +</span></span><br><span class="line">        String s=<span class="string">&quot;&quot;</span>+number;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//方式2 public static String valueOf(int i)</span></span><br><span class="line">        String s2=String.valueOf(number);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//String -&gt; int</span></span><br><span class="line">        String str=<span class="string">&quot;1000&quot;</span>;</span><br><span class="line">        <span class="comment">//方式1 String -&gt; Integer -&gt; int</span></span><br><span class="line">        Integer temp=Integer.valueOf(str);</span><br><span class="line">        <span class="type">int</span> x=temp.intValue();</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        <span class="comment">//方式2 public static int parseInt(String s)</span></span><br><span class="line">        <span class="type">int</span> y=Integer.parseInt(str);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-日期时间类"><a href="#6-日期时间类" class="headerlink" title="6.日期时间类"></a>6.日期时间类</h3><h4 id="1-Date类"><a href="#1-Date类" class="headerlink" title="1.Date类"></a>1.Date类</h4><p>Date类用于表示日期和时间，使用该类表示时间需要使用其构造方法来创建对象，其构造方法以及说明表如下。</p><p>​</p><table><thead><tr><th>构造方法</th><th>方法说明</th></tr></thead><tbody><tr><td>Date()</td><td>分配Date对象并初始化对象，以表示分配它的时间(精确到毫秒)</td></tr><tr><td>Date(long date)</td><td>分配Date对象并初始化此对象，以表示自标准基准时间(即1970年1月1日00：00：00GMT)起经过指定毫秒数date后的时间</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> timeMillis=System.currentTimeMillis();  <span class="comment">//当前系统时间所经历的毫秒数</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Date</span>(timeMillis);</span><br></pre></td></tr></table></figure><p>创建Date对象使用的是long型整数，而不是double型，这主要是因为double类型可能会损失精度。</p><p>​Date类的常用方法以及说明</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>after(Date when)</td><td>测试当前日期是否在指定日期之后</td></tr><tr><td>before(Date when)</td><td>测试当前日期是否在指定日期之前</td></tr><tr><td>getTime()</td><td>获取自1970年1月1日00：00：00GMT开始到现在所经过的毫秒数</td></tr><tr><td>setTime(long time)</td><td>设置当前Date对象所表示的日期时间值，该值用以1970年1月1日00：00：00GMT以后time毫秒的时间点</td></tr></tbody></table><p>案例1：</p><p>​获取当前的日期和时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDmo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Date date=<span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//创建现在的日期</span></span><br><span class="line">        <span class="type">long</span> value=date.getTime();<span class="comment">//获取毫秒数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;日期： &quot;</span>+date);</span><br><span class="line">        System.out.println(<span class="string">&quot;到现在所经历的毫秒数：&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日期时间格式化</p><p>​DateFormat类是日期时间格式化子类的抽象类，可以按照指定的格式对日期或时间进行格式化。DateFormat类提供了很多类方法，以获得基于默认或给定语言环境和多种格式化风格的默认日期时间Formatter,格式化主要包括四种风格：</p><p>SHORT：完全为数字，如12.13.52或3：30pm</p><p>MEDIUM：较长，如Jan 12, 1952</p><p>LONG：更长，如January 12，1953或3：39：32pm</p><p>FULL：完全指定，如Tuesday、April 12、1952AD或3：30：34pm PST</p><p>另外，使用DateFormat类还可以自定义日期时间的格式。要格式化一个当前语言环境下的日期，首先要创建一个DateFormat类的一个对象，由于它是抽象类，因此可以使用getDateInstance()进行创建，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateFormat</span> <span class="variable">df</span> <span class="operator">=</span> DateFormat.getDateLnstance();</span><br></pre></td></tr></table></figure><p>使用getDateInstance()方法获取的是所在国家或地区的标准日期格式，而使用getTimeInstance()获取的是当前所在国家或地区的时间格式，而使用getDateTimeInstance()获取的是当前国家或者地区的日期时间格式。</p><p>​DateFormat类的常用方法及其说明</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>format(Date date)</td><td>将一个Date对象实例格式化为日期&#x2F;时间字符串</td></tr><tr><td>getCalendar()</td><td>获取与此日期时间&#x2F;时间格式器关联的日历</td></tr><tr><td>getDateInstance()</td><td>获取日期格式器，该格式器具有默认语言环境的默认格式化风格</td></tr><tr><td>getTimeInstance()</td><td>获取时间格式器，该格式器具有默认语言环境的默认格式化风格</td></tr><tr><td>getDateTimeInstance()</td><td>获取日期&#x2F;时间格式器，该格式器具有默认语言环境的默认格式化风格</td></tr><tr><td>getInstance()</td><td>获取为日期&#x2F;时间使用SHORT风格的默认日期&#x2F;时间格式器</td></tr><tr><td>parse(String source)</td><td>将字符串解析成一个日期，并返回这个日期的Date对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDmo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="comment">// DateFormat df=DateFormat.getTimeInstance(DateFormat.LONG);</span></span><br><span class="line">       <span class="comment">// DateFormat df=DateFormat.getDateInstance(DateFormat.LONG);</span></span><br><span class="line">        DateFormat df=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG);</span><br><span class="line">        DateFormat df2=DateFormat.getInstance();</span><br><span class="line">        Date date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(df.format(date));</span><br><span class="line">        <span class="comment">//System.out.println(df.getCalendar());</span></span><br><span class="line">        System.out.println(df.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        System.out.println(df2.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​由于DateFormat类是一个抽象类，不能new创建实例对象。因此，出来使用getXXXinstance()方法创建其对象，还可以使用其子类，如SimpleDateFormat类，该类是一个以与语言环境相关的方式来格式化和分析日期的具体类，它允许进行格式化(日期→文本)、分析(文本→日期)和规范化。</p><p>​SimpleDateFormat的格式化字符</p><table><thead><tr><th>字母</th><th>日期或时间元素</th><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>G</td><td>Era标示符</td><td>Text</td><td>AD</td></tr><tr><td>y</td><td>年</td><td>Year</td><td>1996</td></tr><tr><td>M</td><td>年中的月份</td><td>Month</td><td>July;Jul;07</td></tr><tr><td>w</td><td>年中的天数</td><td>Number</td><td>27</td></tr><tr><td>W</td><td>月份中的天数</td><td>Number</td><td>2</td></tr><tr><td>D</td><td>年中的天数</td><td>Number</td><td>179</td></tr><tr><td>d</td><td>月份中的天数</td><td>Number</td><td>10</td></tr><tr><td>F</td><td>月份中的星期</td><td>Number</td><td>2</td></tr><tr><td>E</td><td>星期中的天数</td><td>Text</td><td>Tuesday;Tue</td></tr><tr><td>t</td><td>Am&#x2F;pm的标记</td><td>Text</td><td>PM</td></tr><tr><td>H</td><td>一天中的小时数(0~23)</td><td>Number</td><td>0</td></tr><tr><td>h</td><td>am&#x2F;pm中的小时数(1~12)</td><td>Number</td><td>12</td></tr><tr><td>k</td><td>一天中的小时数(1~24)</td><td>Number</td><td>24</td></tr><tr><td>K</td><td>am&#x2F;pm中的小时数(0~11)</td><td>Number</td><td>0</td></tr><tr><td>m</td><td>小时中的分钟数</td><td>Number</td><td>30</td></tr><tr><td>s</td><td>分钟中的秒数</td><td>Number</td><td>55</td></tr><tr><td>S</td><td>毫秒数</td><td>Number</td><td>978</td></tr><tr><td>z</td><td>时区</td><td>General time zone</td><td>PST</td></tr><tr><td>Z</td><td>时区</td><td>RFC 822 time zone</td><td>-800</td></tr></tbody></table><p>​常用时间格式</p><table><thead><tr><th>日期时间</th><th>对于的格式</th></tr></thead><tbody><tr><td>2021&#x2F;10&#x2F;25</td><td>yyyy&#x2F;MM&#x2F;dd</td></tr><tr><td>2021.10.25</td><td>yyyy.MM.dd</td></tr><tr><td>2021-09-14 13：20：43</td><td>yyyy-MM-dd HH:mm:ss</td></tr><tr><td>2021年10月21日 10时21分05秒 星期日</td><td>yyyy年MM月dd日 HH时mm分ss秒 EEEE</td></tr><tr><td>下午3时</td><td>ah时</td></tr><tr><td>今年已经过去了297天</td><td>今年已经过去了D天</td></tr></tbody></table><p>案例2：</p><p>​以中文形式打印当前的日期和时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDmo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        DateFormat df=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒 EEEE&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;各位观众大家好，现在是：&quot;</span>);</span><br><span class="line">        System.out.print(df.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        System.out.println(<span class="string">&quot;, 欢迎大家收看新闻&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-集合类"><a href="#7-集合类" class="headerlink" title="7.集合类"></a>7.集合类</h3><p>​集合可以看成一个容器，Java中提供了不同的集合类，这些类有不同的存储对象，同时提供了相应的方法，以方便用户对集合进行遍历、添加、删除和查找指定的对象。集合类与数组的不同之处是：数组长度是固定的，集合的长度是可变的；数组常用来存储基本类型的数据，集合用来存放对象的引用。常用的集合有List集合、Set集合和Map集合，其中List集合与Set集合继承了Collection接口，各接口还提供了不同的实现类。</p><h4 id="1-Collection接口"><a href="#1-Collection接口" class="headerlink" title="1.Collection接口"></a>1.Collection接口</h4><p>​Collection接口是层次结构中的根接口，构成Collection的单位称为元素。Collection接口通常不能直接使用，但该接口提供了添加元素、删除元素、管理数据的方法。由于List接口与Set接口都继承了Collection接口，因此这些方法对List集合与Set集合是通用的。Collection接口的常用方法如下：</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>add(E e)</td><td>将指定对象添加到集合中</td></tr><tr><td>remove(Object o)</td><td>将指定的对象从该集合中移除</td></tr><tr><td>isEmpty()</td><td>返回boolean值，用于判断当前集合是否为空</td></tr><tr><td>iterator()</td><td>返回在此Collection的元素上进行迭代的迭代器，用于遍历集合中的对象</td></tr><tr><td>size()</td><td>返回int型值，获取该集合中元素的个数</td></tr></tbody></table><p>​通常遍历集合，都是通过迭代器来实现</p><p>案例：</p><p>​向购物车添加商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Collection&lt;String&gt;list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//实例化集合对象</span></span><br><span class="line">        list.add(<span class="string">&quot;《Java从入门到精通》&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;《零基础学Java》&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;《Java编程思想》&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; it=list.iterator();<span class="comment">//创建迭代器</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;<span class="comment">//判断是否有下一个元素</span></span><br><span class="line">            String str=(String)it.next();<span class="comment">//获取集合中的元素</span></span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-List集合"><a href="#2-List集合" class="headerlink" title="2.List集合"></a>2.List集合</h4><p>1.List接口</p><p>​List接口继承了Collection接口，因此包含Collection接口中的所有方法。此外List接口还定义了两个重要的方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>get(int index)</td><td>获得指定索引位置的元素</td></tr><tr><td>set(int index,Object obj)</td><td>将集合中指定索引位置的对象修改为指定的对象</td></tr></tbody></table><p>2.List接口的实现类</p><ul><li>ArrayList类实现了可变的数组，允许保存所有元素，包括null，并可以根据索引位置对集合进行快速的随机访问。缺点是向指定的索引位置插入对象或者删除对象的速度较慢。</li><li>LinkedList类采用链表的结构保存对象。这种结构的优点是便于向集合中插入和删除元素。需要向集合中插入、删除对象时，使用LinkedList类实现的List集合的效率较高；但对于随机访问集合中的元素，使用LinkedList类实现List集合的效率较低。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;E&gt; list2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p><mark>注意：与数组相同，集合的索引也是从0开始的。</mark></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建集合对象</span></span><br><span class="line">        <span class="comment">//向集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.set(<span class="number">0</span>,<span class="string">&quot;d&quot;</span>);<span class="comment">//修改0索引位置上的元素值</span></span><br><span class="line">        <span class="type">int</span> i=(<span class="type">int</span>)(Math.random()*list.size());<span class="comment">//获得0~2的随机数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;随机获取集合中的元素：&quot;</span>+list.get(i));</span><br><span class="line">        list.remove(i);<span class="comment">//将指定索引位置中的元素从集合中移除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中剩下的元素分别是：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;list.size();j++)&#123;</span><br><span class="line">            System.out.println(list.get(j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Set集合"><a href="#3-Set集合" class="headerlink" title="3.Set集合"></a>3.Set集合</h4><p>​Set集合中的对象不按特定的方式排序，只是简单地把对象加入到集合中，但Set集合中不能包含重复对象。Set集合由Set接口和Set接口的实现类组成。因此包含Collection接口的所有方法。</p><p>​Set接口常用的实现类有HashSet类和TreeSet类，简述如下：</p><ul><li>HashSet类实现Set接口，由哈希表(实际上是一个HashMap实例)支持。它不保证Set集合的迭代顺序，特别是它不保证该顺序永恒不变。此类允许使用元素null。</li><li>TreeSet类不仅实现了Set接口，还实现了java.util.SortSet接口，因此TreeSet类实现的Set集合在遍历集合按照自然顺序递增排序，也可以按照指定比较器递增排序，即可以通过比较器对用TreeSet类实现的Set集合中的对象进行排序。</li></ul><p>​TreeSet类增加的方法</p><table><thead><tr><th>方法名称</th><th>功能描述</th></tr></thead><tbody><tr><td>first()</td><td>返回此Set集合中当前第一个(最低)元素</td></tr><tr><td>last()</td><td>返回此Set集合中当前最后一个(最高)元素</td></tr><tr><td>comparator()</td><td>返回对此Set集合中的元素是进行排序的比较器。如果该集合采用的是自然顺序排序，则返回null</td></tr><tr><td>headSet(E toElenment)</td><td>返回一个新的Set集合，新集合是toElement对象(不包含)之前的所有对象</td></tr><tr><td>subSet(E fromElement，E fromElement)</td><td>返回一个新的Set集合，新集合是fromElement对象(包含)与fromElement对象(不包含)之间的所有对象</td></tr><tr><td>tailSet(E fromElement)</td><td>返回一个新的Set集合，新集合包含fromElement对象(包含)之后的所有对象</td></tr></tbody></table><p>案例：</p><p>​使用TreeSet类完成自然(升序)排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        TreeSet&lt;Integer&gt; temp=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        temp.add(<span class="number">12</span>);</span><br><span class="line">        temp.add(<span class="number">21</span>);</span><br><span class="line">        temp.add(-<span class="number">3</span>);</span><br><span class="line">        temp.add(<span class="number">6</span>);</span><br><span class="line">        temp.add(<span class="number">85</span>);</span><br><span class="line">        <span class="comment">//temp.add(12);  重复元素不会被添加</span></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的第一个元素：&quot;</span>+temp.first());</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的最后一个元素：&quot;</span>+temp.last());</span><br><span class="line">        Iterator&lt;Integer&gt; it=temp.iterator();</span><br><span class="line">        System.out.print(<span class="string">&quot;temp中的集合元素为：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.print(it.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//headSet</span></span><br><span class="line">        Set&lt;Integer&gt; temp2=temp.headSet(<span class="number">12</span>);<span class="comment">//截取当前元素前面的元素，不包含当前元素</span></span><br><span class="line">        Iterator&lt;Integer&gt; it2=temp2.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;temp2中的集合元素为：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">                System.out.print(it2.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//tailSet</span></span><br><span class="line">        Set&lt;Integer&gt; temp3=temp.tailSet(<span class="number">12</span>);<span class="comment">//截取当前元素后面的元素，包含当前元素</span></span><br><span class="line">        Iterator&lt;Integer&gt; it3=temp3.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it3.hasNext())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;temp3中的集合元素为：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(it3.hasNext())&#123;</span><br><span class="line">                System.out.print(it3.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//subSet</span></span><br><span class="line">        Set&lt;Integer&gt; temp4=temp.subSet(<span class="number">6</span>,<span class="number">21</span>);<span class="comment">//截取两个元素之前的元素，包含前面元素，不包含后面元素</span></span><br><span class="line">        Iterator&lt;Integer&gt; it4=temp4.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it4.hasNext())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;temp4中的集合元素为：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(it4.hasNext())&#123;</span><br><span class="line">                System.out.print(it4.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Map集合"><a href="#4-Map集合" class="headerlink" title="4.Map集合"></a>4.Map集合</h4><p>​Map集合没有继承Collection接口，其提供的是key到value的映射。Map集合中不能包含相同的Key，每个key只能映射一个value.key还决定了存储对象在映射中的存储位置，但不是由key对象本身决定的，而是通过一种”散列技术”进行处理，产生一个散列码的整数值。散列码通常用作一个偏移量，该偏移量对应分配给映射的内存区域的起始位置，从而确定存储对象在映射中的存储位置。Map集合包含Map接口和Map接口的所有实现类。</p><p>1.Map接口</p><p>​Map接口提供了将key映射到值的对象。一个映射不能包含重复的key，每个key最多只能映射到一个值。除集合的常用方法外，Map接口还提供了下图所示方法：</p><p>​Map常用方法</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>put(K key，V value)</td><td>向集合中添加所指定的key与value的映射关系</td></tr><tr><td>containsKey(Object key)</td><td>如果此映射中包含指定key的映射关系，则返回true</td></tr><tr><td>contaninsValue(Object value)</td><td>如果此映射将一个或者多个key映射到指定值，则返回true</td></tr><tr><td>get(Object key)</td><td>如果存在指定的key对象，则返回该对象的值，否则返回null</td></tr><tr><td>keySet()</td><td>返回该集合中的所有key对象形成的Set集合</td></tr><tr><td>values()</td><td>返回该集合中的所有值对象形成的Collectin集合</td></tr><tr><td>remove(Object key)</td><td>从映射中删除与Key相关的映射</td></tr><tr><td>putAll(Map t)</td><td>将来自特定映像的所有元素添加给该映像</td></tr><tr><td>clear()</td><td>删除所有映射</td></tr></tbody></table><p>2.Map接口的实现类</p><ul><li><p>SortedMap接口 用来保持键的有序顺序</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>Comparator comparator()</td><td>返回对关键字进行排序时使用的比较器，如果使用Comparable接口的compareTo() 方法进行关键字比较，则返回null</td></tr><tr><td>Object firstKey()</td><td>返回映射中第一个(最低)关键字</td></tr><tr><td>Object lastKey()</td><td>返回映射中最后一个(最高)关键字</td></tr><tr><td>SortedMap subMap(Object fromKey，Object toKey)</td><td>返回从fromKey(包括)到toKey(不包括)范围内的元素的SortedMap视图(子集)</td></tr><tr><td>SortedMap headMap(Object toKey)</td><td>返回SortedMap的第一个视图，其内各元素的key都小于toKey</td></tr><tr><td>SortedMap tailMap(Object fromKey)</td><td>返回SortedMap中的最后一个视图，里面元素的key都大于或者等于fromKey</td></tr></tbody></table></li><li><p>HashMap是基于哈希表的Map接口实现，此实现提供所有可选的映射操作，并允许使用null值和null键，但必须保证键的唯一性。HashMap类通过哈希表对其内部的映射关系进行快速查找。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</p></li><li><p>TreeMap类不仅实现了Map接口，还实现了java.util.SortMap接口，因此集合中的映射关系具有一定的顺序。但在添加、删除、定位映射关系时，TreeMap类比HashMap类性能较差。由于TreeMap类实现的Map集合中的映射关系是根据键对象按照一定的顺序排列的，因此不允许键对象是null。</p></li></ul><h2 id="六、泛型"><a href="#六、泛型" class="headerlink" title="六、泛型"></a>六、泛型</h2><p><strong>泛型</strong>：是JDK5中引入的特性，它提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型 它的本质是<mark><strong>参数化类型</strong></mark>，也就是说所操作的数据类型被指定为一个参数，顾名思义，就是<strong>将类型由原来的具体的类型参数化，然后在使用&#x2F;调用时传入具体的类型</strong>，这种参数类型可以用在类、方法和接口中，分别称为泛型类、泛型方法、泛型接口</p><p>泛型定义格式：</p><ul><li>&lt;类型&gt; : 指定一种类型的格式，这里的类型可以看成是形参</li><li>&lt;类型1，类型2&gt;：指定多种类型的格式，多种类型用逗号隔开。这里的类型可以看成是形参</li><li>将来具体调用时候给定的类型可以看成是实参，并且实参的类型只能是引用数据类型</li></ul><p>泛型的好处：</p><ul><li>把运行时期的问题提前到了编译期间</li><li>避免了强制类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：Collection集合存储字符串并遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line"><span class="comment">//        Collection c = new ArrayList();</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">       <span class="comment">// c.add(100);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="comment">//Iterator it = c.iterator();</span></span><br><span class="line">        Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"><span class="comment">//            Object obj = it.next();</span></span><br><span class="line"><span class="comment">//            System.out.println(obj);</span></span><br><span class="line"><span class="comment">//            String s = (String)it.next();  //ClassCastException</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();  <span class="comment">//ClassCastException</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>泛型类</strong></p><p>泛型类的定义格式：</p><ul><li><p>格式：修饰符 class 类名 &lt;类型&gt; { }</p></li><li><p>范例：public class Generic <T> { }</p><p>​此处的T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="comment">//泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span> &lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        Generic&lt;String&gt; g1 = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;String&gt;();</span><br><span class="line">        g1.setT(<span class="string">&quot;李清霞&quot;</span>);</span><br><span class="line">        System.out.println(g1.getT());</span><br><span class="line">        Generic&lt;Integer&gt; g2 = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;Integer&gt;();</span><br><span class="line">        g2.setT(<span class="number">30</span>);</span><br><span class="line">        System.out.println(g2.getT());</span><br><span class="line">        Generic&lt;Boolean&gt; g3 = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;Boolean&gt;();</span><br><span class="line">        </span><br><span class="line">        g3.setT(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(g3.getT());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><mark>泛型类中的泛型成员不能直接实例化。</mark>它们的实例化必须通过相关方法的参数来传递给他们。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] array;  <span class="comment">//这里不能直接newT[]来实例化array</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(T[] tt)</span>&#123;</span><br><span class="line">        array = tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T[] getArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同一个泛型类，如果实例化时给予的实际具体类型不一样，那么这些实例类型是不兼容的，不能相互赋值。</li></ul><p><strong>泛型方法</strong></p><p>泛型方法的定义格式：</p><ul><li>格式：修饰符 &lt;类型&gt; 返回值类型 方法名 （类型 变量名）{ }</li><li>范例：public <T> void show( T t) { }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="comment">//泛型方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>  &#123;</span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>&#123;</span><br><span class="line">      System.out.println(t);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Generic</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Generic</span>();</span><br><span class="line">      g.show(<span class="string">&quot;李清霞&quot;</span>);</span><br><span class="line">      g.show(<span class="number">100</span>);</span><br><span class="line">      g.show(<span class="literal">true</span>);</span><br><span class="line">      g.show(<span class="number">100.100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>泛型接口</strong></p><p>泛型接口的定义格式：</p><ul><li>格式：修饰符 interface 接口名 &lt;类型&gt; { }</li><li>范例：public interface Generic <T> { }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="comment">//泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generic</span> &lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Genericlmpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Generic&lt;String&gt; g1 = <span class="keyword">new</span> <span class="title class_">Genericlmpl</span>&lt;String&gt;();</span><br><span class="line">        g1.show(<span class="string">&quot;李清霞&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Generic&lt;Integer&gt; g2 = <span class="keyword">new</span> <span class="title class_">Genericlmpl</span>&lt;Integer&gt;();</span><br><span class="line">        g2.show(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>类型通配符</strong></p><p>为了表示各种泛型List的父类，可以使用通配符</p><ul><li>类型通配符：&lt;?&gt;</li><li>List&lt;?&gt;：表示元素类型未知的List，它的元素可以匹配任何的类型</li><li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中</li></ul><p>如果说我们不希望任何List&lt;?&gt;是任何泛型List的父类，只希望它代表某一类泛型List的父类，可以使用类型通配符的上限</p><ul><li>类型通配符上限：&lt;? extends 类型&gt;</li><li>List&lt;? extends Number&gt;：它表示的类型是Number或者其子类型</li></ul><p>除了可以指定类型通配符的上限，也可以指定类型通配符的下限</p><ul><li>类型通配符下限：&lt;? super 类型&gt;</li><li>List&lt;? super Number&gt;：它表示的类型是Number或者其父类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类型通配符: &lt;?&gt;</span></span><br><span class="line">        List&lt;?&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">        List&lt;?&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line">        List&lt;?&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//类型通配符上限: &lt;? extends 类型&gt;</span></span><br><span class="line">        <span class="comment">//List&lt;? extends Integer&gt; list4 = new ArrayList&lt;Number&gt;(); 报错 Integer是Number的子类</span></span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//类型通配符下限: &lt;? super 类型&gt;</span></span><br><span class="line">        List&lt;? <span class="built_in">super</span> Integer&gt; list6 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;(); </span><br><span class="line">        List&lt;? <span class="built_in">super</span> Number&gt; list7 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line">        <span class="comment">//List&lt;? super Number&gt; list8 = new ArrayList&lt;Integer&gt;();  报错 Integer是Number的子类</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可变参数</strong></p><p>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的</p><ul><li>格式：修饰符 返回值类型 方法名(数据类型… 变量名){ }</li><li>范例：public static int sum(int… a){ }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="comment">//可变参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... a)</span>&#123;<span class="comment">//a相当于一个数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:a)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可变参数注意事项：</p><ul><li>这里的变量其实是一个数组</li><li>如果一个方法有多个参数，包含可变参数，<mark>可变参数要放最后</mark></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> b,<span class="type">int</span>... a)</span>&#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>可变参数的使用</strong></p><p>Arrays工具类中有一个静态方法：</p><ul><li>public static <T> List<T> asList(T… a);  返回由指定数组支持的固定大小的列表</li><li>返回的集合不能做增删操作，可以做修改操作</li></ul><p>List接口中有一个静态方法：</p><ul><li>public static <E> List<E> of(E… elements); 返回包含任意数量元素的不可变列表</li><li>返回的集合不能做增删改操作</li></ul><p>Set接口中有一个静态方法：</p><ul><li>public static <E> Set<E> of(E… elements); 返回一个包含任意数量元素的不可变集合</li><li>在给元素时，不能给重复的元素</li><li>返回的集合不能做增删操作，没有修改的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public static &lt;T&gt; List&lt;T&gt; asList(T... a);  返回由指定数组支持的固定大小的列表</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//  list.add(&quot;javascript&quot;);  UnsupportedOperationException</span></span><br><span class="line">        <span class="comment">//  list.remove(&quot;java&quot;);    UnsupportedOperationException</span></span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;E&gt; List&lt;E&gt; of(E... elements); 返回包含任意数量元素的不可变列表</span></span><br><span class="line">        List&lt;String&gt; list2 = List.of(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="comment">// list2.add(&quot;你好&quot;);  UnsupportedOperationException</span></span><br><span class="line">        <span class="comment">// list2.remove(&quot;world&quot;);  UnsupportedOperationException</span></span><br><span class="line">        <span class="comment">//  list2.set(2,&quot;你好&quot;);  UnsupportedOperationException</span></span><br><span class="line">        System.out.println(list2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;E&gt; Set&lt;E&gt; of(E... elements); 返回一个包含任意数量元素的不可变集合</span></span><br><span class="line">       <span class="comment">// Set&lt;String&gt; set = Set.of(&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;,&quot;world&quot;); ImmutableCollections$SetN.&lt;init&gt;</span></span><br><span class="line">        Set&lt;String&gt; set = Set.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>);</span><br><span class="line">       <span class="comment">// set.add(&quot;你好&quot;);  UnsupportedOperationException</span></span><br><span class="line">       <span class="comment">// set.remove(&quot;hello&quot;);  UnsupportedOperationException</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="七、异常"><a href="#七、异常" class="headerlink" title="七、异常"></a>七、异常</h2><p>异常就是代表程序出现的问题。其父类是 Throwable。其下两个子类，Error 和 Exception。Error 代表的是系统级别的错误（严重问题），是SUN公司自己用的。而 Exception 代表程序可能出现的问题。Exception 分为 RuntimeException 和其他异常。其中，<strong>RuntimeException 是运行时异常，编译阶段不会被检测出来，编译阶段 Java 不会执行代码，只会检查语法是否错误，或者做一些性能优化</strong>。<mark>编译时异常更多是提醒程序员检查本地信息，运行时异常是代码逻辑出错而导致程序出现的问题。</mark></p><p><mark>idea 当中使用 Ctrl + Alt + T 进行 try catch 包裹。</mark></p><p>Error：代表的系统级别错误(属于严重问题)</p><p>Exception：异常，代表程序可能出现的问题，通常用Exception以及它的子类来封装程序出现的问题。</p><p>运行时异常：RuntimeException及其子类，编译阶段不会出现异常提醒。运行时出现的异常(如：数组索引越界异常)</p><p>编译时异常：除了Exception及其子类，其他都是编译时异常。编译阶段就会出现异常提醒的。(如：日期解析异常)</p><p>编译阶段：java不会运行代码，只会检查语法错误，或者做一些性能的优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java文件</span><br><span class="line">   ⬇ Javac命令</span><br><span class="line">   字节码文件</span><br><span class="line">   ⬇ Java命令</span><br><span class="line">   运行结果</span><br><span class="line">   </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译时异常(在编译阶段，必必须手动处理，否则代码报错)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="string">&quot;2023年12月18日&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(time);</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//运行时异常(在编译阶段是不需要处理的，是代码运行时出现的异常)</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h3><ul><li>是用来查询bug的关键参考信息。</li><li>异常可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况<strong>（看异常的发生位置可以从下往上读）</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">18</span> || age &gt; <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();   <span class="comment">//抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setAge(<span class="number">19</span>);</span><br><span class="line">        s1.setAge(<span class="number">17</span>);<span class="comment">//RuntimeException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h3><p>异常的常见处理方式有：</p><ol><li>JVM默认处理。</li><li>捕获异常。</li><li>抛出异常。</li></ol><p>其中，<strong>抛出</strong>主要是<strong>告诉调用者出错</strong>了。而<strong>捕获</strong>主要是为了<strong>不让程序停止</strong>。</p><h4 id="JVM默认处理"><a href="#JVM默认处理" class="headerlink" title="JVM默认处理"></a>JVM默认处理</h4><p>把异常的名称，异常原因以及异常出现的位置等信息用红色字体打印在控制台上。并且此时的程序停止，代码不再执行。</p><h4 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h4><p>目的是让异常出现的时候，<strong>让程序继续执行</strong>。基本语法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类名 变量名)&#123;</span><br><span class="line">异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可能出现异常的代码</span></span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">            <span class="comment">//这里会创建ArrayIndexOutOfBoundsException的对象</span></span><br><span class="line">            <span class="comment">//与catch中的e对比，看看类型是否匹配，匹配了，就让程序继续进行</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="comment">//出现异常后该如何处理</span></span><br><span class="line">            System.out.println(<span class="string">&quot;索引越界了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;看看我执行了吗&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终执行的结果为：</span></span><br><span class="line">        <span class="comment">//索引越界了</span></span><br><span class="line">        <span class="comment">//看看我执行了吗</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于捕获异常的四个注意点：</p><ul><li><p><strong>如果 try 中没有遇到问题</strong>，会执行 try 当中的所有代码，不会执行 catch 的代码。也就是说，catch 当中的代码只有出现了了异常才会执行。</p></li><li><p><strong>如果 try 中遇到多个问题</strong>，如果第一个问题能够被顺利捕获，则<strong>接下来</strong> try 中代码便<strong>不会执行</strong>。最佳解决方案是写多个 catch 捕获多个问题（一行一个 catch或者一行中利用 <code>|</code> 连接），并且，如果异常之间有父子类关系的话，<strong>父类一定要写在下面</strong>。</p></li><li><p><strong>如果 try 中遇到的问题没有被捕获</strong>，则使用 JVM 默认处理异常的方式进行处理。</p></li><li><p><strong>如果 try 中遇到了问题</strong>，try 下面的其他代码便<strong>不会执行</strong>了，直接跳到 catch，但如果没有 catch 与之匹配，则按照 JVM 默认处理异常的方式进行处理。</p></li><li><p><strong>赋值运算符(&#x3D;)的关联性是从右到左，</strong>因此若一条赋值语句的左右两边都出现异常，则会先抛出等号右边的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//exceptions2.ExDemo3.java</span></span><br><span class="line"><span class="keyword">package</span> exceptions2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExDemo3</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arrayOfNumbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"> <span class="keyword">try</span> </span><br><span class="line"> &#123;</span><br><span class="line"> arrayOfNumbers[<span class="number">10</span>] = <span class="number">11</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">catch</span> (NumberFormatException e1) </span><br><span class="line"> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;NumberFormatException =&gt; &quot;</span> + e1.getMessage());</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">catch</span> (IndexOutOfBoundsException e2) </span><br><span class="line"> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;IndexOutOfBoundsException =&gt; &quot;</span> + e2.getMessage());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> array[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">array[<span class="number">10</span>] = <span class="number">30</span> / <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (ArithmeticException e) </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) </span><br><span class="line">&#123;</span><br><span class="line">      System.out.println(e.getMessage());</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">method2(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用method2方法时左边数组越界，右边除数为0，出现两个异常，但由于=的关联性是从右到左，因此会抛出右边的异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><ul><li><strong>throws</strong>：写在方法定义处，表示声明一个异常。告诉调用者，使用本方法可能会有哪些异常。如果是编译时异常，必须要写，如果是运行时异常，可以不写。</li><li><strong>throw</strong>：写在方法内，结束方法。手动抛出异常对象，交给调用者。方法中下面的代码不在执行了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理时使用try catch捕获</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sum = getSum(arr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法求总和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>[] number)</span> </span><br><span class="line">        <span class="keyword">throws</span> NullPointerException, ArrayIndexOutOfBoundsException &#123;    <span class="comment">//可以声明异常</span></span><br><span class="line">        <span class="keyword">if</span>(number == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();   <span class="comment">//也可以抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(number.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> index : number) &#123;</span><br><span class="line">            result += index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常中的常见方法"><a href="#异常中的常见方法" class="headerlink" title="异常中的常见方法"></a>异常中的常见方法</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td><code>public String getMessage()</code></td><td>返回此 throwable 的详细消息字符串</td></tr><tr><td><code>public String toString()</code></td><td>返回此可抛出的简短描述</td></tr><tr><td><code>public void printStackTrace()</code></td><td>把异常的错误信息输出在控制台，<strong>但不停止虚拟机的运行</strong></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage()); <span class="comment">//Index 10 out of bounds for length 4</span></span><br><span class="line">            <span class="comment">//以上语句会打印异常的消息</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 4</span></span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();    <span class="comment">//打印操作，但实际不会停止虚拟机，因为第16行的测试代码会被成功打印</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;看看我执行了吗&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>自定义异常的目的是为了让报错信息更加见名知意。步骤如下：</p><ol><li>定义异常类（编译时异常继承 Exception，运行时异常继承 RuntimeException）。</li><li>写继承关系。</li><li>空参构造。</li><li>带参构造。</li></ol><ul><li>如果try catch 语句中有返回值，并且语句中含有finally关键字，则return 后仍然会执行finally中的语句，<strong>即finally关键字包围的语句一定执行。</strong>return的如果是基本数据类型，则在finally块中不可以修改已返回的数据，如果是引用类型，则可以改变。</li></ul><h2 id="八、I-O流"><a href="#八、I-O流" class="headerlink" title="八、I&#x2F;O流"></a>八、I&#x2F;O流</h2><h3 id="8-1File"><a href="#8-1File" class="headerlink" title="8.1File"></a>8.1File</h3><p><strong>File类概述和构造方法</strong></p><p>File：它是文件和目录路径名的抽象表示</p><ul><li>文件和目录是可以通过File封装成对象的</li><li>对于File而言，其封装的并不是一个真正存在的文件，仅仅只是一个路径名。它可以是存在的，也可以是不存在的。将来是要通过具体的操作把这个路径的内容转化为具体存在的</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>File(String pathname)</td><td>通过将给定的路径名字符串转化为抽象路径名来创建新的File实例</td></tr><tr><td>File(String parent，String child)</td><td>从父路径名字符串和子路径名字符串创建新的File实例</td></tr><tr><td>File(File parent，String child)</td><td>从父抽象路径名和子路径名字符串创建新的File实例</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//File(String pathname) 通过将给定的路径名字符串转化为抽象路径名来创建新的File实例</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(String parent，String child) 从父路径名字符串和子路径名字符串创建新的File实例</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA&quot;</span>,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(File parent，String child) 从父抽象路径名和子路径名字符串创建新的File实例</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(f3,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>File类创建功能</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>当具有该名称的文件不存在时，创建一个由该抽象路径命名的新空文件</td></tr><tr><td>public boolean mkdir()</td><td>创建由此抽象路径命名的目录</td></tr><tr><td>public boolean mkdirs()</td><td>创建由此抽象路径命名的目录，包括任何必需但不存在的父目录</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//需求1:在D:\\IDEA目录下创建一个文件java.txt</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果文件不存在，就创建文件，返回true</span></span><br><span class="line"><span class="comment">        如果文件存在，就不创建文件，返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.createNewFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求2:在D:\\IDEA目录下创建一个目录JavaSE</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         如果目录不存在，就创建目录，返回true</span></span><br><span class="line"><span class="comment">        如果目录存在，就不创建目录，返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\JavaSE&quot;</span>);</span><br><span class="line">        System.out.println(f2.mkdir());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求3:在D:\\IDEA目录下创建一个多级目录JavaWEB\\HTML</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          如果目录不存在，就创建目录，返回true</span></span><br><span class="line"><span class="comment">        如果目录存在，就不创建目录，返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\JavaWEB\\HTML&quot;</span>);</span><br><span class="line">        System.out.println(f3.mkdirs());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求4:在D:\\IDEA目录下创建一个文件Javase.txt</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\javase.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(f4.mkdir());</span></span><br><span class="line">        System.out.println(f4.createNewFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>File类判断和获取功能</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public  boolean isDirectory()</td><td>测试此抽象路径名表示的File是否为目录</td></tr><tr><td>public boolean isFile()</td><td>测试此抽象路径名表示的File是否为文件</td></tr><tr><td>pblic boolean exists()</td><td>测试此抽象路径名表示的File是否存在</td></tr><tr><td>public String getAbsolutePath()</td><td>返回此抽象路径名的绝对路径名字符串</td></tr><tr><td>public String getPath()</td><td>将此抽象路径名转换为路径字符串</td></tr><tr><td>public String getName()</td><td>返回此抽象路径名表示的文件或者目录的名称</td></tr><tr><td>public String[] list()</td><td>返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</td></tr><tr><td>public File[] listFiles()</td><td>返回此抽象路径名表示的目录中的文件和目录中的File对象数组</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;protect\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.isDirectory());</span><br><span class="line">        System.out.println(f1.isFile());</span><br><span class="line">        System.out.println(f1.exists());</span><br><span class="line"></span><br><span class="line">        System.out.println(f1.getAbsolutePath());<span class="comment">//绝对路径</span></span><br><span class="line">        System.out.println(f1.getPath());<span class="comment">//相对路径</span></span><br><span class="line">        System.out.println(f1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA&quot;</span>);</span><br><span class="line">        String[] strArray = f2.list();</span><br><span class="line">        <span class="keyword">for</span>(String str:strArray)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        File [] fileArray = f2.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File file : fileArray)&#123;</span><br><span class="line">            <span class="comment">//System.out.println(file);//会调用其toString方法</span></span><br><span class="line">            <span class="comment">//System.out.println(file.getName());</span></span><br><span class="line">            <span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line">                System.out.println(file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>File删除功能</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean delete()</td><td>删除由此抽象路径名表示的文件或目录</td></tr></tbody></table><p>绝对路径和相对路径的区别：</p><ul><li>绝对路径：<mark>完整的路径名</mark>，不需要任何其他信息就可以定位它所表示的文件。例如：D:\IDEA\java.txt</li><li>相对路径：必须使用取自其他路径名的信息进行解释。例如：IDEA\java.txt</li></ul><p>删除目录时的注意事项：</p><ul><li>如果一个目录中有内容(目录、文件)，<mark>不能直接删除</mark>，必须先删除目录中的内容，最后才能删除目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建一个文件</span></span><br><span class="line">        <span class="comment">// File f1= new File(&quot;D:\\IDEA\\java.txt&quot;);</span></span><br><span class="line">        <span class="comment">//需求1：在当前模块目录下创建java.txt文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.createNewFile());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：删除当前模块目录下的java.txt文件</span></span><br><span class="line">        System.out.println(f1.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求3：在当前目录下创建itcast目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\itcast&quot;</span>);</span><br><span class="line">        System.out.println(f2.mkdir());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：删除当前模块下的itcast目录</span></span><br><span class="line">        System.out.println(f2.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求5：在当前模块下创建一个目录itcast，然后在itcast目录下创建一个文件java.txt</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\itcast&quot;</span>);</span><br><span class="line">        System.out.println(f3.mkdir());</span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\itcast\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f4.createNewFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求6：删除当前模块的目录itcast以及里面的文件java.txt</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果该目录下存在文件，则需要先将目录下的文件删除才能再将该目录删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(f4.delete());</span><br><span class="line">        System.out.println(f3.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例：遍历目录</p><p>需求：给定一个路径(D:\IDEA)，请通过递归完成遍历该目录下的所有内容，并把所有内容的绝对路径输出在控制台</p><h2 id="九、反射"><a href="#九、反射" class="headerlink" title="九、反射"></a>九、反射</h2><p>反射允许对封装类的字段、方法和构造函数的信息进行编程访问</p><p><mark>IDEA中crtl+p能够弹出括号内需要的参数类型</mark></p><p>字段(成员变量)：获取修饰符、名字、类型，赋值&#x2F;获取值</p><p>构造方法：获取修饰符、名字、形参，创建对象</p><p>成员方法：获取修饰符、名字、形参、返回值，抛出的异常、获取注解、允许方法</p><h3 id="9-1获取class对象"><a href="#9-1获取class对象" class="headerlink" title="9.1获取class对象"></a>9.1获取class对象</h3><p>获取class对象的三种方式：</p><ul><li>Class.forName(“全类名”)；</li><li>类名.class</li><li>对象.getClass()；</li></ul><p><mark>源代码阶段</mark>：Java文件 A.java →  class文件 A.class    第一种方式</p><p><mark>加载阶段</mark>：将A.class放到内存中  第二种方式</p><p><mark>运行阶段</mark>：A a &#x3D; new ( )；第三种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取class对象的三种方式：</span></span><br><span class="line"><span class="comment">        1 Class.forName(&quot;全类名&quot;)；</span></span><br><span class="line"><span class="comment">        2 类名.class</span></span><br><span class="line"><span class="comment">        3 对象.getClass()；</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.Class.forName() 最为常用</span></span><br><span class="line">        <span class="comment">// 包名+类名</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflect.Student&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.类名.class 当作参数来进行传递</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.对象.getClass() 当我们有了这个对象时才可以使用</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line">        System.out.println(clazz == clazz2);</span><br><span class="line">        System.out.println(clazz == clazz3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Java中万物皆对象，Java中有<mark>Class</mark>用来描述字节码文件，这个类的对象就是字节码文件的对象，有<mark>Constructor</mark>来描述构造方法，这个类的对象就表示这个构造方法的对象，<mark>Field</mark>用来描述字段(成员变量)，这个类的对象就是成员变量的对象，<mark>Method</mark>用来描述成员方法，这个类的对象就是成员方法的对象</p><h3 id="9-2利用反射获取构造方法"><a href="#9-2利用反射获取构造方法" class="headerlink" title="9.2利用反射获取构造方法"></a>9.2利用反射获取构造方法</h3><p><strong>Class类中用于获取构造方法的方法</strong></p><ul><li>Constructor&lt;?&gt;[] getConstructors()；返回所有公共构造方法对象的数组</li><li>Constructor&lt;?&gt;[] getDeclaredConstructors(); 返回所有构造方法对象的数组</li><li>Constructor<T> getConstructor(Class&lt;?&gt;…parameterTypes)；返回单个公共构造方法对象</li><li>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;…parameterTypes)；返回单个构造方法对象</li></ul><p><strong>Constructor类中用于创建对象的方法</strong></p><ul><li>T newInstance(Object… initargs)；根据指定的构造方法创建对象</li><li>setAccessible(boolean flag)；设置为true，表示取消访问检查</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        **Class类中用于获取构造方法的方法**</span></span><br><span class="line"><span class="comment">        - Constructor&lt;?&gt;[] getConstructors()；返回所有公共构造方法对象的数组</span></span><br><span class="line"><span class="comment">        - Constructor&lt;?&gt;[] getDeclaredConstructors(); 返回所有构造方法对象的数组</span></span><br><span class="line"><span class="comment">        - Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;...parameterTypes)；返回单个公共构造方法对象</span></span><br><span class="line"><span class="comment">        - Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;...parameterTypes)；返回单个构造方法对象</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        **Constructor类中用于创建对象的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - T newInstance(Object... initargs)；根据指定的构造方法创建对象</span></span><br><span class="line"><span class="comment">        - setAccessible(boolean flag)；设置为true，表示取消访问检查</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflect.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法</span></span><br><span class="line">        Constructor[] cons = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor con : cons)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Constructor[] cons2 = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor con : cons2)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con1</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        System.out.println(con1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(con2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con3</span> <span class="operator">=</span> clazz.getDeclaredConstructor(<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(con3);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con4</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(con4);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> con4.getModifiers(); <span class="comment">// public: 1 protected: 4 private: 2  获取权限修饰符</span></span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        Parameter[] parameters = con4.getParameters();<span class="comment">//获取参数</span></span><br><span class="line">        <span class="keyword">for</span>(Parameter parameter : parameters)&#123;</span><br><span class="line">            System.out.println(parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//暴力反射，表示临时取消权限校验</span></span><br><span class="line">        con4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student)con4.newInstance(<span class="string">&quot;张三&quot;</span>,<span class="number">14</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-3利用反射获取成员变量"><a href="#9-3利用反射获取成员变量" class="headerlink" title="9.3利用反射获取成员变量"></a>9.3利用反射获取成员变量</h3><p><strong>Class类中用于获取成员变量的方法</strong></p><ul><li>Field[] getFields()；返回所有公共成员变量对象的数组</li><li>Field[] getDeclaredFields()；返回所有成员变量对象的数组</li><li>Field getField(String name)；返回单个公共成员变量对象</li><li>Field getDeclaredField(String name)；返回单个成员变量对象</li></ul><p><strong>Filed类中用于创建对象的方法</strong></p><ul><li>void set(Object obj，Object value)；赋值</li><li>Object get(Object obj)；获取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        **Class类中用于获取成员变量的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - Field[] getFields()；返回所有公共成员变量对象的数组</span></span><br><span class="line"><span class="comment">        - Field[] getDeclaredFields()；返回所有成员变量对象的数组</span></span><br><span class="line"><span class="comment">        - Field getField(String name)；返回单个公共成员变量对象</span></span><br><span class="line"><span class="comment">        - Field getDeclaredField(String name)；返回单个成员变量对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        **Filed类中用于创建对象的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - void set(Object obj，Object value)；赋值</span></span><br><span class="line"><span class="comment">        - Object get(Object obj)；获取值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflect.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取成员变量</span></span><br><span class="line">        <span class="comment">//获取所有成员变量</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] fields2 = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields2)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取单个成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">gender</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">        System.out.println(gender);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取权限修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifies</span> <span class="operator">=</span> name.getModifiers();</span><br><span class="line">        System.out.println(modifies);</span><br><span class="line">        <span class="type">int</span> <span class="variable">modifies2</span> <span class="operator">=</span> gender.getModifiers();</span><br><span class="line">        System.out.println(modifies2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员变量名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">n</span> <span class="operator">=</span> name.getName();</span><br><span class="line">        System.out.println(n);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据类型</span></span><br><span class="line">        Class&lt;?&gt; type = name.getType();</span><br><span class="line">        System.out.println(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员变量的值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">29</span>);</span><br><span class="line">        <span class="comment">//临时取消权限检查</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> name.get(stu);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改成员变量的值</span></span><br><span class="line">      name.set(stu,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-4利用反射获取成员方法"><a href="#9-4利用反射获取成员方法" class="headerlink" title="9.4利用反射获取成员方法"></a>9.4利用反射获取成员方法</h3><p><strong>Class类中用于获取成员方法的方法</strong></p><ul><li>Method[] getMethods();返回所有公共成员方法对象的数组，<mark>包括继承的</mark></li><li>Method[] getDeclaredMethods();返回所有成员方法的数组，<mark>不包括继承的</mark></li><li>Method getMethod(String name,Class<T>… parameterTypes);返回单个公共成员对象方法</li><li>Method getDeclaredMethod(String name,Class<T>… parameterTypes);返回单个成员方法</li></ul><p><strong>Method类中用于创建对象的方法</strong></p><p>Object invoke(Object obj，Object… args); 运行方法</p><p>参数一：用obj对象调用方法</p><p>参数二：调用方法的传递参数(如果没有就不写)</p><p>返回值：方法的返回值(如果没有就不写)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        **Class类中用于获取成员方法的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - Method[] getMethods();返回所有公共成员方法对象的数组，&lt;mark&gt;包括继承的&lt;/mark&gt;</span></span><br><span class="line"><span class="comment">        - Method[] getDeclaredMethods();返回所有成员方法的数组，==不包括继承的==</span></span><br><span class="line"><span class="comment">        - Method getMethod(String name,Class&lt;T&gt;... parameterTypes);返回单个公共成员对象方法</span></span><br><span class="line"><span class="comment">        - Method getDeclaredMethod(String name,Class&lt;T&gt;... parameterTypes);返回单个成员方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        **Method类中用于创建对象的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Object invoke(Object obj，Object... args); 运行方法</span></span><br><span class="line"><span class="comment">        参数一：用obj对象调用方法</span></span><br><span class="line"><span class="comment">        参数二：调用方法的传递参数(如果没有就不写)</span></span><br><span class="line"><span class="comment">        返回值：方法的返回值(如果没有就不写)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflect.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取成员方法</span></span><br><span class="line">        <span class="comment">//获取里面的所有公共成员方法对象(包括父类的所有公共方法)</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取里面的所有的成员方法(不能获取父类的，但是可以获取本类中的私有方法)</span></span><br><span class="line">        Method[] methods1 = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method:methods1)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取单一指定方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>,String.class);</span><br><span class="line">        System.out.println(method1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifies</span> <span class="operator">=</span> method.getModifiers();</span><br><span class="line">        <span class="type">int</span> <span class="variable">modifies2</span> <span class="operator">=</span> method1.getModifiers();</span><br><span class="line">        System.out.println(modifies);</span><br><span class="line">        System.out.println(modifies2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> method1.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取形参</span></span><br><span class="line">        Parameter[] parameters = method1.getParameters();</span><br><span class="line">        <span class="keyword">for</span>(Parameter parameter:parameters)&#123;</span><br><span class="line">            System.out.println(parameter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法抛出的异常</span></span><br><span class="line">        Class[] exceptionTypes = method1.getExceptionTypes();</span><br><span class="line">        <span class="keyword">for</span>(Class exceptionType:exceptionTypes)&#123;</span><br><span class="line">            System.out.println(exceptionType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法运行</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//参数一s:表示方法的调用者</span></span><br><span class="line">        <span class="comment">//参数二&quot;水果&quot;:表示在调用方法时传递的实际参数</span></span><br><span class="line">        method1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method1.invoke(s,<span class="string">&quot;水果&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法的返回值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method1.invoke(s,<span class="string">&quot;水果&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>反射的作用</strong></p><ol><li>获取一个类里面的所有信息，获取到之后，再执行其他的业务逻辑</li><li>结合配置文件，动态的创建对象并调用方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2024/02/04/%E5%9B%BE%E8%AE%BA/"/>
      <url>/2024/02/04/%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="图算法专题"><a href="#图算法专题" class="headerlink" title="图算法专题"></a>图算法专题</h1><h2 id="1、图的存储"><a href="#1、图的存储" class="headerlink" title="1、图的存储"></a>1、图的存储</h2><ul><li>邻接矩阵</li><li>邻接表</li></ul><p>邻接矩阵可以采用一个二维数组G[][]来进行存取数据，而邻接表可以采用链表形式或者vector数组来实现</p><p>一般来说对于点数较少的图采用邻接矩阵方式比较方便，而对于点数较多的密集图采用邻接表形式比较方便</p><h2 id="2、图的遍历"><a href="#2、图的遍历" class="headerlink" title="2、图的遍历"></a>2、图的遍历</h2><h3 id="深度优先搜素（DFS）"><a href="#深度优先搜素（DFS）" class="headerlink" title="深度优先搜素（DFS）"></a>深度优先搜素（DFS）</h3><ul><li>邻接矩阵版</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邻接矩阵版</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> n,G[N][N];<span class="comment">//n为顶点数，N为最大顶点数</span></span><br><span class="line"><span class="type">bool</span>  vis[N]=&#123;<span class="literal">false</span>&#125;;<span class="comment">//标记数组，判断该点是否被访问</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">10000000</span>;<span class="comment">//设INF为一个很大的数</span></span><br><span class="line"><span class="built_in">memset</span>(G,INF,<span class="keyword">sizeof</span>(G));<span class="comment">//初始化图</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> depth)</span><span class="comment">//访问顶点u，depth为深度</span></span><br><span class="line">&#123;</span><br><span class="line">vis[u]=<span class="literal">true</span>;<span class="comment">//标记已访问</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;n;v++)<span class="comment">//枚举从u出发可以到达的所有顶点v</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;<span class="comment">//如果v未被访问并且u可以到达v</span></span><br><span class="line">DFS(v,depth+<span class="number">1</span>);<span class="comment">//访问v,深度加1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS_Trave</span><span class="params">()</span><span class="comment">//遍历整个图G</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;n;u++)<span class="comment">//  访问每个顶点u</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="literal">false</span>)  <span class="comment">//如果u未被访问</span></span><br><span class="line">&#123;</span><br><span class="line">DFS(u,<span class="number">1</span>);  <span class="comment">//访问u和u所在的连通块，1为最开始的第一层</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>邻接表版</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邻接表版</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> n;<span class="comment">//n为顶点数</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;Adj [N];<span class="comment">//图G的邻接表</span></span><br><span class="line"><span class="type">bool</span>  vis[N]=&#123;<span class="literal">false</span>&#125;;<span class="comment">//标记数组，判断该点是否被访问</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">10000000</span>;<span class="comment">//设INF为一个很大的数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> depth)</span><span class="comment">//访问顶点u，depth为深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u]==<span class="literal">true</span>;<span class="comment">//标记已访问</span></span><br><span class="line"><span class="comment">/*如果需要对u进行一些操作，可以在此处进行*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;Adj[u].<span class="built_in">size</span>();i++)<span class="comment">//枚举从u出发可以到达的所有顶点v</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=Adj[u][i];</span><br><span class="line"><span class="keyword">if</span>(vis[v]==<span class="literal">false</span>)<span class="comment">//如果v未被访问</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DFS</span>(v,depth+<span class="number">1</span>);<span class="comment">//访问v,深度加1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS_Trave</span><span class="params">()</span><span class="comment">//遍历整个图</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;n;u++) <span class="comment">//对每个顶点u</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="literal">false</span>) <span class="comment">//如果u未被访问</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DFS</span>(u,<span class="number">1</span>);  <span class="comment">//访问u和u的连通块，1表示初始为第一层</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广度优先搜素（BFS）"><a href="#广度优先搜素（BFS）" class="headerlink" title="广度优先搜素（BFS）"></a>广度优先搜素（BFS）</h3><ol><li>邻接矩阵版</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 10000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 10000000</span></span><br><span class="line"><span class="type">int</span> n,G[N][N];<span class="comment">//n为顶点数</span></span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(<span class="type">int</span> u)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">q.push(u);</span><br><span class="line">vis[u]=<span class="literal">true</span>;<span class="comment">//标记已入队</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;n;v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="literal">false</span>&amp;&amp;g[u][v]!=INF)</span><br><span class="line">&#123;</span><br><span class="line">q.push(v);</span><br><span class="line">vis[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFSTrave</span><span class="params">()</span><span class="comment">//遍历整个图</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;n;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">BFS(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>邻接表版</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 100000000</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;Adj[N];<span class="comment">//图G</span></span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;<span class="comment">//顶点数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(<span class="type">int</span> u)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">q.push(u);</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;Adj[u].size();v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z=Adj[u][v];</span><br><span class="line"><span class="keyword">if</span>(vis[z]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(z);</span><br><span class="line">vis[z]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFSTrave</span><span class="params">()</span> <span class="comment">//遍历整个图</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;n;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">BFS(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、拓扑排序"><a href="#3、拓扑排序" class="headerlink" title="3、拓扑排序"></a>3、拓扑排序</h2><p>时间复杂度O（n+m）,空间复杂度O（n） n为顶点数，m为边数</p><p>用途：</p><ol><li>计算工序最短用时（经典拓扑+dp）</li><li>有向无环图（DAG）判环</li><li>分级（排序、分层）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, x, index, ans;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[maxn];    <span class="comment">//邻接链表存图</span></span><br><span class="line"><span class="type">int</span> f[maxn], t[maxn];    <span class="comment">//记录总时长，单位时长</span></span><br><span class="line"><span class="type">int</span> indegree[maxn]; <span class="comment">//记录入度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Topo_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!indegree[i]) &#123;  <span class="comment">//入度为0，入队</span></span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            f[i] = t[i];  <span class="comment">//初始化时间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">//先计算该点的时间</span></span><br><span class="line">        <span class="type">int</span> temp = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[temp].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            --indegree[G[temp][i]]; <span class="comment">//子节点的入度全部-1</span></span><br><span class="line">            f[G[temp][i]] = <span class="built_in">max</span>(f[G[temp][i]], f[temp] + t[G[temp][i]]); <span class="comment">//更新子节点的工序用时</span></span><br><span class="line">            <span class="keyword">if</span> (!indegree[G[temp][i]]) q.<span class="built_in">push</span>(G[temp][i]);   <span class="comment">//分层</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">//顶点个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; index; <span class="comment">//工程序号</span></span><br><span class="line">        cin &gt;&gt; t[index];</span><br><span class="line">        <span class="keyword">while</span> (cin &gt;&gt; x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            G[x].<span class="built_in">push_back</span>(index);  <span class="comment">//建图</span></span><br><span class="line">            ++indegree[index];  <span class="comment">//入度+1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Topo_sort</span>();</span><br><span class="line">    <span class="comment">//找出最终答案</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ans = <span class="built_in">max</span>(ans, f[i]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DAG判环：只需要新建一个cnt变量来记录队列中pop出来的顶点的个数，设总顶点数为N，若cnt&#x3D;&#x3D;N，则表明无环，若cnt!&#x3D;N，则表示有环。</p><p><strong>拓扑排序的稳定性</strong></p><p>拓扑排序时，若每一次入队的顶点数量均为1，则代表拓扑排序的结果只有一个，排序是稳定的；若每一次入队的顶点的数量不为1，则表示同一阶段有多个入度为0的顶点，这几个顶点的顺序是不固定的，故排序是不稳定的。<br>题目中若对排序有较严格要求，需要特别注意拓扑排序的稳定性。</p><h2 id="4、最短路径"><a href="#4、最短路径" class="headerlink" title="4、最短路径"></a>4、最短路径</h2><h3 id="Dijkstra算法（处理单源最短路径）"><a href="#Dijkstra算法（处理单源最短路径）" class="headerlink" title="Dijkstra算法（处理单源最短路径）"></a>Dijkstra算法（处理单源最短路径）</h3><p>​       Dijkstra算法用来解决单源最短路径问题，即给定一个图G和起点s，通过算法求出点s到达图中其他顶点的最短路径。其基本思想是对图G（V,E)设置集合S,存放已访问的顶点，然后每次从V-S中选择与顶点s最短距离最小的一个顶点（记为u)，访问并加入集合S。之后，令顶点u为中介点，优化起点s与所有从u所能到达的顶点v之间的最短距离。这样执行n次（n为顶点个数）,知道集合S中包含图中所有起点。</p><ul><li>邻接矩阵版</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INF 100000000</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> n,G[N][N];<span class="comment">//顶点数 图G</span></span><br><span class="line"><span class="type">int</span> d[N];<span class="comment">//记录起点s到达图中各顶点的最短距离</span></span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;<span class="comment">//标记数组，判断顶点是否访问</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">(<span class="type">int</span> s)</span><span class="comment">//s起点</span></span><br><span class="line">&#123;</span><br><span class="line">   fill(d,d+N,INF);<span class="comment">//fill函数将整个d数组赋值为INF（慎用memset) </span></span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)</span><br><span class="line">&#123;</span><br><span class="line">u=j;</span><br><span class="line">MIN=d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找不到小于INF的d[u]，说明剩下的顶点和s不连通</span></span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>)<span class="keyword">return</span> ;</span><br><span class="line">vis[u]=<span class="literal">true</span>;<span class="comment">//标记已访问</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;n;v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果v未被访问并且u能到达v且能使得到达起点s的距离更小</span></span><br><span class="line"><span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;G[u][v]!=INF&amp;&amp;d[u]+G[u][v]&lt;d[v])</span><br><span class="line">&#123;</span><br><span class="line">d[v]=d[u]+G[u][v];<span class="comment">//松弛</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>邻接表版</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> n,m;<span class="comment">//顶点数 边数</span></span><br><span class="line"><span class="type">int</span> d[N];<span class="comment">//记录起点s到达图中各顶点的最短距离</span></span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;<span class="comment">//标记数组，判断顶点是否访问</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> v;<span class="comment">//v为边的终点</span></span><br><span class="line">  <span class="type">int</span> weight;<span class="comment">//边的权值</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt;Adj[N]; <span class="comment">//图G Adj[u]存放从顶点u出发可以到达的所有顶点</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">(<span class="type">int</span> s)</span><span class="comment">//s为起点</span></span><br><span class="line">&#123;</span><br><span class="line"> fill(d,d+N,INF);<span class="comment">//fill函数将整个d数组赋值为INF（慎用memset) </span></span><br><span class="line"> d[s]=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)</span><br><span class="line">&#123;</span><br><span class="line">u=j;</span><br><span class="line">MIN=d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找不到小于INF的d[u]，说明剩下的顶点和s不连通</span></span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>)<span class="keyword">return</span> ;</span><br><span class="line">vis[u]=<span class="literal">true</span>;<span class="comment">//标记已访问</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;Adj[u].size();j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=Adj[u][j].v;</span><br><span class="line"><span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;Adj[u][j].weight+d[u]&lt;d[v])</span><br><span class="line">&#123;</span><br><span class="line">d[v]=d[u]+Adj[u][j].weight;<span class="comment">//松弛</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">Node nd;</span><br><span class="line">nd.v=y;nd.weight=<span class="number">1</span>;<span class="comment">//边的权重</span></span><br><span class="line">Adj[x].push_back(nd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">Dijkstra(i);</span><br><span class="line"><span class="type">int</span> maxn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">           <span class="keyword">if</span>(d[j]!=INF)</span><br><span class="line">           &#123;</span><br><span class="line">           maxn=max(j,maxn);<span class="comment">//找每个顶点能够到达的最大编号顶点</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxn&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>堆优化版</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,u,v,w;<span class="comment">//顶点数 边数  源点</span></span><br><span class="line"><span class="type">int</span> d[N];<span class="comment">//记录起点s到达图中各顶点的最短距离</span></span><br><span class="line"><span class="type">bool</span> vis[N]= &#123;<span class="literal">false</span>&#125;; <span class="comment">//标记数组，判断顶点是否访问</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v;<span class="comment">//v为边的到达点</span></span><br><span class="line"><span class="type">int</span> weight;<span class="comment">//边的权值</span></span><br><span class="line"><span class="built_in">Node</span>(<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">v=a;</span><br><span class="line">weight=b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Node&gt;Adj[N]; <span class="comment">//图G Adj[u]存放从顶点u出发可以到达的所有顶点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注意优先级队列的优先级定义，小根堆要用大于号</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node n1,Node n2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n1.weight==n2.weight)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> n1.v&gt;n2.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> n1.weight&gt;n2.weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> s)</span><span class="comment">//s为起点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fill</span>(d,d+N,INF);<span class="comment">//fill函数将整个d数组赋值为INF（慎用memset)</span></span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">priority_queue&lt;Node,vector&lt;Node&gt;,cmp&gt;q;<span class="comment">//优先级队列的自定义语法</span></span><br><span class="line"><span class="function">Node <span class="title">n1</span><span class="params">(s,<span class="number">0</span>)</span></span>;</span><br><span class="line">q.<span class="built_in">push</span>(n1);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">Node M=q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//特判两种情况</span></span><br><span class="line"><span class="keyword">if</span>(vis[M.v]==<span class="literal">true</span>)<span class="keyword">continue</span>;<span class="comment">//已访问过的结点不需要再访问</span></span><br><span class="line"><span class="keyword">if</span>(d[M.v]==INF)<span class="keyword">break</span>;<span class="comment">//不连通</span></span><br><span class="line">vis[M.v]=<span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> v=M.v;</span><br><span class="line"><span class="comment">//松弛</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; Adj[v].<span class="built_in">size</span>(); ++w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (d[Adj[v][w].v] &gt; d[v] + Adj[v][w].weight)</span><br><span class="line">&#123;</span><br><span class="line">d[Adj[v][w].v] = d[v] + Adj[v][w].weight;</span><br><span class="line"><span class="function">Node <span class="title">K</span><span class="params">(Adj[v][w].v, d[Adj[v][w].v])</span></span>;</span><br><span class="line">q.<span class="built_in">push</span>(K);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="function">Node <span class="title">temp</span><span class="params">(y,z)</span></span>;</span><br><span class="line">Adj[x].<span class="built_in">push_back</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Dijkstra</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;d[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Floyd算法（解决全源最短路径）"><a href="#Floyd算法（解决全源最短路径）" class="headerlink" title="Floyd算法（解决全源最短路径）"></a>Floyd算法（解决全源最短路径）</h3><p>该算法用于求任意两点之间的最短路径，也可以来求解一个点是否能到达另一个点。dis[][]数组用于存图。算法核心在于中转站的选择，意为在前v个中转站被允许参与中转的情况下，任意两点可以到达的最短路径，枚举中转站的时候也可以用来判断该点是否位于最短路径当中。注意先初始化dis[][]为INF。</p><p>求路径</p><p>Floyd算法可以多开一个path的二位数组来存放中转站标号，只需要在dp的时候在下面多加一句path[u][w]&#x3D;v;即可。<br>在求路径的时候需要用到递归。限制条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; dis[i][j];</span><br><span class="line">        path[i][j] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Floyd算法求任意两点最短路径长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; ++v) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>; w &lt;= n; ++w) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[u][w] &gt; dis[u][v] + dis[v][w]) &#123;</span><br><span class="line">                dis[u][w] = min(dis[u][w], dis[u][v] + dis[v][w]);</span><br><span class="line">                <span class="comment">//  path[u][w]=v;   //记录路径</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPath</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (paht[u][v] == <span class="number">-1</span>) &#123;    <span class="comment">//u与v之间已经没有任何中转站，二者已经直接相连了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; u &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; v &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = path[u][v]; <span class="comment">//中转站</span></span><br><span class="line">        <span class="built_in">printPath</span>(u, mid);   <span class="comment">//左递归打印u到中转站的路径</span></span><br><span class="line">        <span class="built_in">printPath</span>(mid, v);   <span class="comment">//有递归打印中转站到v的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bellman-Ford算法"><a href="#Bellman-Ford算法" class="headerlink" title="Bellman-Ford算法"></a>Bellman-Ford算法</h3><p>Bellman-Ford算法使用于求解单源最短路，该算法可以允许负权值边的存在。Bellman-Ford算法算法思想为进行n次松弛操作，每一次松弛操作都枚举每一条边，对该边的两端顶点路径长度进行修改。以此求出最短路径。时间复杂度为O（nm），其中n为顶点数，m为边数。</p><h3 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h3><p>SPFA（Shortest Path Faster Algorithm）算法，是Bellman-Ford算法的队列优化版，时间复杂度较为玄学，理论上讲SPFA可以对Bellman-Ford进行常数级别的优化，但是在算法竞赛当中可能出现卡SPFA时间复杂度使其时间复杂度退化为O（nm）的情况，对于不存在负权值边的图来讲，Dijkstra算法在优先队列优化过后效果稳定且时间复杂度优秀，优先选用Dijkstra。但是对于存在负权值边的图来讲，Dijkstra算法会失效，所以还得使用SPFA。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, s, a, b, w;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> v, <span class="type">int</span> w) &#123;</span><br><span class="line">vertex = v, weight = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> vertex, weight;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt; G[maxn];   <span class="comment">//邻接链表存图</span></span><br><span class="line"><span class="type">int</span> dis[maxn];  <span class="comment">//记录最终的距离数组</span></span><br><span class="line"><span class="type">bool</span> mark[maxn];<span class="comment">//记录顶点是否存在于队列之中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SPFA</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化距离为无穷大，原点为0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dis[i] = INF;</span><br><span class="line">dis[start] = <span class="number">0</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line">mark[start] = <span class="number">1</span>;<span class="comment">//该顶点已经入队</span></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> v = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">mark[v] = <span class="number">0</span>;<span class="comment">//该顶点出队</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; G[v].<span class="built_in">size</span>(); ++w) &#123;  <span class="comment">//松弛</span></span><br><span class="line"><span class="keyword">if</span> (dis[G[v][w].vertex] &gt; dis[v] + G[v][w].weight) &#123;</span><br><span class="line">dis[G[v][w].vertex] = dis[v] + G[v][w].weight;</span><br><span class="line"><span class="keyword">if</span> (!mark[G[v][w].vertex]) &#123;<span class="comment">//可以松弛并且该顶点没有在队列里面</span></span><br><span class="line">mark[G[v][w].vertex] = <span class="number">1</span>;<span class="comment">//顶点入队并且进行mark的记录</span></span><br><span class="line">q.<span class="built_in">push</span>(G[v][w].vertex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-最小生成树"><a href="#5-最小生成树" class="headerlink" title="5.最小生成树"></a>5.最小生成树</h2><h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> v, <span class="type">int</span> w) &#123;</span><br><span class="line">        vertex = v, weight = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> vertex, weight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node n1, node n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1.weight &gt; n2.weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, a, b, w, ans;</span><br><span class="line"><span class="type">bool</span> mark[maxn];<span class="comment">//标记数组</span></span><br><span class="line"><span class="type">int</span> dis[maxn];  <span class="comment">//存与顶点相连的边的长度</span></span><br><span class="line">vector&lt;node&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Prim</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dis[i] = INF;</span><br><span class="line">    dis[start] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node, vector&lt;node&gt;, cmp&gt; q;</span><br><span class="line">    <span class="function">node <span class="title">N</span><span class="params">(start, <span class="number">0</span>)</span></span>;</span><br><span class="line">    q.<span class="built_in">push</span>(N);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        node M = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//特判</span></span><br><span class="line">        <span class="keyword">if</span> (mark[M.vertex]) <span class="keyword">continue</span>;    <span class="comment">//已访问过的节点不需要再访问</span></span><br><span class="line">        <span class="keyword">if</span> (dis[M.vertex] == INF) <span class="keyword">break</span>;   <span class="comment">//图不连通</span></span><br><span class="line">        mark[M.vertex] = <span class="number">1</span>;   <span class="comment">//标记已访问</span></span><br><span class="line">        <span class="type">int</span> v = M.vertex;</span><br><span class="line">        <span class="comment">//松弛</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[v].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="comment">//需要特判是否重复选择</span></span><br><span class="line">            <span class="keyword">if</span> (dis[G[v][i].vertex] &gt; G[v][i].weight &amp;&amp; !mark[G[v][i].vertex]) &#123;</span><br><span class="line">                dis[G[v][i].vertex] = G[v][i].weight;</span><br><span class="line">                <span class="function">node <span class="title">P</span><span class="params">(G[v][i].vertex, G[v][i].weight)</span></span>;</span><br><span class="line">                q.<span class="built_in">push</span>(P);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;    <span class="comment">//创建边结构体</span></span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> _u, <span class="type">int</span> _v, <span class="type">int</span> _w) &#123;</span><br><span class="line">        u = _u, v = _v, w = _w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge e1, edge e2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e1.w &lt; e2.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m, a, b, w, cnt, ans;</span><br><span class="line">vector&lt;edge&gt; E; <span class="comment">//存储图的所有边</span></span><br><span class="line"><span class="type">int</span> father[maxn];   <span class="comment">//并查集</span></span><br><span class="line"><span class="type">int</span> _find(<span class="type">int</span> s) &#123; <span class="comment">//查</span></span><br><span class="line">    <span class="keyword">while</span> (father[s] != s) s = father[s];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> s1, <span class="type">int</span> s2)</span> </span>&#123;    <span class="comment">//并</span></span><br><span class="line">    <span class="type">int</span> f1 = _find(s1), f2 = _find(s2);</span><br><span class="line">    father[<span class="built_in">max</span>(f1, f2)] = father[<span class="built_in">min</span>(f1, f2)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) father[i] = i;    <span class="comment">//初始化每一条边为自己的父亲</span></span><br><span class="line">    <span class="comment">//按照每一条边的权重排序</span></span><br><span class="line">    <span class="built_in">sort</span>(E.<span class="built_in">begin</span>(), E.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; E.<span class="built_in">size</span>(); ++i) &#123; <span class="comment">//枚举每一条边</span></span><br><span class="line">        <span class="type">int</span> _u = E[i].u, _v = E[i].v, _w = E[i].w;</span><br><span class="line">        <span class="keyword">if</span> (_find(_u) != _find(_v)) &#123;</span><br><span class="line">            cnt++;    <span class="comment">//计数器，如果最终cnt!=n-1则图不连通</span></span><br><span class="line">            ans += _w;</span><br><span class="line">            <span class="built_in">merge</span>(_u, _v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>) <span class="keyword">break</span>; <span class="comment">//全部的边找到了就截断函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Tarjan算法"><a href="#6、Tarjan算法" class="headerlink" title="6、Tarjan算法"></a>6、Tarjan算法</h2><h3 id="强连通分量（Strongly-Connected-Components）"><a href="#强连通分量（Strongly-Connected-Components）" class="headerlink" title="强连通分量（Strongly Connected Components）"></a>强连通分量（Strongly Connected Components）</h3><ul><li><p>若有向图中有两个点 i 与 j 可以相互到达，则称这两个点强连通，如果图中任意两个点都强连通，则该图称为强连通图。任意一个点自己和自己是强连通的。</p></li><li><p>非强连通有向图的极大强连通子图称为该图的强连通分量。</p></li><li><p>根据定义，两个点一定是强连通的，当且仅当它们在同一个环内。环上所有的点都互相强连通。</p></li></ul><p><strong>算法思路</strong></p><p>该算法有两个数组比较重要，第一个是时间戳数组dfn[]，该数组是用来记录对应节点第一次被访问的顺序。另一个是追溯值数组low[]，该数组表示了从对应节点出发，所能够访问到的最早时间戳，以便方便我们进行强连通分量的判断。</p><p>算法分三步：</p><ol><li>入：指从 x 节点发起Tarjan算法时，记录 x 对应的时间戳，并将 x 入栈。</li><li>回：我们对 x 发起Tarjan算法，对 x 的子节点 y 进行遍历，分以下三种情况：<ul><li>如果 y 还未被访问，则继续对 y 进行深搜。回溯到 x 的时候，我们需要利用 y 的low值来更新 x 的low值。</li><li>如果 y 已经被访问并且 y 在栈中，说明了 y 是 x 的祖先节点或者左子树节点，这个时候我们直接利用 y 的dfn值来更新 x 的low值。</li><li>如果 y 已经访问并且不在栈中，表示 y 已经是属于另一个强连通分量，不需要对其进行其他处理了。</li></ul></li><li>离：在处理完 x 之后，判断 x 是否为一个强连通分量的入口，如果是，则出栈，并且记录相对应的强连通分量。</li><li>根据算法过程容易注意到，因为回溯，所以越往后搜索到的点强连通分量编号越靠前。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b, ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[maxn];<span class="comment">//邻接表存图</span></span><br><span class="line"><span class="type">bool</span> instk[maxn];<span class="comment">//判断元素是否在栈中</span></span><br><span class="line"><span class="type">int</span> stk[maxn], top;<span class="comment">//stk为手写栈，top为栈顶指针</span></span><br><span class="line"><span class="type">int</span> dfn[maxn], low[maxn], tot;<span class="comment">//时间戳，low值，对应的标记</span></span><br><span class="line"><span class="type">int</span> scc[maxn], siz[maxn], cnt;<span class="comment">//对应的节点属于哪一个强连通分量，对应的强连通分量的大小，强连通分量的编号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="comment">//入</span></span><br><span class="line">dfn[x] = low[x] = ++tot;<span class="comment">//初始化时间戳和追溯值</span></span><br><span class="line">stk[++top] = x, instk[x] = <span class="number">1</span>;<span class="comment">//元素入栈</span></span><br><span class="line"><span class="comment">//回</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[x].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line"><span class="type">int</span> y = G[x][i];</span><br><span class="line"><span class="keyword">if</span> (!dfn[y]) &#123;<span class="comment">//子节点没被访问，访问子节点</span></span><br><span class="line"><span class="built_in">Tarjan</span>(y);</span><br><span class="line">low[x] = <span class="built_in">min</span>(low[x], low[y]);<span class="comment">//利用子节点的追溯值来更新自己的追溯值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (instk[y]) &#123;<span class="comment">//子节点已经在栈中</span></span><br><span class="line">low[x] = <span class="built_in">min</span>(low[x], dfn[y]);<span class="comment">//子节点的时间戳来更新自己的追溯值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//离</span></span><br><span class="line"><span class="keyword">if</span> (dfn[x] == low[x]) &#123;<span class="comment">//如果该节点是某一个SCC的入口，则对这个SCC进行处理</span></span><br><span class="line"><span class="type">int</span> tmp; ++cnt;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">tmp = stk[top--]; instk[tmp] = <span class="number">0</span>;<span class="comment">//取栈顶元素，出栈</span></span><br><span class="line">scc[tmp] = cnt;<span class="comment">//该顶点属于第cnt个SCC</span></span><br><span class="line">++siz[cnt];<span class="comment">//第cnt个SCC的大小加1</span></span><br><span class="line">&#125; <span class="keyword">while</span> (tmp != x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">G[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!dfn[i]) <span class="built_in">Tarjan</span>(i);<span class="comment">//如果这个顶点没被访问过，就从它开始发起Tarjan算法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (siz[i] &gt; <span class="number">1</span>) ++ans;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tarjan算法缩点"><a href="#Tarjan算法缩点" class="headerlink" title="Tarjan算法缩点"></a>Tarjan算法缩点</h3><p>Tarjan算法的缩点一般是在利用Tarjan算法求出SCC之后进行的操作，通常是对一个节点 i 访问它的子节点 j ，而后判断两个节点是否属于同一个SCC，如果不属于同一个SCC，则记录相应的入度出度，或者直接建新图。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缩点处理出度入度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[i].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (scc[i] != scc[G[i][j]]) &#123;</span><br><span class="line">din[scc[G[i][j]]]++;<span class="comment">//入度++</span></span><br><span class="line">dout[scc[i]]++;<span class="comment">//出度++</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缩点建新图</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[i].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (scc[i] != scc[G[i][j]])</span><br><span class="line">new_G[scc[i]].<span class="built_in">push_back</span>(scc[G[i][j]]);<span class="comment">//建新图</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、Hierholzer算法"><a href="#7、Hierholzer算法" class="headerlink" title="7、Hierholzer算法"></a>7、Hierholzer算法</h2><p>又称插入回路法，用于求解欧拉路和欧拉路径。</p><p>时间复杂度O（n+m），空间复杂度O（n），n为顶点数，m为边数。</p><p>求解欧拉路的时候需要提前判明该图是否存在欧拉路。判定条件如下：</p><p>有向图：</p><ul><li>欧拉回路：所有顶点出度入度一致。</li><li>欧拉路径：恰好有一个点的出度比入度多1（起点），恰好有一个点的入度比出度多1（终点）。</li></ul><p>无向图：</p><ul><li>欧拉回路：所有顶点的度数为偶数。</li><li>欧拉路径：恰好有两个顶点的度数为奇数。</li></ul><h3 id="有向图欧拉路"><a href="#有向图欧拉路" class="headerlink" title="有向图欧拉路"></a>有向图欧拉路</h3><p>接下来以邻接链表有向图的欧拉路求解算法进行演示（字典序最小的欧拉路）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1000005</span>;</span><br><span class="line"><span class="type">int</span> n, m, u, v, start = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>; <span class="comment">//判定图是否满足要求，默认满足欧拉图要求</span></span><br><span class="line"><span class="type">int</span> indegree[maxn], outdegree[maxn]; <span class="comment">//入度出度</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[maxn];    <span class="comment">//邻接链表存图</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; ans; <span class="comment">//存路径</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge_path</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;  <span class="comment">//出度比入度多的顶点个数，入度比出度多的顶点个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indegree[i] == outdegree[i]) <span class="keyword">continue</span>; <span class="comment">//出度入度相等</span></span><br><span class="line">        <span class="keyword">if</span> (indegree[i] + <span class="number">1</span> == outdegree[i]) &#123;   <span class="comment">//起点</span></span><br><span class="line">            cnt1++;</span><br><span class="line">            start = i;    <span class="comment">//记录起点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (indegree[i] == outdegree[i] + <span class="number">1</span>) cnt2++;    <span class="comment">//终点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">//其他条件不满足欧拉图要求</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!((cnt1 == <span class="number">1</span> &amp;&amp; cnt2 == <span class="number">1</span>) || (cnt1 == <span class="number">0</span> &amp;&amp; cnt2 == <span class="number">0</span>))) flag = <span class="literal">false</span>;   <span class="comment">//欧拉路径和欧拉回路情况判定</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = G[s].<span class="built_in">begin</span>(); it != G[s].<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> next = *it;   <span class="comment">//取点</span></span><br><span class="line">        it = G[s].<span class="built_in">erase</span>(it);  <span class="comment">//删边</span></span><br><span class="line">        <span class="built_in">dfs</span>(next);  <span class="comment">//深搜继续</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">push</span>(s);    <span class="comment">//无法再搜索了，此时记录节点，回溯</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;  <span class="comment">//点数和边数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v);  <span class="comment">//建图</span></span><br><span class="line">        ++outdegree[u]; <span class="comment">//记录出度</span></span><br><span class="line">        ++indegree[v];  <span class="comment">//记录入度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">juede_path</span>();   <span class="comment">//判定该图是否为欧拉图</span></span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(G[i].<span class="built_in">begin</span>(), G[i].<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">while</span> (!ans.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> temp = ans.<span class="built_in">top</span>();</span><br><span class="line">        cout &lt;&lt; temp &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        ans.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无向图欧拉路"><a href="#无向图欧拉路" class="headerlink" title="无向图欧拉路"></a>无向图欧拉路</h3><p>无向图欧拉路，使用了并查集特判图是否连通。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b, start = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>; <span class="comment">//默认满足欧拉图要求</span></span><br><span class="line"><span class="type">int</span> degree[maxn], father[maxn];    <span class="comment">//顶点的度，father为并查集，用于判断图是否连通</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[maxn];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;    <span class="comment">//边结构体，用于记录无向边的信息</span></span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> _u, <span class="type">int</span> _v) &#123; u = _u, v = _v; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(edge e1)<span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (u == e1.u) <span class="keyword">return</span> v &lt; e1.v;</span><br><span class="line">        <span class="keyword">return</span> u &lt; e1.u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> u, v;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;edge&gt; E;    <span class="comment">//储存边的信息</span></span><br><span class="line"><span class="type">int</span> _find(<span class="type">int</span> s) &#123;    <span class="comment">//查</span></span><br><span class="line">    <span class="keyword">while</span> (father[s] != s) s = father[s];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _merge(<span class="type">int</span> s1, <span class="type">int</span> s2) &#123;        <span class="comment">//并</span></span><br><span class="line">    <span class="type">int</span> f1 = _find(s1), f2 = _find(s2);</span><br><span class="line">    father[<span class="built_in">max</span>(f1, f2)] = father[<span class="built_in">min</span>(f1, f2)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge_path</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        father[i] = i;    <span class="comment">//初始化并查集数组</span></span><br><span class="line">        <span class="keyword">if</span> (degree[i] &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            cnt++;  <span class="comment">//度数为奇数的点</span></span><br><span class="line">            start = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (set&lt;edge&gt;::iterator it = E.<span class="built_in">begin</span>(); it != E.<span class="built_in">end</span>(); it++) &#123;    <span class="comment">//并</span></span><br><span class="line">        edge tmp = *it;</span><br><span class="line">        _merge(tmp.u, tmp.v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> f = _find(i);</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="number">1</span>) &#123;    <span class="comment">//判断图不连通</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(cnt == <span class="number">0</span> || cnt == <span class="number">2</span>)) flag = <span class="literal">false</span>;    <span class="comment">//度数有除了0和2以外的，不是欧拉图</span></span><br><span class="line"><span class="comment">//    if (cnt == 2 &amp;&amp; !(degree[1] &amp; 1)) flag = false;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[start].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        edge _find(<span class="built_in">min</span>(start, G[start][i]), <span class="built_in">max</span>(start, G[start][i]));</span><br><span class="line">        set&lt;edge&gt;::iterator it = E.<span class="built_in">find</span>(_find);</span><br><span class="line">        <span class="keyword">if</span> (it != E.<span class="built_in">end</span>()) &#123;   <span class="comment">//边存在</span></span><br><span class="line">            E.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="built_in">dfs</span>(G[start][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">push</span>(start);    <span class="comment">//回溯</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        G[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        G[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">        E.<span class="built_in">insert</span>(<span class="built_in">edge</span>(<span class="built_in">min</span>(a, b), <span class="built_in">max</span>(a, b)));    <span class="comment">//储存边</span></span><br><span class="line">        degree[a]++;</span><br><span class="line">        degree[b]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">judge_path</span>();</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;    <span class="comment">//无法画出欧拉路</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//排序，保证路径的字典序最小</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(G[i].<span class="built_in">begin</span>(), G[i].<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(start);</span><br><span class="line">        <span class="keyword">while</span> (!ans.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> temp = ans.<span class="built_in">top</span>();</span><br><span class="line">            cout &lt;&lt; temp &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            ans.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学问题</title>
      <link href="/2024/02/03/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/"/>
      <url>/2024/02/03/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>快读</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一、高精度"><a href="#一、高精度" class="headerlink" title="一、高精度"></a>一、高精度</h2><h3 id="1-高精度加法"><a href="#1-高精度加法" class="headerlink" title="1.高精度加法"></a>1.高精度加法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//高精度加法计算</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str1;</span><br><span class="line">    string str2;</span><br><span class="line">    cin &gt;&gt; str1;<span class="comment">//输入第一个数</span></span><br><span class="line">    cin &gt;&gt; str2;<span class="comment">//输入第二个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str1.<span class="built_in">size</span>(); i ++)<span class="comment">//逆序输入</span></span><br><span class="line">        a[str1.<span class="built_in">size</span>()<span class="number">-1</span> - i] = str1[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str2.<span class="built_in">size</span>(); i ++)<span class="comment">//逆序输入</span></span><br><span class="line">        b[str2.<span class="built_in">size</span>()<span class="number">-1</span> - i] = str2[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">max</span>(str1.<span class="built_in">size</span>(), str2.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">        c[i] += a[i] + b[i];</span><br><span class="line">        c[i+<span class="number">1</span>] += c[i] / <span class="number">10</span>;<span class="comment">//若大于10，进1</span></span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c[len<span class="number">-1</span>] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)</span><br><span class="line">        cout &lt;&lt; c[len<span class="number">-1</span>-i];<span class="comment">//逆序输出数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-高精度减法"><a href="#2-高精度减法" class="headerlink" title="2.高精度减法"></a>2.高精度减法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;String&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N],c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s1, s2;</span><br><span class="line">cin &gt;&gt; s1 &gt;&gt; s2;    <span class="comment">//输入两个数字</span></span><br><span class="line"><span class="comment">//判断相减之后是否为负数</span></span><br><span class="line"><span class="keyword">if</span> (s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>() || s1.<span class="built_in">size</span>() == s2.<span class="built_in">size</span>() &amp;&amp; s1 &lt; s2) &#123;</span><br><span class="line">    <span class="built_in">swap</span>(s1, s2);    <span class="comment">//交换s1和s2，保证使用s1-s2</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(s1.<span class="built_in">size</span>(), s2.<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    a[s1.<span class="built_in">size</span>() - <span class="number">1</span> - i] = s1[i] - <span class="string">&#x27;0&#x27;</span>;    <span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s2.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    b[s2.<span class="built_in">size</span>() - <span class="number">1</span> - i] = s2[i] - <span class="string">&#x27;0&#x27;</span>;    <span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理相减</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] &lt; b[i]) &#123; <span class="comment">//不够减向上借一位</span></span><br><span class="line">        a[i + <span class="number">1</span>]--;</span><br><span class="line">        a[i] += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    c[i] = a[i] - b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除前导0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;   <span class="comment">//逆序输出</span></span><br><span class="line">    cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-高精度乘低精度"><a href="#3-高精度乘低精度" class="headerlink" title="3.高精度乘低精度"></a>3.高精度乘低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> a[N],b,c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s&gt;&gt;b;<span class="comment">//输入大数字 小数字</span></span><br><span class="line"><span class="type">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[len<span class="number">-1</span>-i]=s[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理相乘</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i]+=a[i]*b;</span><br><span class="line">c[i+<span class="number">1</span>]+=c[i]/<span class="number">10</span>;</span><br><span class="line">c[i]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求出数组最终长度</span></span><br><span class="line"><span class="keyword">while</span>(c[len]&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[len+<span class="number">1</span>]+=c[len]/<span class="number">10</span>;</span><br><span class="line">c[len]%=<span class="number">10</span>;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除前导0</span></span><br><span class="line"><span class="keyword">while</span>(c[len<span class="number">-1</span>]==<span class="number">0</span>&amp;&amp;len&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="comment">//逆序输出</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-高精度乘高精度"><a href="#4-高精度乘高精度" class="headerlink" title="4.高精度乘高精度"></a>4.高精度乘高精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N],c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s1,s2;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">    a[s1.<span class="built_in">size</span>()<span class="number">-1</span>-i]=s1[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s2.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">b[s2.<span class="built_in">size</span>()<span class="number">-1</span>-i]=s2[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理相乘</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s2.<span class="built_in">size</span>();j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k=i+j;</span><br><span class="line">c[k]+=a[i]*b[j];</span><br><span class="line">c[k+<span class="number">1</span>]+=c[k]/<span class="number">10</span>;</span><br><span class="line">c[k]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断进位进到哪里，两个数相乘，位数最多是x+y位，所以从x+y+1位那里开始判断</span></span><br><span class="line"><span class="type">int</span> len=s1.<span class="built_in">size</span>()+s2.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(c[len<span class="number">-1</span>]&gt;<span class="number">0</span>)len++;</span><br><span class="line"><span class="comment">//删除前导0</span></span><br><span class="line"><span class="keyword">while</span>(c[len<span class="number">-1</span>]==<span class="number">0</span>&amp;&amp;len&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;c[i];<span class="comment">//逆序输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-低精度除法高精商"><a href="#5-低精度除法高精商" class="headerlink" title="5.低精度除法高精商"></a>5.低精度除法高精商</h3><p>a除以b，要求输出小数点后n位</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b, n, c[<span class="number">100</span>];</span><br><span class="line">c[<span class="number">0</span>] = a / b;   <span class="comment">//整数部分</span></span><br><span class="line"><span class="type">int</span> t = a % b;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    c[i] = t * <span class="number">10</span> / b;</span><br><span class="line">    t = t * <span class="number">10</span> - c[i] * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先输出小数点前的数字以及小数点</span></span><br><span class="line">cout &lt;&lt; c[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="comment">//然后再来输出小数点后面的数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-高精度除法低精度商"><a href="#6-高精度除法低精度商" class="headerlink" title="6.高精度除法低精度商"></a>6.高精度除法低精度商</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//除数用s1存放，被除数用int b存放，余数用int t存放，商用s2存放</span></span><br><span class="line">string s1, s2;</span><br><span class="line"><span class="type">int</span> b, t, x;</span><br><span class="line">cin &gt;&gt; s1 &gt;&gt; b;</span><br><span class="line"><span class="comment">//高精度除法用正序转存s1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    a[i] = s1[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商暂时存在数组c中，长度存在int x中</span></span><br><span class="line">t = x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//代入计算的时候要注意余数t的参与</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    c[i] = (t * <span class="number">10</span> + a[i]) / b; <span class="comment">//记得加上上一个数作除法之后留下的余数</span></span><br><span class="line">    t = (t * <span class="number">10</span> + a[i]) % b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理前导0</span></span><br><span class="line"><span class="keyword">while</span> (c[x] == <span class="number">0</span> &amp;&amp; x &lt; s1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将商存到s2中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt; s1.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    s2 += c[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出商和余数</span></span><br><span class="line">cout &lt;&lt; s2 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; t;</span><br></pre></td></tr></table></figure><h2 id="二、最大公约数与最小公倍数"><a href="#二、最大公约数与最小公倍数" class="headerlink" title="二、最大公约数与最小公倍数"></a>二、最大公约数与最小公倍数</h2><p>辗转相除法（欧几里得算法）最大公约数</p><p>时间复杂度为O（logb）</p><p>定理</p><p>当a与b都为正整数且a&gt;b时，记gcd(a,b)为a与b的最大公约数，则有gcd（a,b）&#x3D;gcd（b, a mod b）</p><p>证明</p><p>a可以表示成 a &#x3D; kb + r（a，b，k，r皆为正整数，且r不为0）</p><p>假设d是a，b的一个公约数，则有d|a，d|b，即a和b都可以被d整除。（x|y意为kx &#x3D; y，k为正整数）</p><p>而r &#x3D; a - kb，两边同时除以d，r&#x2F;d &#x3D; a&#x2F;d - kb&#x2F;d，由等式右边可知m &#x3D; r&#x2F;d为整数，因此d|r</p><p>因此d也是b，a mod b的公约数</p><p>故（a,b）与（b, a mod b）的公约数相等，则其最大公约数也相等，得证。</p><p>举例</p><p>假如需要求 1997 和 615 两个正整数的最大公约数,用欧几里得算法，是这样进行的：<br>1997 &#x2F; 615 &#x3D; 3 （余 152）<br>615 &#x2F; 152 &#x3D; 4（余7）<br>152 &#x2F; 7 &#x3D; 21（余5）<br>7 &#x2F; 5 &#x3D; 1 （余2）<br>5 &#x2F; 2 &#x3D; 2 （余1）<br>2 &#x2F; 1 &#x3D; 2 （余0）<br>至此，最大公约数为1。</p><h3 id="1-递归版"><a href="#1-递归版" class="headerlink" title="1.递归版"></a>1.递归版</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-循环版"><a href="#2-循环版" class="headerlink" title="2.循环版"></a>2.循环版</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="keyword">while</span>(a % b != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       c = a % b;</span><br><span class="line">       a = b;</span><br><span class="line">       b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-内置函数"><a href="#3-内置函数" class="headerlink" title="3.内置函数"></a>3.内置函数</h3><p>C++可以使用内置函数__gcd（a,b）来求两数的最大公约数，使用时需包含头文件algorithm。</p><h3 id="4-求最大公倍数"><a href="#4-求最大公倍数" class="headerlink" title="4.求最大公倍数"></a>4.求最大公倍数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a/<span class="built_in">gcd</span>(a,b)*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、素数筛法"><a href="#三、素数筛法" class="headerlink" title="三、素数筛法"></a>三、素数筛法</h2><h3 id="1-朴素筛法"><a href="#1-朴素筛法" class="headerlink" title="1.朴素筛法"></a>1.朴素筛法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">1</span>)<span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(n);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-埃氏（Eratosthenes）筛法"><a href="#2-埃氏（Eratosthenes）筛法" class="headerlink" title="2.埃氏（Eratosthenes）筛法"></a>2.埃氏（Eratosthenes）筛法</h3><p>假设要筛2-n内的素数，则先将2的倍数从里面剔除，再将3的倍数从里面剔除，以此类推……时间复杂度为O（nloglogn），已经非常接近线性了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//素数表获取</span></span><br><span class="line"><span class="comment">//埃式筛法</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> prime[maxn],pnum=<span class="number">0</span>;<span class="comment">//数组来记录素数元素，pnum来记录素数个数</span></span><br><span class="line"><span class="type">bool</span> p[maxn];<span class="comment">//素数判断 false 则说明为素数，否则不为素数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">prime[pnum++]=i;<span class="comment">//记录素数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;maxn;j+=i)<span class="comment">//将素数的倍数标记为非素数</span></span><br><span class="line">&#123;</span><br><span class="line">p[j]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">find_prime</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pnum;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;prime[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-欧拉（Euler）筛法"><a href="#3-欧拉（Euler）筛法" class="headerlink" title="3.欧拉（Euler）筛法"></a>3.欧拉（Euler）筛法</h3><p>欧拉筛法是埃氏筛法的改进，埃氏筛法终究会出现一个数被多个数筛掉的情况。例如因为120 &#x3D; 2^3 x 3 x 5，因为2，3，5是120的质因子，所以120会被2筛一次，被3筛一次，被5筛一次，共3次。</p><p>而欧拉筛法保证了每一个合数都被其最小质因子筛去，保证不会重复筛除。故遍历一次就好，时间复杂度为O（n）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//欧拉筛法</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100</span>;</span><br><span class="line"><span class="type">bool</span> p[N];<span class="comment">//素数判断 false为素数 </span></span><br><span class="line"><span class="type">int</span> prime[N],pnum=<span class="number">0</span>;<span class="comment">//数组记录素数元素，pnum记录素数个数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">prime[pnum++]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;pnum&amp;&amp;i*prime[j]&lt;=N;j++)<span class="comment">//防止数组越界</span></span><br><span class="line">&#123;</span><br><span class="line">p[i*prime[j]]=<span class="literal">true</span>;<span class="comment">//最小质因子筛合数</span></span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">find_prime</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pnum;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;prime[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、分数计算"><a href="#四、分数计算" class="headerlink" title="四、分数计算"></a>四、分数计算</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">//最大公约数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分数运算</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Frac</span><span class="comment">//分数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> up;<span class="comment">//分子</span></span><br><span class="line"><span class="type">int</span> down;<span class="comment">//分母</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//约分</span></span><br><span class="line"><span class="function">Frac <span class="title">reduction</span><span class="params">(Frac result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(result.down&lt;<span class="number">0</span>)<span class="comment">//分母为负数，分子分母变相反数</span></span><br><span class="line">&#123;</span><br><span class="line">result.up=-result.up;<span class="comment">//符号位放在分母上</span></span><br><span class="line">     result.down=-result.down;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result.up==<span class="number">0</span>)<span class="comment">//分子为0</span></span><br><span class="line">&#123;</span><br><span class="line">result.down=<span class="number">1</span>;<span class="comment">//分母为1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">gcd</span>(<span class="built_in">abs</span>(result.up),<span class="built_in">abs</span>(result.down));<span class="comment">//约分</span></span><br><span class="line">result.up/=d;</span><br><span class="line">result.down/=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//乘法</span></span><br><span class="line"><span class="function">Frac <span class="title">multi</span><span class="params">(Frac f1,Frac f2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Frac result;</span><br><span class="line">result.up=f1.up*f2.up;</span><br><span class="line">result.down=f1.down*f2.down;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reduction</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//除法</span></span><br><span class="line"><span class="function">Frac <span class="title">divide</span><span class="params">(Frac f1,Frac f2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Frac result;</span><br><span class="line">result.up=f1.up*f2.down;</span><br><span class="line">result.down=f1.down*f2.up;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reduction</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function">Frac <span class="title">add</span><span class="params">(Frac f1,Frac f2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Frac result;</span><br><span class="line">result.up=f1.up*f2.down+f1.down*f2.up;</span><br><span class="line">result.down=f1.down*f2.down;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reduction</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line"><span class="function">Frac <span class="title">minu</span><span class="params">(Frac f1,Frac f2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Frac result;</span><br><span class="line">result.up=f1.up*f2.down-f1.down*f2.up;</span><br><span class="line">result.down=f1.down*f2.down;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reduction</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(Frac r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r=<span class="built_in">reduction</span>(r);</span><br><span class="line"><span class="keyword">if</span>(r.down==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,r.up);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(r.up)&gt;r.down)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d/%d\n&quot;</span>,r.up/r.down,<span class="built_in">abs</span>(r.up)%r.down,r.down);<span class="comment">//假分数表示形式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d/%d\n&quot;</span>,r.up,r.down);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,d;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">Frac f,e,r;</span><br><span class="line">f.up=a;e.up=c;</span><br><span class="line">f.down=b;e.down=d;</span><br><span class="line"><span class="built_in">show</span>(f);</span><br><span class="line"><span class="built_in">show</span>(e);</span><br><span class="line">r=<span class="built_in">add</span>(f,e);</span><br><span class="line"><span class="built_in">show</span>(r);</span><br><span class="line">r=<span class="built_in">minu</span>(f,e);</span><br><span class="line"><span class="built_in">show</span>(r);</span><br><span class="line">r=<span class="built_in">multi</span>(f,e);</span><br><span class="line"><span class="built_in">show</span>(r);</span><br><span class="line">r=<span class="built_in">divide</span>(f,e);</span><br><span class="line"><span class="built_in">show</span>(r);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、前缀和"><a href="#五、前缀和" class="headerlink" title="五、前缀和"></a>五、前缀和</h2><p>1.一维前缀和</p><p>dp[i]表示从下标1开始到下标i的一维数组元素之和，若计算区间[a,b]的数组元素之和，其中递推式sum&#x3D;dp[j]-dp[i-1].</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> arr[N],dp[N];<span class="comment">//dp[i]表示从下标1开始到下标i的数组元素之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i]=dp[i<span class="number">-1</span>]+arr[i];<span class="comment">//计算前缀和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.二维前缀和</p><p>s(i,j)表示从（1,1)开始到（i，j)位置的二维数组所有元素之和，其中递推式为s(i,j)+&#x3D;s(i-1,j)+s(i,j-1)-s(i-1,j-1),则从（a+1,b+1)到（c，d)的和为s[a,b]+s[c,d]-s[a,d]-s[b,c].</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//二维前缀和</span></span><br><span class="line"><span class="comment">//s[i][j]表示从arr[1][1]到arr[i][j]的和</span></span><br><span class="line"><span class="type">int</span> n,l,r,t,arr[<span class="number">605</span>][<span class="number">605</span>],count,sum[<span class="number">605</span>][<span class="number">605</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 16 1 6</span></span><br><span class="line"><span class="comment">0 1 2 3</span></span><br><span class="line"><span class="comment">4 5 6 7</span></span><br><span class="line"><span class="comment">8 9 10 11</span></span><br><span class="line"><span class="comment">12 13 14 15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> sumval=<span class="number">0</span>;<span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> left=<span class="built_in">max</span>(<span class="number">1</span>,x-r),right=<span class="built_in">min</span>(n,x+r);<span class="comment">//左右边界</span></span><br><span class="line"><span class="type">int</span> down=<span class="built_in">max</span>(<span class="number">1</span>,y-r),up=<span class="built_in">min</span>(n,y+r);<span class="comment">//上下边界</span></span><br><span class="line">sumval = sum[right][up] - sum[right][down<span class="number">-1</span>] - sum[left<span class="number">-1</span>][up] + sum[left<span class="number">-1</span>][down<span class="number">-1</span>];</span><br><span class="line">num=(right-left+<span class="number">1</span>)*(up-down+<span class="number">1</span>);</span><br><span class="line"><span class="type">double</span> ave=sumval*<span class="number">1.00</span>/num;</span><br><span class="line"><span class="keyword">if</span>(ave&lt;=t)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;l&gt;&gt;r&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;arr[i][j];<span class="comment">//读入数据</span></span><br><span class="line">sum[i][j]=arr[i][j];</span><br><span class="line">sum[i][j] += sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>] ;<span class="comment">//计算前缀和</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">judge</span>(i,j))count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">  cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、差分"><a href="#六、差分" class="headerlink" title="六、差分"></a>六、差分</h2><p>差分是求前缀和的逆操作，对于原数组a[n],构造出一个b[n]数组中，使a[n]为b[n]的前缀和。一般用于快速对整个数组进行操作，比如将a数组中[l,r]部分的数据全部加上c.使用暴力的方法，则时间复杂度至少为O（n),而使用差分算法时间复杂度降低到O（1）.</p><p><strong>1.一维差分</strong><br>创建一数组b，使得数组a为数组b的前缀和，数组b为数组a的差分</p><p>构造方法：b[i] &#x3D; a[i] - a[i - 1]</p><p>此处使用了一个虚拟的构造方式(在数组一个位置加上一个数，那么在它的下一个位置减去这一数)</p><p>应用：对于a数组的任意区间[l, r]，令其加上一个数，而不改变其它值</p><p>b[l] +&#x3D; c, b[r + 1] -&#x3D; c</p><p>差分操作和前缀和一样数组下标都从1开始。</p><p>b[l]+c后，l后面的数组都会加c。r后面的数据也会被改变，要改回来就得b[r+1]-c.</p><p><strong>模板题如下</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">输入一个长度为 n 的整数序列。接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r] 之间的每个数加上 c。</span><br><span class="line">请你输出进行完所有操作后的序列。输入格式</span><br><span class="line">第一行包含两个整数 n 和 m。</span><br><span class="line">第二行包含 n 个整数，表示整数序列。</span><br><span class="line">接下来 m 行，每行包含三个整数 l，r，c，表示一个操作。输出格式</span><br><span class="line">共一行，包含 n 个整数，表示最终序列。数据范围</span><br><span class="line"><span class="number">1</span>≤n,m≤<span class="number">100000</span>,</span><br><span class="line"><span class="number">1</span>≤l≤r≤n,</span><br><span class="line">−<span class="number">1000</span>≤c≤<span class="number">1000</span>,</span><br><span class="line">−<span class="number">1000</span>≤整数序列中元素的值≤<span class="number">1000</span></span><br><span class="line">输入样例：</span><br><span class="line"><span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line">输出样例：</span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )cin&gt;&gt;a[i];<span class="comment">//读入数据</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        b[j]=a[j]-a[j<span class="number">-1</span>];<span class="comment">//进行差分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l,r,c;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;</span><br><span class="line">        b[l]=b[l]+c;</span><br><span class="line">        b[r+<span class="number">1</span>]=b[r+<span class="number">1</span>]-c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        sum=sum+b[i];</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.二维差分</strong><br>直接得出公式<code>b[i][j] += c, b[i + 1][j] -= c, b[i][j + 1] -= c, b[i + 1][j + 1] += c</code><br>每次对b数组执行以上操作，等价于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i=x1;i&lt;=x2;i++)</span><br><span class="line">  <span class="keyword">for</span>(int j=y1;j&lt;=y2;j++)</span><br><span class="line">    a[i][j]+=c;</span><br></pre></td></tr></table></figure><p><strong>模板题如下</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">输入一个 n 行 m 列的整数矩阵，再输入 q 个操作，每个操作包含五个整数 x1,y1,x2,y2,c，其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。</span><br><span class="line">每个操作都要将选中的子矩阵中的每个元素的值加上 c。</span><br><span class="line">请你将进行完所有操作后的矩阵输出。输入格式</span><br><span class="line">第一行包含整数 n,m,q。</span><br><span class="line">接下来 n 行，每行包含 m 个整数，表示整数矩阵。</span><br><span class="line">接下来 q 行，每行包含 <span class="number">5</span> 个整数 x1,y1,x2,y2,c，表示一个操作。</span><br><span class="line">输出格式</span><br><span class="line">共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。数据范围</span><br><span class="line"><span class="number">1</span>≤n,m≤<span class="number">1000</span>,</span><br><span class="line"><span class="number">1</span>≤q≤<span class="number">100000</span>,</span><br><span class="line"><span class="number">1</span>≤x1≤x2≤n,</span><br><span class="line"><span class="number">1</span>≤y1≤y2≤m,</span><br><span class="line">−<span class="number">1000</span>≤c≤<span class="number">1000</span>,</span><br><span class="line">−<span class="number">1000</span>≤矩阵内元素的值≤<span class="number">1000</span></span><br><span class="line">输入样例：</span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line">输出样例：</span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N][N], b[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[x1][y1] += c;</span><br><span class="line">    b[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">    b[x1][y2 + <span class="number">1</span>] -= c;</span><br><span class="line">    b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">insert</span>(i, j, i, j, a[i][j]);      <span class="comment">//构建差分数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2, c;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class="line">        <span class="built_in">insert</span>(x1, y1, x2, y2, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            b[i][j] += b[i - <span class="number">1</span>][j] + b[i][j - <span class="number">1</span>] - b[i - <span class="number">1</span>][j - <span class="number">1</span>];  <span class="comment">//二维前缀和</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">           cout&lt;&lt;b[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="七、扩展欧几里得算法"><a href="#七、扩展欧几里得算法" class="headerlink" title="七、扩展欧几里得算法"></a>七、扩展欧几里得算法</h2><p>给定两个整数a和b，求一组整数解（x,y)使得ax+by&#x3D;gcd(a,b)成立，其中gcd(a,b)表示a和b的最大公约数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> g=<span class="built_in">exgcd</span>(b,a%b,x,y);<span class="comment">//递归计算exgcd(b,a%b)</span></span><br><span class="line">    <span class="type">int</span> temp=x;<span class="comment">//存放x的值</span></span><br><span class="line">    x=y;<span class="comment">//更新x=y(old)</span></span><br><span class="line">    y=temp-a/b*y;  <span class="comment">//更新y=x(old)-a/b*y(old)</span></span><br><span class="line">    <span class="keyword">return</span> g;  <span class="comment">//g是gcd</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、进制转换"><a href="#八、进制转换" class="headerlink" title="八、进制转换"></a>八、进制转换</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="comment">//进制转化</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;mp1;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">char</span>&gt;mp2;</span><br><span class="line"><span class="type">int</span> num,temp;</span><br><span class="line"><span class="type">char</span> ans[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">mp1[i+<span class="string">&#x27;0&#x27;</span>]=i;</span><br><span class="line">mp2[i]=i+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">char</span> i=<span class="string">&#x27;A&#x27;</span>;i&lt;=<span class="string">&#x27;F&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">mp1[i]=i-<span class="string">&#x27;A&#x27;</span>+<span class="number">10</span>;</span><br><span class="line">mp2[i-<span class="string">&#x27;A&#x27;</span>+<span class="number">10</span>]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d;<span class="comment">//初始进制</span></span><br><span class="line">cin&gt;&gt;d;</span><br><span class="line">string str;<span class="comment">//读入数据</span></span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//转化为10进制</span></span><br><span class="line">temp=temp*d+mp1[str[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a;<span class="comment">//转化后的进制</span></span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line"><span class="keyword">while</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line">ans[num++]=mp2[temp%a];</span><br><span class="line">temp/=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=num<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;ans[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、组合数求解"><a href="#九、组合数求解" class="headerlink" title="九、组合数求解"></a>九、组合数求解</h2><p>公式：<br>$$<br>C_n^m&#x3D;1(m&#x3D;0或m&#x3D;n)\<br>c_n^m&#x3D;c_{n-1}^m+c_{n-1}^{m-1}(n&gt;m&gt;0)<br>$$</p><p>所以，我们可以使用动态规划来求解组合数，直接上代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    dp[i][i] = dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">        dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察到每一行的组合数都只需要用到上一行组合数的数值，所以可以进行<strong>状态压缩</strong>，注意倒序处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">0</span>; --j) &#123;    <span class="comment">//倒序处理</span></span><br><span class="line">        <span class="keyword">if</span> (j == i || j == <span class="number">0</span>) dp[j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> dp[j] = dp[j] + dp[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学问题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
